{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>ntfy lets you send push notifications to your phone or desktop via scripts from any computer, using simple HTTP PUT or POST requests. I use it to notify myself when scripts fail, or long-running commands complete.</p>"},{"location":"#step-1-get-the-app","title":"Step 1: Get the app","text":"<p>To receive notifications on your phone, install the app, either via Google Play, App Store or F-Droid. Once installed, open it and subscribe to a topic of your choosing. Topics don't have to explicitly be created, so just pick a name and use it later when you publish a message. Note that topic names are public, so it's wise  to choose something that cannot be guessed easily. </p> <p>For this guide, we'll just use <code>mytopic</code> as our topic name:</p> <p> </p> Creating/adding your first topic <p>That's it. After you tap \"Subscribe\", the app is listening for new messages on that topic.</p>"},{"location":"#step-2-send-a-message","title":"Step 2: Send a message","text":"<p>Now let's send a message to our topic. It's easy in every language, since we're just using HTTP PUT/POST, or with the ntfy CLI. The message is in the request body. Here's an example showing how to publish a  simple message using a POST request:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPythonPHP <pre><code>curl -d \"Backup successful \ud83d\ude00\" ntfy.sh/mytopic\n</code></pre> <pre><code>ntfy publish mytopic \"Backup successful \ud83d\ude00\"\n</code></pre> <pre><code>POST /mytopic HTTP/1.1\nHost: ntfy.sh\n\nBackup successful \ud83d\ude00\n</code></pre> <pre><code>fetch('https://ntfy.sh/mytopic', {\n    method: 'POST', // PUT works too\n    body: 'Backup successful \ud83d\ude00'\n})\n</code></pre> <pre><code>http.Post(\"https://ntfy.sh/mytopic\", \"text/plain\",\n   strings.NewReader(\"Backup successful \ud83d\ude00\"))\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/mytopic\",\n    data=\"Backup successful \ud83d\ude00\".encode(encoding='utf-8'))\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt; 'Content-Type: text/plain',\n        'content' =&gt; 'Backup successful \ud83d\ude00'\n    ]\n]));\n</code></pre> <p>This will create a notification that looks like this:</p> <p> </p> Android notification <p>That's it. You're all set. Go play and read the rest of the docs. I highly recommend reading at least the page on publishing messages, as well as the detailed page on the Android/iOS app.</p> <p>Here's another video showing the entire process:</p> Sending push notifications to your Android phone"},{"location":"config/","title":"Configuring the ntfy server","text":"<p>The ntfy server can be configured in three ways: using a config file (typically at <code>/etc/ntfy/server.yml</code>,  see server.yml), via command line arguments  or using environment variables.</p>"},{"location":"config/#quick-start","title":"Quick start","text":"<p>By default, simply running <code>ntfy serve</code> will start the server at port 80. No configuration needed. Batteries included \ud83d\ude00.  If everything works as it should, you'll see something like this: <pre><code>$ ntfy serve\n2021/11/30 19:59:08 Listening on :80\n</code></pre></p> <p>You can immediately start publishing messages, or subscribe via the Android app, the web UI, or simply via curl or your favorite HTTP client. To configure  the server further, check out the config options table or simply type <code>ntfy serve --help</code> to get a list of command line options.</p>"},{"location":"config/#example-config","title":"Example config","text":"<p>Info</p> <p>Definitely check out the server.yml file. It contains examples and detailed descriptions of all the settings.</p> <p>The most basic settings are <code>base-url</code> (the external URL of the ntfy server), the HTTP/HTTPS listen address (<code>listen-http</code> and <code>listen-https</code>), and socket path (<code>listen-unix</code>). All the other things are additional features.</p> <p>Here are a few working sample configs using a <code>/etc/ntfy/server.yml</code> file:</p> server.yml (HTTP-only, with cache + attachments)server.yml (HTTP+HTTPS, with cache + attachments)server.yml (behind proxy, with cache + attachments)server.yml (ntfy.sh config) <pre><code>base-url: \"http://ntfy.example.com\"\ncache-file: \"/var/cache/ntfy/cache.db\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n</code></pre> <pre><code>base-url: \"http://ntfy.example.com\"\nlisten-http: \":80\"\nlisten-https: \":443\"\nkey-file: \"/etc/letsencrypt/live/ntfy.example.com.key\"\ncert-file: \"/etc/letsencrypt/live/ntfy.example.com.crt\"\ncache-file: \"/var/cache/ntfy/cache.db\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n</code></pre> <pre><code>base-url: \"http://ntfy.example.com\"\nlisten-http: \":2586\"\ncache-file: \"/var/cache/ntfy/cache.db\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n</code></pre> <pre><code># All the things: Behind a proxy, Firebase, cache, attachments, \n# SMTP publishing &amp; receiving\n\nbase-url: \"https://ntfy.sh\"\nlisten-http: \"127.0.0.1:2586\"\nfirebase-key-file: \"/etc/ntfy/firebase.json\"\ncache-file: \"/var/cache/ntfy/cache.db\"\nbehind-proxy: true\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\nsmtp-sender-addr: \"email-smtp.us-east-2.amazonaws.com:587\"\nsmtp-sender-user: \"AKIDEADBEEFAFFE12345\"\nsmtp-sender-pass: \"Abd13Kf+sfAk2DzifjafldkThisIsNotARealKeyOMG.\"\nsmtp-sender-from: \"ntfy@ntfy.sh\"\nsmtp-server-listen: \":25\"\nsmtp-server-domain: \"ntfy.sh\"\nsmtp-server-addr-prefix: \"ntfy-\"\nkeepalive-interval: \"45s\"\n</code></pre> <p>Alternatively, you can also use command line arguments or environment variables to configure the server. Here's an example using Docker Compose (i.e. <code>docker-compose.yml</code>):</p> Docker Compose (w/ auth, cache, attachments)Docker Compose (w/ auth, cache, web push, iOS) <pre><code>version: '3'\nservices:\n  ntfy:\n    image: binwiederhier/ntfy\n    restart: unless-stopped\n    environment:\n      NTFY_BASE_URL: http://ntfy.example.com\n      NTFY_CACHE_FILE: /var/lib/ntfy/cache.db\n      NTFY_AUTH_FILE: /var/lib/ntfy/auth.db\n      NTFY_AUTH_DEFAULT_ACCESS: deny-all\n      NTFY_BEHIND_PROXY: true\n      NTFY_ATTACHMENT_CACHE_DIR: /var/lib/ntfy/attachments\n      NTFY_ENABLE_LOGIN: true\n    volumes:\n      - ./:/var/lib/ntfy\n    ports:\n      - 80:80\n    command: serve\n</code></pre> <pre><code>version: '3'\nservices:\n  ntfy:\n    image: binwiederhier/ntfy\n    restart: unless-stopped\n    environment:\n      NTFY_BASE_URL: http://ntfy.example.com\n      NTFY_CACHE_FILE: /var/lib/ntfy/cache.db\n      NTFY_AUTH_FILE: /var/lib/ntfy/auth.db\n      NTFY_AUTH_DEFAULT_ACCESS: deny-all\n      NTFY_BEHIND_PROXY: true\n      NTFY_ATTACHMENT_CACHE_DIR: /var/lib/ntfy/attachments\n      NTFY_ENABLE_LOGIN: true\n      NTFY_UPSTREAM_BASE_URL: https://ntfy.sh\n      NTFY_WEB_PUSH_PUBLIC_KEY: &lt;public_key&gt;\n      NTFY_WEB_PUSH_PRIVATE_KEY: &lt;private_key&gt;\n      NTFY_WEB_PUSH_FILE: /var/lib/ntfy/webpush.db\n      NTFY_WEB_PUSH_EMAIL_ADDRESS: &lt;email&gt;\n    volumes:\n      - ./:/var/lib/ntfy\n    ports:\n      - 8093:80\n    command: serve\n</code></pre>"},{"location":"config/#message-cache","title":"Message cache","text":"<p>If desired, ntfy can temporarily keep notifications in an in-memory or an on-disk cache. Caching messages for a short period of time is important to allow phones and other devices with brittle Internet connections to be able to retrieve notifications that they may have missed. </p> <p>By default, ntfy keeps messages in-memory for 12 hours, which means that cached messages do not survive an application restart. You can override this behavior using the following config settings:</p> <ul> <li><code>cache-file</code>: if set, ntfy will store messages in a SQLite based cache (default is empty, which means in-memory cache).   This is required if you'd like messages to be retained across restarts.</li> <li><code>cache-duration</code>: defines the duration for which messages are stored in the cache (default is <code>12h</code>). </li> </ul> <p>You can also entirely disable the cache by setting <code>cache-duration</code> to <code>0</code>. When the cache is disabled, messages are only passed on to the connected subscribers, but never stored on disk or even kept in memory longer than is needed to forward the message to the subscribers.</p> <p>Subscribers can retrieve cached messaging using the <code>poll=1</code> parameter, as well as the <code>since=</code> parameter.</p>"},{"location":"config/#attachments","title":"Attachments","text":"<p>If desired, you may allow users to upload and attach files to notifications. To enable this feature, you have to simply configure an attachment cache directory and a base URL (<code>attachment-cache-dir</code>, <code>base-url</code>).  Once these options are set and the directory is writable by the server user, you can upload attachments via PUT.</p> <p>By default, attachments are stored in the disk-cache for only 3 hours. The main reason for this is to avoid legal issues and such when hosting user controlled content. Typically, this is more than enough time for the user (or the auto download  feature) to download the file. The following config options are relevant to attachments:</p> <ul> <li><code>base-url</code> is the root URL for the ntfy server; this is needed for the generated attachment URLs</li> <li><code>attachment-cache-dir</code> is the cache directory for attached files</li> <li><code>attachment-total-size-limit</code> is the size limit of the on-disk attachment cache (default: 5G)</li> <li><code>attachment-file-size-limit</code> is the per-file attachment size limit (e.g. 300k, 2M, 100M, default: 15M)</li> <li><code>attachment-expiry-duration</code> is the duration after which uploaded attachments will be deleted (e.g. 3h, 20h, default: 3h)</li> </ul> <p>Here's an example config using mostly the defaults (except for the cache directory, which is empty by default): </p> /etc/ntfy/server.yml (minimal)/etc/ntfy/server.yml (all options) <pre><code>base-url: \"https://ntfy.sh\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n</code></pre> <pre><code>base-url: \"https://ntfy.sh\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\nattachment-total-size-limit: \"5G\"\nattachment-file-size-limit: \"15M\"\nattachment-expiry-duration: \"3h\"\nvisitor-attachment-total-size-limit: \"100M\"\nvisitor-attachment-daily-bandwidth-limit: \"500M\"\n</code></pre> <p>Please also refer to the rate limiting settings below, specifically <code>visitor-attachment-total-size-limit</code> and <code>visitor-attachment-daily-bandwidth-limit</code>. Setting these conservatively is necessary to avoid abuse.</p>"},{"location":"config/#access-control","title":"Access control","text":"<p>By default, the ntfy server is open for everyone, meaning everyone can read and write to any topic (this is how ntfy.sh is configured). To restrict access to your own server, you can optionally configure authentication and authorization. </p> <p>ntfy's auth is implemented with a simple SQLite-based backend. It implements two roles  (<code>user</code> and <code>admin</code>) and per-topic <code>read</code> and <code>write</code> permissions using an access control list (ACL).  Access control entries can be applied to users as well as the special everyone user (<code>*</code>), which represents anonymous API access. </p> <p>To set up auth, simply configure the following two options:</p> <ul> <li><code>auth-file</code> is the user/access database; it is created automatically if it doesn't already exist; suggested    location <code>/var/lib/ntfy/user.db</code> (easiest if deb/rpm package is used)</li> <li><code>auth-default-access</code> defines the default/fallback access if no access control entry is found; it can be   set to <code>read-write</code> (default), <code>read-only</code>, <code>write-only</code> or <code>deny-all</code>.</li> </ul> <p>Once configured, you can use the <code>ntfy user</code> command to add or modify users, and the <code>ntfy access</code> command lets you modify the access control list for specific users and topic patterns. Both of these  commands directly edit the auth database (as defined in <code>auth-file</code>), so they only work on the server, and only if the user  accessing them has the right permissions.</p>"},{"location":"config/#users-and-roles","title":"Users and roles","text":"<p>The <code>ntfy user</code> command allows you to add/remove/change users in the ntfy user database, as well as change passwords or roles (<code>user</code> or <code>admin</code>). In practice, you'll often just create one admin  user with <code>ntfy user add --role=admin ...</code> and be done with all this (see example below).</p> <p>Roles:</p> <ul> <li>Role <code>user</code> (default): Users with this role have no special permissions. Manage access using <code>ntfy access</code>   (see below).</li> <li>Role <code>admin</code>: Users with this role can read/write to all topics. Granular access control is not necessary.</li> </ul> <p>Example commands (type <code>ntfy user --help</code> or <code>ntfy user COMMAND --help</code> for more details):</p> <pre><code>ntfy user list                     # Shows list of users (alias: 'ntfy access')\nntfy user add phil                 # Add regular user phil  \nntfy user add --role=admin phil    # Add admin user phil\nntfy user del phil                 # Delete user phil\nntfy user change-pass phil         # Change password for user phil\nntfy user change-role phil admin   # Make user phil an admin\nntfy user change-tier phil pro     # Change phil's tier to \"pro\"\n</code></pre>"},{"location":"config/#access-control-list-acl","title":"Access control list (ACL)","text":"<p>The access control list (ACL) manages access to topics for non-admin users, and for anonymous access (<code>everyone</code>/<code>*</code>). Each entry represents the access permissions for a user to a specific topic or topic pattern. </p> <p>The ACL can be displayed or modified with the <code>ntfy access</code> command:</p> <pre><code>ntfy access                            # Shows access control list (alias: 'ntfy user list')\nntfy access USERNAME                   # Shows access control entries for USERNAME\nntfy access USERNAME TOPIC PERMISSION  # Allow/deny access for USERNAME to TOPIC\n</code></pre> <p>A <code>USERNAME</code> is an existing user, as created with <code>ntfy user add</code> (see users and roles), or the  anonymous user <code>everyone</code> or <code>*</code>, which represents clients that access the API without username/password.</p> <p>A <code>TOPIC</code> is either a specific topic name (e.g. <code>mytopic</code>, or <code>phil_alerts</code>), or a wildcard pattern that matches any number of topics (e.g. <code>alerts_*</code> or <code>ben-*</code>). Only the wildcard character <code>*</code> is supported. It stands for zero to any  number of characters.</p> <p>A <code>PERMISSION</code> is any of the following supported permissions:</p> <ul> <li><code>read-write</code> (alias: <code>rw</code>): Allows publishing messages to the given topic, as well as    subscribing and reading messages</li> <li><code>read-only</code> (aliases: <code>read</code>, <code>ro</code>): Allows only subscribing and reading messages, but not publishing to the topic</li> <li><code>write-only</code> (aliases: <code>write</code>, <code>wo</code>): Allows only publishing to the topic, but not subscribing to it</li> <li><code>deny</code> (alias: <code>none</code>): Allows neither publishing nor subscribing to a topic </li> </ul> <p>Example commands (type <code>ntfy access --help</code> for more details): <pre><code>ntfy access                        # Shows entire access control list\nntfy access phil                   # Shows access for user phil\nntfy access phil mytopic rw        # Allow read-write access to mytopic for user phil\nntfy access everyone mytopic rw    # Allow anonymous read-write access to mytopic\nntfy access everyone \"up*\" write   # Allow anonymous write-only access to topics \"up...\"\nntfy access --reset                # Reset entire access control list\nntfy access --reset phil           # Reset all access for user phil\nntfy access --reset phil mytopic   # Reset access for user phil and topic mytopic\n</code></pre></p> <p>Example ACL: <pre><code>$ ntfy access\nuser phil (admin)\n- read-write access to all topics (admin role)\nuser ben (user)\n- read-write access to topic garagedoor\n- read-write access to topic alerts*\n- read-only access to topic furnace\nuser * (anonymous)\n- read-only access to topic announcements\n- read-only access to topic server-stats\n- no access to any (other) topics (server config)\n</code></pre></p> <p>In this example, <code>phil</code> has the role <code>admin</code>, so he has read-write access to all topics (no ACL entries are necessary). User <code>ben</code> has three topic-specific entries. He can read, but not write to topic <code>furnace</code>, and has read-write access to topic <code>garagedoor</code> and all topics starting with the word <code>alerts</code> (wildcards). Clients that are not authenticated (called <code>*</code>/<code>everyone</code>) only have read access to the <code>announcements</code> and <code>server-stats</code> topics.</p>"},{"location":"config/#access-tokens","title":"Access tokens","text":"<p>In addition to username/password auth, ntfy also provides authentication via access tokens. Access tokens are useful to avoid having to configure your password across multiple publishing/subscribing applications. For instance, you may want to use a dedicated token to publish from your backup host, and one from your home automation system.</p> <p>Info</p> <p>As of today, access tokens grant users full access to the user account. Aside from changing the password, and deleting the account, every action can be performed with a token. Granular access tokens are on the roadmap, but not yet implemented.</p> <p>The <code>ntfy token</code> command can be used to manage access tokens for users. Tokens can have labels, and they can expire automatically (or never expire). Each user can have up to 20 tokens (hardcoded). </p> <p>Example commands (type <code>ntfy token --help</code> or <code>ntfy token COMMAND --help</code> for more details): <pre><code>ntfy token list                      # Shows list of tokens for all users\nntfy token list phil                 # Shows list of tokens for user phil\nntfy token add phil                  # Create token for user phil which never expires\nntfy token add --expires=2d phil     # Create token for user phil which expires in 2 days\nntfy token remove phil tk_th2sxr...  # Delete token\n</code></pre></p> <p>Creating an access token: <pre><code>$ ntfy token add --expires=30d --label=\"backups\" phil\n$ ntfy token list\nuser phil\n- tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 (backups), expires 15 Mar 23 14:33 EDT, accessed from 0.0.0.0 at 13 Feb 23 13:33 EST\n</code></pre></p> <p>Once an access token is created, you can use it to authenticate against the ntfy server, e.g. when you publish or subscribe to topics. To learn how, check out authenticate via access tokens.</p>"},{"location":"config/#example-private-instance","title":"Example: Private instance","text":"<p>The easiest way to configure a private instance is to set <code>auth-default-access</code> to <code>deny-all</code> in the <code>server.yml</code>:</p> /etc/ntfy/server.yml <pre><code>auth-file: \"/var/lib/ntfy/user.db\"\nauth-default-access: \"deny-all\"\n</code></pre> <p>After that, simply create an <code>admin</code> user:</p> <pre><code>$ ntfy user add --role=admin phil\npassword: mypass\nconfirm: mypass\nuser phil added with role admin \n</code></pre> <p>Once you've done that, you can publish and subscribe using Basic Auth  with the given username/password. Be sure to use HTTPS to avoid eavesdropping and exposing your password. Here's a simple example:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPythonPHP <pre><code>curl \\\n    -u phil:mypass \\\n    -d \"Look ma, with auth\" \\\n    https://ntfy.example.com/mysecrets\n</code></pre> <pre><code>ntfy publish \\\n    -u phil:mypass \\\n    ntfy.example.com/mysecrets \\\n    \"Look ma, with auth\"\n</code></pre> <pre><code>POST /mysecrets HTTP/1.1\nHost: ntfy.example.com\nAuthorization: Basic cGhpbDpteXBhc3M=\n\nLook ma, with auth\n</code></pre> <pre><code>fetch('https://ntfy.example.com/mysecrets', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth',\n    headers: {\n        'Authorization': 'Basic cGhpbDpteXBhc3M='\n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets\",\n    strings.NewReader(\"Look ma, with auth\"))\nreq.Header.Set(\"Authorization\", \"Basic cGhpbDpteXBhc3M=\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>requests.post(\"https://ntfy.example.com/mysecrets\",\n    data=\"Look ma, with auth\",\n    headers={\n        \"Authorization\": \"Basic cGhpbDpteXBhc3M=\"\n    })\n</code></pre> <pre><code>file_get_contents('https://ntfy.example.com/mysecrets', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt; \n            'Content-Type: text/plain\\r\\n' .\n            'Authorization: Basic cGhpbDpteXBhc3M=',\n        'content' =&gt; 'Look ma, with auth'\n    ]\n]));\n</code></pre>"},{"location":"config/#example-unifiedpush","title":"Example: UnifiedPush","text":"<p>UnifiedPush requires that the application server (e.g. Synapse, Fediverse Server, \u2026)  has anonymous write access to the topic used for push messages.  The topic names used by UnifiedPush all start with the <code>up*</code> prefix. Please refer to the  UnifiedPush documentation for more details.</p> <p>To enable support for UnifiedPush for private servers (i.e. <code>auth-default-access: \"deny-all\"</code>), you should either  allow anonymous write access for the entire prefix or explicitly per topic:</p> PrefixExplicitly <pre><code>$ ntfy access '*' 'up*' write-only\n</code></pre> <pre><code>$ ntfy access '*' upYzMtZGZiYTY5 write-only\n</code></pre>"},{"location":"config/#e-mail-notifications","title":"E-mail notifications","text":"<p>To allow forwarding messages via e-mail, you can configure an SMTP server for outgoing messages. Once configured,  you can set the <code>X-Email</code> header to send messages via e-mail (e.g.  <code>curl -d \"hi there\" -H \"X-Email: phil@example.com\" ntfy.sh/mytopic</code>).</p> <p>As of today, only SMTP servers with PLAIN auth and STARTLS are supported. To enable e-mail sending, you must set the  following settings:</p> <ul> <li><code>base-url</code> is the root URL for the ntfy server; this is needed for e-mail footer</li> <li><code>smtp-sender-addr</code> is the hostname:port of the SMTP server</li> <li><code>smtp-sender-user</code> and <code>smtp-sender-pass</code> are the username and password of the SMTP user</li> <li><code>smtp-sender-from</code> is the e-mail address of the sender</li> </ul> <p>Here's an example config using Amazon SES for outgoing mail (this is how it is  configured for <code>ntfy.sh</code>):</p> /etc/ntfy/server.yml <pre><code>base-url: \"https://ntfy.sh\"\nsmtp-sender-addr: \"email-smtp.us-east-2.amazonaws.com:587\"\nsmtp-sender-user: \"AKIDEADBEEFAFFE12345\"\nsmtp-sender-pass: \"Abd13Kf+sfAk2DzifjafldkThisIsNotARealKeyOMG.\"\nsmtp-sender-from: \"ntfy@ntfy.sh\"\n</code></pre> <p>Please also refer to the rate limiting settings below, specifically <code>visitor-email-limit-burst</code>  and <code>visitor-email-limit-burst</code>. Setting these conservatively is necessary to avoid abuse.</p>"},{"location":"config/#e-mail-publishing","title":"E-mail publishing","text":"<p>To allow publishing messages via e-mail, ntfy can run a lightweight SMTP server for incoming messages. Once configured,  users can send emails to a topic e-mail address (e.g. <code>mytopic@ntfy.sh</code> or  <code>myprefix-mytopic@ntfy.sh</code>) to publish messages to a topic. This is useful for e-mail based integrations such as for  statuspage.io (though these days most services also support webhooks and HTTP calls).</p> <p>To configure the SMTP server, you must at least set <code>smtp-server-listen</code> and <code>smtp-server-domain</code>:</p> <ul> <li><code>smtp-server-listen</code> defines the IP address and port the SMTP server will listen on, e.g. <code>:25</code> or <code>1.2.3.4:25</code></li> <li><code>smtp-server-domain</code> is the e-mail domain, e.g. <code>ntfy.sh</code> (must be identical to MX record, see below)</li> <li><code>smtp-server-addr-prefix</code> is an optional prefix for the e-mail addresses to prevent spam. If set to <code>ntfy-</code>, for instance,   only e-mails to <code>ntfy-$topic@ntfy.sh</code> will be accepted. If this is not set, all emails to <code>$topic@ntfy.sh</code> will be   accepted (which may obviously be a spam problem).</li> </ul> <p>Here's an example config (this is how it is configured for <code>ntfy.sh</code>):</p> /etc/ntfy/server.yml <pre><code>smtp-server-listen: \":25\"\nsmtp-server-domain: \"ntfy.sh\"\nsmtp-server-addr-prefix: \"ntfy-\"\n</code></pre> <p>In addition to configuring the ntfy server, you have to create two DNS records (an MX record  and a corresponding A record), so incoming mail will find its way to your server. Here's an example of how <code>ntfy.sh</code> is  configured (in Amazon Route 53):</p> <p> </p> DNS records for incoming mail <p>You can check if everything is working correctly by sending an email as raw SMTP via <code>nc</code>. Create a text file, e.g.  <code>email.txt</code></p> <pre><code>EHLO example.com\nMAIL FROM: phil@example.com\nRCPT TO: ntfy-mytopic@ntfy.sh\nDATA\nSubject: Email for you\nContent-Type: text/plain; charset=\"UTF-8\"\n\nHello from \ud83c\udde9\ud83c\uddea\n.\n</code></pre> <p>And then send the mail via <code>nc</code> like this. If you see any lines starting with <code>451</code>, those are errors from the  ntfy server. Read them carefully.</p> <pre><code>$ cat email.txt | nc -N ntfy.sh 25\n220 ntfy.sh ESMTP Service Ready\n250-Hello example.com\n...\n250 2.0.0 Roger, accepting mail from &lt;phil@example.com&gt;\n250 2.0.0 I'll make sure &lt;ntfy-mytopic@ntfy.sh&gt; gets this\n</code></pre> <p>As for the DNS setup, be sure to verify that <code>dig MX</code> and <code>dig A</code> are returning results similar to this:</p> <pre><code>$ dig MX ntfy.sh +short \n10 mx1.ntfy.sh.\n$ dig A mx1.ntfy.sh +short \n3.139.215.220\n</code></pre>"},{"location":"config/#local-only-email","title":"Local-only email","text":"<p>If you want to send emails from an internal service on the same network as your ntfy instance, you do not need to worry about DNS records at all. Define a port for the SMTP server and pick an SMTP server domain (can be anything).</p> /etc/ntfy/server.yml <pre><code>smtp-server-listen: \":25\"\nsmtp-server-domain: \"example.com\"\nsmtp-server-addr-prefix: \"ntfy-\"  # optional\n</code></pre> <p>Then, in the email settings of your internal service, set the SMTP server address to the IP address of your ntfy instance. Set the port to the value you defined in <code>smtp-server-listen</code>. Leave any username and password fields empty. In the \"From\" address, pick anything (e.g., \"alerts@ntfy.sh\"); the value doesn't matter. In the \"To\" address, put in an email address that follows this pattern: <code>[topic]@[smtp-server-domain]</code> (or <code>[smtp-server-addr-prefix][topic]@[smtp-server-domain]</code> if you set <code>smtp-server-addr-prefix</code>).</p> <p>So if you used <code>example.com</code> as the SMTP server domain, and you want to send a message to the <code>email-alerts</code> topic, set the \"To\" address to <code>email-alerts@example.com</code>. If the topic has access restrictions, you will need to include an access token in the \"To\" address, such as <code>email-alerts+tk_AbC123dEf456@example.com</code>.</p> <p>If the internal service lets you use define an email \"Subject\", it will become the title of the notification. The body of the email will become the message of the notification.</p>"},{"location":"config/#behind-a-proxy-tls-etc","title":"Behind a proxy (TLS, etc.)","text":"<p>Warning</p> <p>If you are running ntfy behind a proxy, you must set the <code>behind-proxy</code> flag. Otherwise, all visitors are rate limited as if they are one.</p> <p>It may be desirable to run ntfy behind a proxy (e.g. nginx, HAproxy or Apache), so you can provide TLS certificates  using Let's Encrypt using certbot, or simply because you'd like to share the ports (80/443) with other services.  Whatever your reasons may be, there are a few things to consider. </p> <p>If you are running ntfy behind a proxy, you should set the <code>behind-proxy</code> flag. This will instruct the  rate limiting logic to use the <code>X-Forwarded-For</code> header as the primary identifier for a visitor,  as opposed to the remote IP address. If the <code>behind-proxy</code> flag is not set, all visitors will be counted as one, because from the perspective of the ntfy server, they all share the proxy's IP address.</p> /etc/ntfy/server.yml <pre><code># Tell ntfy to use \"X-Forwarded-For\" to identify visitors\nbehind-proxy: true\n</code></pre>"},{"location":"config/#tlsssl","title":"TLS/SSL","text":"<p>ntfy supports HTTPS/TLS by setting the <code>listen-https</code> config option. However, if you  are behind a proxy, it is recommended that TLS/SSL termination is done by the proxy itself (see below).</p> <p>I highly recommend using certbot. I use it with the dns-route53 plugin,  which lets you use AWS Route 53 as the challenge. That's much easier than using the HTTP challenge. I've found this guide to be incredibly helpful.</p>"},{"location":"config/#nginxapache2caddy","title":"nginx/Apache2/caddy","text":"<p>For your convenience, here's a working config that'll help configure things behind a proxy. Be sure to enable WebSockets by forwarding the <code>Connection</code> and <code>Upgrade</code> headers accordingly. </p> <p>In this example, ntfy runs on <code>:2586</code> and we proxy traffic to it. We also redirect HTTP to HTTPS for GET requests against a topic or the root domain:</p> nginx (convenient)nginx (more secure)Apache2caddy <pre><code># /etc/nginx/sites-*/ntfy\n#\n# This config allows insecure HTTP POST/PUT requests against topics to allow a short curl syntax (without -L\n# and \"https://\" prefix). It also disables output buffering, which has worked well for the ntfy.sh server.\n#\n# This is pretty much how ntfy.sh is configured. To see the exact configuration,\n# see https://github.com/binwiederhier/ntfy-ansible/\n\nserver {\n  listen 80;\n  server_name ntfy.sh;\n\n  location / {\n    # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want \n    # it to work with curl without the annoying https:// prefix\n    set $redirect_https \"\";\n    if ($request_method = GET) {\n      set $redirect_https \"yes\";\n    }\n    if ($request_uri ~* \"^/([-_a-z0-9]{0,64}$|docs/|static/)\") {\n      set $redirect_https \"${redirect_https}yes\";\n    }\n    if ($redirect_https = \"yesyes\") {\n      return 302 https://$http_host$request_uri$is_args$query_string;\n    }\n\n    proxy_pass http://127.0.0.1:2586;\n    proxy_http_version 1.1;\n\n    proxy_buffering off;\n    proxy_request_buffering off;\n    proxy_redirect off;\n\n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_connect_timeout 3m;\n    proxy_send_timeout 3m;\n    proxy_read_timeout 3m;\n\n    client_max_body_size 0; # Stream request body to backend\n  }\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name ntfy.sh;\n\n  # See https://ssl-config.mozilla.org/#server=nginx&amp;version=1.18.0&amp;config=intermediate&amp;openssl=1.1.1k&amp;hsts=false&amp;ocsp=false&amp;guideline=5.6\n  ssl_session_timeout 1d;\n  ssl_session_cache shared:MozSSL:10m; # about 40000 sessions\n  ssl_session_tickets off;\n  ssl_protocols TLSv1.2 TLSv1.3;\n  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n  ssl_prefer_server_ciphers off;\n\n  ssl_certificate /etc/letsencrypt/live/ntfy.sh/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/ntfy.sh/privkey.pem;\n\n  location / {\n    proxy_pass http://127.0.0.1:2586;\n    proxy_http_version 1.1;\n\n    proxy_buffering off;\n    proxy_request_buffering off;\n    proxy_redirect off;\n\n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_connect_timeout 3m;\n    proxy_send_timeout 3m;\n    proxy_read_timeout 3m;\n\n    client_max_body_size 0; # Stream request body to backend\n  }\n}\n</code></pre> <pre><code># /etc/nginx/sites-*/ntfy\n#\n# This config requires the use of the -L flag in curl to redirect to HTTPS, and it keeps nginx output buffering\n# enabled. While recommended, I have had issues with that in the past.\n\nserver {\n  listen 80;\n  server_name ntfy.sh;\n\n  location / {\n    return 302 https://$http_host$request_uri$is_args$query_string;\n\n    proxy_pass http://127.0.0.1:2586;\n    proxy_http_version 1.1;\n\n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_connect_timeout 3m;\n    proxy_send_timeout 3m;\n    proxy_read_timeout 3m;\n\n    client_max_body_size 0; # Stream request body to backend\n  }\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name ntfy.sh;\n\n  # See https://ssl-config.mozilla.org/#server=nginx&amp;version=1.18.0&amp;config=intermediate&amp;openssl=1.1.1k&amp;hsts=false&amp;ocsp=false&amp;guideline=5.6\n  ssl_session_timeout 1d;\n  ssl_session_cache shared:MozSSL:10m; # about 40000 sessions\n  ssl_session_tickets off;\n  ssl_protocols TLSv1.2 TLSv1.3;\n  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n  ssl_prefer_server_ciphers off;\n\n  ssl_certificate /etc/letsencrypt/live/ntfy.sh/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/ntfy.sh/privkey.pem;\n\n  location / {\n    proxy_pass http://127.0.0.1:2586;\n    proxy_http_version 1.1;\n\n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_connect_timeout 3m;\n    proxy_send_timeout 3m;\n    proxy_read_timeout 3m;\n\n    client_max_body_size 0; # Stream request body to backend\n  }\n}\n</code></pre> <pre><code># /etc/apache2/sites-*/ntfy.conf\n\n&lt;VirtualHost *:80&gt;\n    ServerName ntfy.sh\n\n    # Proxy connections to ntfy (requires \"a2enmod proxy proxy_http\")\n    ProxyPass / http://127.0.0.1:2586/ upgrade=websocket\n    ProxyPassReverse / http://127.0.0.1:2586/\n\n    SetEnv proxy-nokeepalive 1\n    SetEnv proxy-sendchunked 1\n\n    # Higher than the max message size of 4096 bytes\n    LimitRequestBody 102400\n\n    # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want \n    # it to work with curl without the annoying https:// prefix (requires \"a2enmod alias\")\n    &lt;If \"%{REQUEST_METHOD} == 'GET'\"&gt;\n        RedirectMatch permanent \"^/([-_A-Za-z0-9]{0,64})$\" \"https://%{SERVER_NAME}/$1\"\n    &lt;/If&gt;\n\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName ntfy.sh\n\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/ntfy.sh/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/ntfy.sh/privkey.pem\n    Include /etc/letsencrypt/options-ssl-apache.conf\n\n    # Proxy connections to ntfy (requires \"a2enmod proxy proxy_http\")\n    ProxyPass / http://127.0.0.1:2586/ upgrade=websocket\n    ProxyPassReverse / http://127.0.0.1:2586/\n\n    SetEnv proxy-nokeepalive 1\n    SetEnv proxy-sendchunked 1\n\n    # Higher than the max message size of 4096 bytes \n    LimitRequestBody 102400\n\n&lt;/VirtualHost&gt;\n</code></pre> <pre><code># Note that this config is most certainly incomplete. Please help out and let me know what's missing\n# via Discord/Matrix or in a GitHub issue.\n# Note: Caddy automatically handles both HTTP and WebSockets with reverse_proxy \n\nntfy.sh, http://nfty.sh {\n    reverse_proxy 127.0.0.1:2586\n\n    # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want\n    # it to work with curl without the annoying https:// prefix\n    @httpget {\n        protocol http\n        method GET\n        path_regexp ^/([-_a-z0-9]{0,64}$|docs/|static/)\n    }\n    redir @httpget https://{host}{uri}\n}\n</code></pre>"},{"location":"config/#firebase-fcm","title":"Firebase (FCM)","text":"<p>Info</p> <p>Using Firebase is optional and only works if you modify and build your own Android .apk. For a self-hosted instance, it's easier to just not bother with FCM.</p> <p>Firebase Cloud Messaging (FCM) is the Google approved way to send push messages to Android devices. FCM is the only method that an Android app can receive messages without having to run a foreground service.</p> <p>For the main host ntfy.sh, the ntfy Android app uses Firebase to send messages to the device. For other hosts, instant delivery is used and FCM is not involved.</p> <p>To configure FCM for your self-hosted instance of the ntfy server, follow these steps:</p> <ol> <li>Sign up for a Firebase account</li> <li>Create a Firebase app and download the key file (e.g. <code>myapp-firebase-adminsdk-...json</code>)</li> <li>Place the key file in <code>/etc/ntfy</code>, set the <code>firebase-key-file</code> in <code>server.yml</code> accordingly and restart the ntfy server</li> <li>Build your own Android .apk following these instructions</li> </ol> <p>Example: <pre><code># If set, also publish messages to a Firebase Cloud Messaging (FCM) topic for your app.\n# This is optional and only required to support Android apps (which don't allow background services anymore).\n#\nfirebase-key-file: \"/etc/ntfy/ntfy-sh-firebase-adminsdk-ahnce-9f4d6f14b5.json\"\n</code></pre></p>"},{"location":"config/#ios-instant-notifications","title":"iOS instant notifications","text":"<p>Unlike Android, iOS heavily restricts background processing, which sadly makes it impossible to implement instant  push notifications without a central server. </p> <p>To still support instant notifications on iOS through your self-hosted ntfy server, you have to forward so called <code>poll_request</code>  messages to the main ntfy.sh server (or any upstream server that's APNS/Firebase connected, if you build your own iOS app), which will then forward it to Firebase/APNS.</p> <p>To configure it, simply set <code>upstream-base-url</code> like so:</p> <pre><code>upstream-base-url: \"https://ntfy.sh\"\nupstream-access-token: \"...\" # optional, only if rate limits exceeded, or upstream server protected\n</code></pre> <p>If set, all incoming messages will publish a poll request to the configured upstream server, containing the message ID of the original message, instructing the iOS app to poll this server for the actual message contents.</p> <p>If <code>upstream-base-url</code> is not set, notifications will still eventually get to your device, but delivery can take hours, depending on the state of the phone. If you are using your phone, it shouldn't take more than 20-30 minutes though.</p> <p>In case you're curious, here's an example of the entire flow: </p> <ul> <li>In the iOS app, you subscribe to <code>https://ntfy.example.com/mytopic</code></li> <li>The app subscribes to the Firebase topic <code>6de73be8dfb7d69e...</code> (the SHA256 of the topic URL)</li> <li>When you publish a message to <code>https://ntfy.example.com/mytopic</code>, your ntfy server will publish a    poll request to <code>https://ntfy.sh/6de73be8dfb7d69e...</code>. The request from your server to the upstream server    contains only the message ID (in the <code>X-Poll-ID</code> header), and the SHA256 checksum of the topic URL (as upstream topic).</li> <li>The ntfy.sh server publishes the poll request message to Firebase, which forwards it to APNS, which forwards it to your iOS device</li> <li>Your iOS device receives the poll request, and fetches the actual message from your server, and then displays it</li> </ul> <p>Here's an example of what the self-hosted server forwards to the upstream server. The request is equivalent to this curl:</p> <pre><code>curl -X POST -H \"X-Poll-ID: s4PdJozxM8na\" https://ntfy.sh/6de73be8dfb7d69e32fb2c00c23fe7adbd8b5504406e3068c273aa24cef4055b\n{\"id\":\"4HsClFEuCIcs\",\"time\":1654087955,\"event\":\"poll_request\",\"topic\":\"6de73be8dfb7d69e32fb2c00c23fe7adbd8b5504406e3068c273aa24cef4055b\",\"message\":\"New message\",\"poll_id\":\"s4PdJozxM8na\"}\n</code></pre> <p>Note that the self-hosted server literally sends the message <code>New message</code> for every message, even if your message  may be <code>Some other message</code>. This is so that if iOS cannot talk to the self-hosted server (in time, or at all),  it'll show <code>New message</code> as a popup.</p>"},{"location":"config/#web-push","title":"Web Push","text":"<p>Web Push (RFC8030) allows ntfy to receive push notifications, even when the ntfy web app (or even the browser, depending on the platform) is closed.  When enabled, the user can enable background notifications for their topics in the wep app under Settings. Once enabled by the user, ntfy will forward published messages to the push endpoint (browser-provided, e.g. fcm.googleapis.com), which will then forward it to the browser.</p> <p>To configure Web Push, you need to generate and configure a VAPID keypair (via <code>ntfy webpush keys</code>), a database to keep track of the browser's subscriptions, and an admin email address (you):</p> <ul> <li><code>web-push-public-key</code> is the generated VAPID public key, e.g. AA1234BBCCddvveekaabcdfqwertyuiopasdfghjklzxcvbnm1234567890</li> <li><code>web-push-private-key</code> is the generated VAPID private key, e.g. AA2BB1234567890abcdefzxcvbnm1234567890</li> <li><code>web-push-file</code> is a database file to keep track of browser subscription endpoints, e.g. <code>/var/cache/ntfy/webpush.db</code></li> <li><code>web-push-email-address</code> is the admin email address send to the push provider, e.g. <code>sysadmin@example.com</code></li> <li><code>web-push-startup-queries</code> is an optional list of queries to run on startup` </li> </ul> <p>Limitations:</p> <ul> <li> <p>Like foreground browser notifications, background push notifications require the web app to be served over HTTPS. A valid   certificate is required, as service workers will not run on origins with untrusted certificates.</p> </li> <li> <p>Web Push is only supported for the same server. You cannot use subscribe to web push on a topic on another server. This   is due to a limitation of the Push API, which doesn't allow multiple push servers for the same origin.</p> </li> </ul> <p>To configure VAPID keys, first generate them:</p> <pre><code>$ ntfy webpush keys\nWeb Push keys generated.\n...\n</code></pre> <p>Then copy the generated values into your <code>server.yml</code> or use the corresponding environment variables or command line arguments:</p> <pre><code>web-push-public-key: AA1234BBCCddvveekaabcdfqwertyuiopasdfghjklzxcvbnm1234567890\nweb-push-private-key: AA2BB1234567890abcdefzxcvbnm1234567890\nweb-push-file: /var/cache/ntfy/webpush.db\nweb-push-email-address: sysadmin@example.com\n</code></pre> <p>The <code>web-push-file</code> is used to store the push subscriptions. Unused subscriptions will send out a warning after 7 days, and will automatically expire after 9 days (not configurable). If the gateway returns an error (e.g. 410 Gone when a user has unsubscribed), subscriptions are also removed automatically.</p> <p>The web app refreshes subscriptions on start and regularly on an interval, but this file should be persisted across restarts. If the subscription file is deleted or lost, any web apps that aren't open will not receive new web push notifications until you open then.</p> <p>Changing your public/private keypair is not recommended. Browsers only allow one server identity (public key) per origin, and if you change them the clients will not be able to subscribe via web push until the user manually clears the notification permission.</p>"},{"location":"config/#tiers","title":"Tiers","text":"<p>ntfy supports associating users to pre-defined tiers. Tiers can be used to grant users higher limits, such as  daily message limits, attachment size, or make it possible for users to reserve topics. If payments are enabled, tiers can be paid or unpaid, and users can upgrade/downgrade between them. If payments are disabled, then the only way to switch between tiers is with the <code>ntfy user change-tier</code> command (see users and roles).</p> <p>By default, newly created users have no tier, and all usage limits are read from the <code>server.yml</code> config file. Once a user is associated with a tier, some limits are overridden based on the tier.</p> <p>The <code>ntfy tier</code> command can be used to manage all available tiers. By default, there are no pre-defined tiers.</p> <p>Example commands (type <code>ntfy token --help</code> or <code>ntfy token COMMAND --help</code> for more details): <pre><code>ntfy tier add pro                     # Add tier with code \"pro\", using the defaults\nntfy tier change --name=\"Pro\" pro     # Update the name of an existing tier\nntfy tier del starter                 # Delete an existing tier\nntfy user change-tier phil pro        # Switch user \"phil\" to tier \"pro\"\n</code></pre></p> <p>Creating a tier (full example): <pre><code>ntfy tier add \\\n  --name=\"Pro\" \\\n  --message-limit=10000 \\\n  --message-expiry-duration=24h \\\n  --email-limit=50 \\\n  --call-limit=10 \\\n  --reservation-limit=10 \\\n  --attachment-file-size-limit=100M \\\n  --attachment-total-size-limit=1G \\\n  --attachment-expiry-duration=12h \\\n  --attachment-bandwidth-limit=5G \\\n  --stripe-price-id=price_123456 \\\n  pro\n</code></pre></p>"},{"location":"config/#payments","title":"Payments","text":"<p>ntfy supports paid tiers via Stripe as a payment provider. If payments are enabled, users can register, login and switch plans in the web app. The web app will behave slightly differently if payments  are enabled (e.g. showing an upgrade banner, or \"ntfy Pro\" tags).</p> <p>Info</p> <p>The ntfy payments integration is very tailored to ntfy.sh and Stripe. I do not intend to support arbitrary use cases.</p> <p>To enable payments, sign up with Stripe, set the <code>stripe-secret-key</code> and <code>stripe-webhook-key</code> config options: </p> <ul> <li><code>stripe-secret-key</code> is the key used for the Stripe API communication. Setting this values    enables payments in the ntfy web app (e.g. Upgrade dialog). See API keys.</li> <li><code>stripe-webhook-key</code> is the key required to validate the authenticity of incoming webhooks from Stripe.    Webhooks are essential to keep the local database in sync with the payment provider. See Webhooks.</li> <li><code>billing-contact</code> is an email address or website displayed in the \"Upgrade tier\" dialog to let people reach    out with billing questions. If unset, nothing will be displayed.</li> </ul> <p>In addition to setting these two options, you also need to define a Stripe webhook for the <code>customer.subscription.updated</code> and <code>customer.subscription.deleted</code> event, which points  to <code>https://ntfy.example.com/v1/account/billing/webhook</code>.</p> <p>Here's an example:</p> <pre><code>stripe-secret-key: \"sk_test_ZmhzZGtmbGhkc2tqZmhzYcO2a2hmbGtnaHNkbGtnaGRsc2hnbG\"\nstripe-webhook-key: \"whsec_ZnNkZnNIRExBSFNES0hBRFNmaHNka2ZsaGR\"\nbilling-contact: \"phil@example.com\"\n</code></pre>"},{"location":"config/#phone-calls","title":"Phone calls","text":"<p>ntfy supports phone calls via Twilio as a call provider. If phone calls are enabled, users can verify and add a phone number, and then receive phone calls when publishing a message using the <code>X-Call</code> header. See publishing page for more details.</p> <p>To enable Twilio integration, sign up with Twilio, purchase a phone number (Toll free numbers are the easiest), and then configure the following options:</p> <ul> <li><code>twilio-account</code> is the Twilio account SID, e.g. AC12345beefbeef67890beefbeef122586</li> <li><code>twilio-auth-token</code> is the Twilio auth token, e.g. affebeef258625862586258625862586</li> <li><code>twilio-phone-number</code> is the outgoing phone number you purchased, e.g. +18775132586 </li> <li><code>twilio-verify-service</code> is the Twilio Verify service SID, e.g. VA12345beefbeef67890beefbeef122586</li> </ul> <p>After you have configured phone calls, create a tier with a call limit (e.g. <code>ntfy tier create --call-limit=10 ...</code>), and then assign it to a user. Users may then use the <code>X-Call</code> header to receive a phone call when publishing a message.</p>"},{"location":"config/#message-limits","title":"Message limits","text":"<p>There are a few message limits that you can configure:</p> <ul> <li><code>message-size-limit</code> defines the max size of a message body. Please note message sizes &gt;4K are not recommended,    and largely untested. The Android/iOS and other clients may not work, or work properly. If FCM and/or APNS is used,    the limit should stay 4K, because their limits are around that size. If you increase this size limit regardless,     FCM and APNS will NOT work for large messages.</li> <li><code>message-delay-limit</code> defines the max delay of a message when using the \"Delay\" header and scheduled delivery.</li> </ul>"},{"location":"config/#rate-limiting","title":"Rate limiting","text":"<p>Info</p> <p>Be aware that if you are running ntfy behind a proxy, you must set the <code>behind-proxy</code> flag.  Otherwise, all visitors are rate limited as if they are one.</p> <p>By default, ntfy runs without authentication, so it is vitally important that we protect the server from abuse or overload. There are various limits and rate limits in place that you can use to configure the server:</p> <ul> <li>Global limit: A global limit applies across all visitors (IPs, clients, users)</li> <li>Visitor limit: A visitor limit only applies to a certain visitor. A visitor is identified by its IP address    (or the <code>X-Forwarded-For</code> header if <code>behind-proxy</code> is set). All config options that start with the word <code>visitor</code> apply    only on a per-visitor basis.</li> </ul> <p>During normal usage, you shouldn't encounter these limits at all, and even if you burst a few requests or emails (e.g. when you reconnect after a connection drop), it shouldn't have any effect.</p>"},{"location":"config/#general-limits","title":"General limits","text":"<p>Let's do the easy limits first:</p> <ul> <li><code>global-topic-limit</code> defines the total number of topics before the server rejects new topics. It defaults to 15,000.</li> <li><code>visitor-subscription-limit</code> is the number of subscriptions (open connections) per visitor. This value defaults to 30.</li> </ul>"},{"location":"config/#request-limits","title":"Request limits","text":"<p>In addition to the limits above, there is a requests/second limit per visitor for all sensitive GET/PUT/POST requests. This limit uses a token bucket (using Go's rate package):</p> <p>Each visitor has a bucket of 60 requests they can fire against the server (defined by <code>visitor-request-limit-burst</code>).  After the 60, new requests will encounter a <code>429 Too Many Requests</code> response. The visitor request bucket is refilled at a rate of one request every 5s (defined by <code>visitor-request-limit-replenish</code>)</p> <ul> <li><code>visitor-request-limit-burst</code> is the initial bucket of requests each visitor has. This defaults to 60.</li> <li><code>visitor-request-limit-replenish</code> is the rate at which the bucket is refilled (one request per x). Defaults to 5s.</li> <li><code>visitor-request-limit-exempt-hosts</code> is a comma-separated list of hostnames and IPs to be exempt from request rate    limiting; hostnames are resolved at the time the server is started. Defaults to an empty list.</li> </ul>"},{"location":"config/#message-limits_1","title":"Message limits","text":"<p>By default, the number of messages a visitor can send is governed entirely by the request limit.  For instance, if the request limit allows for 15,000 requests per day, and all of those requests are POST/PUT requests to publish messages, then that is the daily message limit.</p> <p>To limit the number of daily messages per visitor, you can set <code>visitor-message-daily-limit</code>. This defines the number  of messages a visitor can send in a day. This counter is reset every day at midnight (UTC).</p>"},{"location":"config/#attachment-limits","title":"Attachment limits","text":"<p>Aside from the global file size and total attachment cache limits (see above), there are two relevant  per-visitor limits:</p> <ul> <li><code>visitor-attachment-total-size-limit</code> is the total storage limit used for attachments per visitor. It defaults to 100M.   The per-visitor storage is automatically decreased as attachments expire. External attachments (attached via <code>X-Attach</code>,    see publishing docs) do not count here. </li> <li><code>visitor-attachment-daily-bandwidth-limit</code> is the total daily attachment download/upload bandwidth limit per visitor,    including PUT and GET requests. This is to protect your precious bandwidth from abuse, since egress costs money in   most cloud providers. This defaults to 500M.</li> </ul>"},{"location":"config/#e-mail-limits","title":"E-mail limits","text":"<p>Similarly to the request limit, there is also an e-mail limit (only relevant if e-mail notifications  are enabled):</p> <ul> <li><code>visitor-email-limit-burst</code> is the initial bucket of emails each visitor has. This defaults to 16.</li> <li><code>visitor-email-limit-replenish</code> is the rate at which the bucket is refilled (one email per x). Defaults to 1h.</li> </ul>"},{"location":"config/#firebase-limits","title":"Firebase limits","text":"<p>If Firebase is configured, all messages are also published to a Firebase topic (unless <code>Firebase: no</code>  is set). Firebase enforces its own limits on how many messages can be published. Unfortunately these limits are a little vague and can change depending on the time  of day. In practice, I have only ever observed <code>429 Quota exceeded</code> responses from Firebase if too many messages are published to  the same topic. </p> <p>In ntfy, if Firebase responds with a 429 after publishing to a topic, the visitor (= IP address) who published the message is banned from publishing to Firebase for 10 minutes (not configurable). Because publishing to Firebase happens asynchronously, there is no indication of the user that this has happened. Non-Firebase subscribers (WebSocket or HTTP stream) are not affected. After the 10 minutes are up, messages forwarding to Firebase is resumed for this visitor.</p> <p>If this ever happens, there will be a log message that looks something like this: <pre><code>WARN Firebase quota exceeded (likely for topic), temporarily denying Firebase access to visitor\n</code></pre></p>"},{"location":"config/#subscriber-based-rate-limiting","title":"Subscriber-based rate limiting","text":"<p>By default, ntfy puts almost all rate limits on the message publisher, e.g. number of messages, requests, and attachment size are all based on the visitor who publishes a message. Subscriber-based rate limiting is a way to use the rate limits of a topic's subscriber, instead of the limits of the publisher.</p> <p>If subscriber-based rate limiting is enabled, messages published on UnifiedPush topics (topics starting with <code>up</code>, e.g. <code>up123456789012</code>)  will be counted towards the \"rate visitor\" of the topic. A \"rate visitor\" is the first subscriber to the topic. </p> <p>Once enabled, a client subscribing to UnifiedPush topics via HTTP stream, or websockets, will be automatically registered as a \"rate visitor\", i.e. the visitor whose rate limits will be used when publishing on this topic. Note that setting the rate visitor requires read-write permission on the topic.</p> <p>If this setting is enabled, publishing to UnifiedPush topics will lead to an <code>HTTP 507 Insufficient Storage</code> response if no \"rate visitor\" has been previously registered. This is to avoid burning the publisher's  <code>visitor-message-daily-limit</code>.</p> <p>To enable subscriber-based rate limiting, set <code>visitor-subscriber-rate-limiting: true</code>.</p> <p>Info</p> <p>Due to a denial-of-service issue, support for the <code>Rate-Topics</code> header was removed entirely. This is unfortunate, but subscriber-based rate limiting will still work for <code>up*</code> topics.</p>"},{"location":"config/#tuning-for-scale","title":"Tuning for scale","text":"<p>If you're running ntfy for your home server, you probably don't need to worry about scale at all. In its default config, if it's not behind a proxy, the ntfy server can keep about as many connections as the open file limit allows. This limit is typically called <code>nofile</code>. Other than that, RAM and CPU are obviously relevant. You may also want to check out this discussion on Reddit.</p> <p>Depending on how you run it, here are a few limits that are relevant:</p>"},{"location":"config/#message-cache_1","title":"Message cache","text":"<p>By default, the message cache (defined by <code>cache-file</code>) uses the SQLite default settings, which means it syncs to disk on every write. For personal servers, this is perfectly adequate. For larger installations, such as ntfy.sh, the write-ahead log (WAL) should be enabled, and the sync mode should be adjusted.  See this article for details.</p> <p>In addition to that, for very high load servers (such as ntfy.sh), it may be beneficial to write messages to the cache in batches, and asynchronously. This can be enabled with the <code>cache-batch-size</code> and <code>cache-batch-timeout</code>. If you start seeing <code>database locked</code> messages in the logs, you should probably enable that.</p> <p>Here's how ntfy.sh has been tuned in the <code>server.yml</code> file:</p> <pre><code>cache-batch-size: 25\ncache-batch-timeout: \"1s\"\ncache-startup-queries: |\n    pragma journal_mode = WAL;\n    pragma synchronous = normal;\n    pragma temp_store = memory;\n    pragma busy_timeout = 15000;\n    vacuum;\n</code></pre>"},{"location":"config/#for-systemd-services","title":"For systemd services","text":"<p>If you're running ntfy in a systemd service (e.g. for .deb/.rpm packages), the main limiting factor is the <code>LimitNOFILE</code> setting in the systemd unit. The default open files limit for <code>ntfy.service</code> is 10,000. You can override it by creating a <code>/etc/systemd/system/ntfy.service.d/override.conf</code> file. As far as I can tell, <code>/etc/security/limits.conf</code> is not relevant.</p> /etc/systemd/system/ntfy.service.d/override.conf <pre><code># Allow 20,000 ntfy connections (and give room for other file handles)\n[Service]\nLimitNOFILE=20500\n</code></pre>"},{"location":"config/#outside-of-systemd","title":"Outside of systemd","text":"<p>If you're running outside systemd, you may want to adjust your <code>/etc/security/limits.conf</code> file to increase the <code>nofile</code> setting. Here's an example that increases the limit to 5,000. You can find out the current setting by running <code>ulimit -n</code>, or manually override it temporarily by running <code>ulimit -n 50000</code>.</p> /etc/security/limits.conf <pre><code># Increase open files limit globally\n* hard nofile 20500\n</code></pre>"},{"location":"config/#proxy-limits-nginx-apache2","title":"Proxy limits (nginx, Apache2)","text":"<p>If you are running behind a proxy (e.g. nginx, Apache), the open files limit of the proxy is also relevant. So if your proxy runs inside of systemd, increase the limits in systemd for the proxy. Typically, the proxy open files limit has to be double the number of how many connections you'd like to support, because the proxy has to maintain the client connection and the connection to ntfy.</p> /etc/nginx/nginx.conf/etc/systemd/system/nginx.service.d/override.conf <pre><code>events {\n  # Allow 40,000 proxy connections (2x of the desired ntfy connection count;\n  # and give room for other file handles)\n  worker_connections 40500;\n}\n</code></pre> <pre><code># Allow 40,000 proxy connections (2x of the desired ntfy connection count;\n# and give room for other file handles)\n[Service]\nLimitNOFILE=40500\n</code></pre>"},{"location":"config/#banning-bad-actors-fail2ban","title":"Banning bad actors (fail2ban)","text":"<p>If you put stuff on the Internet, bad actors will try to break them or break in. fail2ban and nginx's ngx_http_limit_req_module module can be used to ban client IPs if they misbehave. This is on top of the rate limiting inside the ntfy server.</p> <p>Here's an example for how ntfy.sh is configured, following the instructions from two tutorials (here  and here):</p> /etc/nginx/nginx.conf/etc/nginx/sites-enabled/ntfy.sh/etc/fail2ban/filter.d/nginx-req-limit.conf/etc/fail2ban/jail.local <pre><code># Rate limit all IP addresses\nhttp {\n  limit_req_zone $binary_remote_addr zone=one:10m rate=45r/m;\n}\n\n# Alternatively, whitelist certain IP addresses\nhttp {\n  geo $limited {\n    default 1;\n    116.203.112.46/32 0;\n    132.226.42.65/32 0;\n    ...\n  }\n  map $limited $limitkey {\n    1 $binary_remote_addr;\n    0 \"\";\n  }\n  limit_req_zone $limitkey zone=one:10m rate=45r/m;\n}\n</code></pre> <pre><code># For each server/location block\nserver {\n  location / {\n    limit_req zone=one burst=1000 nodelay;\n  }\n}    \n</code></pre> <pre><code>[Definition]\nfailregex = limiting requests, excess:.* by zone.*client: &lt;HOST&gt;\nignoreregex =\n</code></pre> <pre><code>[nginx-req-limit]\nenabled = true\nfilter = nginx-req-limit\naction = iptables-multiport[name=ReqLimit, port=\"http,https\", protocol=tcp]\nlogpath = /var/log/nginx/error.log\nfindtime = 600\nbantime = 14400\nmaxretry = 10\n</code></pre> <p>Note that if you run nginx in a container, append <code>, chain=DOCKER-USER</code> to the jail.local action. By default, the jail action chain is <code>INPUT</code>, but <code>FORWARD</code> is used when using docker networks. <code>DOCKER-USER</code>, available when using docker, is part of the <code>FORWARD</code> chain.</p>"},{"location":"config/#health-checks","title":"Health checks","text":"<p>A preliminary health check API endpoint is exposed at <code>/v1/health</code>. The endpoint returns a <code>json</code> response in the format shown below. If a non-200 HTTP status code is returned or if the returned <code>healthy</code> field is <code>false</code> the ntfy service should be considered as unhealthy.</p> <pre><code>{\"healthy\":true}\n</code></pre> <p>See Installation for Docker for an example of how this could be used in a <code>docker-compose</code> environment.</p>"},{"location":"config/#monitoring","title":"Monitoring","text":"<p>If configured, ntfy can expose a <code>/metrics</code> endpoint for Prometheus, which can then be used to create dashboards and alerts (e.g. via Grafana).</p> <p>To configure the metrics endpoint, either set <code>enable-metrics</code> and/or set the <code>listen-metrics-http</code> option to a dedicated listen address. Metrics may be considered sensitive information, so before you enable them, be sure you know what you are doing, and/or secure access to the endpoint in your reverse proxy.</p> <ul> <li><code>enable-metrics</code> enables the /metrics endpoint for the default ntfy server (i.e. HTTP, HTTPS and/or Unix socket)</li> <li><code>metrics-listen-http</code> exposes the metrics endpoint via a dedicated <code>[IP]:port</code>. If set, this option implicitly   enables metrics as well, e.g. \"10.0.1.1:9090\" or \":9090\"</li> </ul> server.yml (Using default port)server.yml (Using dedicated IP/port) <pre><code>enable-metrics: true\n</code></pre> <pre><code>metrics-listen-http: \"10.0.1.1:9090\"\n</code></pre> <p>In Prometheus, an example scrape config would look like this:</p> prometheus.yml <pre><code>scrape_configs:\n  - job_name: \"ntfy\"\n    static_configs:\n      - targets: [\"10.0.1.1:9090\"]\n</code></pre> <p>Here's an example Grafana dashboard built from the metrics (see Grafana JSON on GitHub):</p> <p> </p> ntfy Grafana dashboard"},{"location":"config/#profiling","title":"Profiling","text":"<p>ntfy can expose Go's net/http/pprof endpoints to support profiling of the ntfy server.  If enabled, ntfy will listen on a dedicated listen IP/port, which can be accessed via the web browser on <code>http://&lt;ip&gt;:&lt;port&gt;/debug/pprof/</code>. This can be helpful to expose bottlenecks, and visualize call flows. To enable, simply set the <code>profile-listen-http</code> config option.</p>"},{"location":"config/#logging-debugging","title":"Logging &amp; debugging","text":"<p>By default, ntfy logs to the console (stderr), with an <code>info</code> log level, and in a human-readable text format.</p> <p>ntfy supports five different log levels, can also write to a file, log as JSON, and even supports granular log level overrides for easier debugging. Some options (<code>log-level</code> and <code>log-level-overrides</code>) can be hot reloaded by calling <code>kill -HUP $pid</code> or <code>systemctl reload ntfy</code>.</p> <p>The following config options define the logging behavior:</p> <ul> <li><code>log-format</code> defines the output format, can be <code>text</code> (default) or <code>json</code></li> <li><code>log-file</code> is a filename to write logs to. If this is not set, ntfy logs to stderr.</li> <li><code>log-level</code> defines the default log level, can be one of <code>trace</code>, <code>debug</code>, <code>info</code> (default), <code>warn</code> or <code>error</code>.   Be aware that <code>debug</code> (and particularly <code>trace</code>) can be very verbose. Only turn them on briefly for debugging purposes.</li> <li><code>log-level-overrides</code> lets you override the log level if certain fields match. This is incredibly powerful   for debugging certain parts of the system (e.g. only the account management, or only a certain visitor).   This is an array of strings in the format:<ul> <li><code>field=value -&gt; level</code> to match a value exactly, e.g. <code>tag=manager -&gt; trace</code></li> <li><code>field -&gt; level</code> to match any value, e.g. <code>time_taken_ms -&gt; debug</code></li> </ul> </li> </ul> <p>Logging config (good for production use): <pre><code>log-level: info\nlog-format: json\nlog-file: /var/log/ntfy.log\n</code></pre></p> <p>Temporary debugging:  If something's not working right, you can debug/trace through what the ntfy server is doing by setting the <code>log-level</code> to <code>debug</code> or <code>trace</code>. The <code>debug</code> setting will output information about each published message, but not the message contents. The <code>trace</code> setting will also print the message contents.</p> <p>Alternatively, you can set <code>log-level-overrides</code> for only certain fields, such as a visitor's IP address (<code>visitor_ip</code>),  a username (<code>user_name</code>), or a tag (<code>tag</code>). There are dozens of fields you can use to override log levels. To learn what  they are, either turn the log-level to <code>trace</code> and observe, or reference the source code.</p> <p>Here's an example that will output only <code>info</code> log events, except when they match either of the defined overrides: <pre><code>log-level: info\nlog-level-overrides:\n  - \"tag=manager -&gt; trace\"\n  - \"visitor_ip=1.2.3.4 -&gt; debug\"\n  - \"time_taken_ms -&gt; debug\"\n</code></pre></p> <p>Warning</p> <p>The <code>debug</code> and <code>trace</code> log levels are very verbose, and using <code>log-level-overrides</code> has a  performance penalty. Only use it for temporary debugging.</p> <p>You can also hot-reload the <code>log-level</code> and <code>log-level-overrides</code> by sending the <code>SIGHUP</code> signal to the process after  editing the <code>server.yml</code> file. You can do so by calling <code>systemctl reload ntfy</code> (if ntfy is running inside systemd),  or by calling <code>kill -HUP $(pidof ntfy)</code>. If successful, you'll see something like this:</p> <pre><code>$ ntfy serve\n2022/06/02 10:29:28 INFO Listening on :2586[http] :1025[smtp], log level is INFO\n2022/06/02 10:29:34 INFO Partially hot reloading configuration ...\n2022/06/02 10:29:34 INFO Log level is TRACE\n</code></pre>"},{"location":"config/#config-options","title":"Config options","text":"<p>Each config option can be set in the config file <code>/etc/ntfy/server.yml</code> (e.g. <code>listen-http: :80</code>) or as a CLI option (e.g. <code>--listen-http :80</code>. Here's a list of all available options. Alternatively, you can set an environment variable before running the <code>ntfy</code> command (e.g. <code>export NTFY_LISTEN_HTTP=:80</code>).</p> <p>Info</p> <p>All config options can also be defined in the <code>server.yml</code> file using underscores instead of dashes, e.g.  <code>cache_duration</code> and <code>cache-duration</code> are both supported. This is to support stricter YAML parsers that do  not support dashes.</p> Config option Env variable Format Default Description <code>base-url</code> <code>NTFY_BASE_URL</code> URL - Public facing base URL of the service (e.g. <code>https://ntfy.sh</code>) <code>listen-http</code> <code>NTFY_LISTEN_HTTP</code> <code>[host]:port</code> <code>:80</code> Listen address for the HTTP web server <code>listen-https</code> <code>NTFY_LISTEN_HTTPS</code> <code>[host]:port</code> - Listen address for the HTTPS web server. If set, you also need to set <code>key-file</code> and <code>cert-file</code>. <code>listen-unix</code> <code>NTFY_LISTEN_UNIX</code> filename - Path to a Unix socket to listen on <code>listen-unix-mode</code> <code>NTFY_LISTEN_UNIX_MODE</code> file mode system default File mode of the Unix socket, e.g. 0700 or 0777 <code>key-file</code> <code>NTFY_KEY_FILE</code> filename - HTTPS/TLS private key file, only used if <code>listen-https</code> is set. <code>cert-file</code> <code>NTFY_CERT_FILE</code> filename - HTTPS/TLS certificate file, only used if <code>listen-https</code> is set. <code>firebase-key-file</code> <code>NTFY_FIREBASE_KEY_FILE</code> filename - If set, also publish messages to a Firebase Cloud Messaging (FCM) topic for your app. This is optional and only required to save battery when using the Android app. See Firebase (FCM. <code>cache-file</code> <code>NTFY_CACHE_FILE</code> filename - If set, messages are cached in a local SQLite database instead of only in-memory. This allows for service restarts without losing messages in support of the since= parameter. See message cache. <code>cache-duration</code> <code>NTFY_CACHE_DURATION</code> duration 12h Duration for which messages will be buffered before they are deleted. This is required to support the <code>since=...</code> and <code>poll=1</code> parameter. Set this to <code>0</code> to disable the cache entirely. <code>cache-startup-queries</code> <code>NTFY_CACHE_STARTUP_QUERIES</code> string (SQL queries) - SQL queries to run during database startup; this is useful for tuning and enabling WAL mode <code>cache-batch-size</code> <code>NTFY_CACHE_BATCH_SIZE</code> int 0 Max size of messages to batch together when writing to message cache (if zero, writes are synchronous) <code>cache-batch-timeout</code> <code>NTFY_CACHE_BATCH_TIMEOUT</code> duration 0s Timeout for batched async writes to the message cache (if zero, writes are synchronous) <code>auth-file</code> <code>NTFY_AUTH_FILE</code> filename - Auth database file used for access control. If set, enables authentication and access control. See access control. <code>auth-default-access</code> <code>NTFY_AUTH_DEFAULT_ACCESS</code> <code>read-write</code>, <code>read-only</code>, <code>write-only</code>, <code>deny-all</code> <code>read-write</code> Default permissions if no matching entries in the auth database are found. Default is <code>read-write</code>. <code>behind-proxy</code> <code>NTFY_BEHIND_PROXY</code> bool false If set, the X-Forwarded-For header is used to determine the visitor IP address instead of the remote address of the connection. <code>attachment-cache-dir</code> <code>NTFY_ATTACHMENT_CACHE_DIR</code> directory - Cache directory for attached files. To enable attachments, this has to be set. <code>attachment-total-size-limit</code> <code>NTFY_ATTACHMENT_TOTAL_SIZE_LIMIT</code> size 5G Limit of the on-disk attachment cache directory. If the limits is exceeded, new attachments will be rejected. <code>attachment-file-size-limit</code> <code>NTFY_ATTACHMENT_FILE_SIZE_LIMIT</code> size 15M Per-file attachment size limit (e.g. 300k, 2M, 100M). Larger attachment will be rejected. <code>attachment-expiry-duration</code> <code>NTFY_ATTACHMENT_EXPIRY_DURATION</code> duration 3h Duration after which uploaded attachments will be deleted (e.g. 3h, 20h). Strongly affects <code>visitor-attachment-total-size-limit</code>. <code>smtp-sender-addr</code> <code>NTFY_SMTP_SENDER_ADDR</code> <code>host:port</code> - SMTP server address to allow email sending <code>smtp-sender-user</code> <code>NTFY_SMTP_SENDER_USER</code> string - SMTP user; only used if e-mail sending is enabled <code>smtp-sender-pass</code> <code>NTFY_SMTP_SENDER_PASS</code> string - SMTP password; only used if e-mail sending is enabled <code>smtp-sender-from</code> <code>NTFY_SMTP_SENDER_FROM</code> e-mail address - SMTP sender e-mail address; only used if e-mail sending is enabled <code>smtp-server-listen</code> <code>NTFY_SMTP_SERVER_LISTEN</code> <code>[ip]:port</code> - Defines the IP address and port the SMTP server will listen on, e.g. <code>:25</code> or <code>1.2.3.4:25</code> <code>smtp-server-domain</code> <code>NTFY_SMTP_SERVER_DOMAIN</code> domain name - SMTP server e-mail domain, e.g. <code>ntfy.sh</code> <code>smtp-server-addr-prefix</code> <code>NTFY_SMTP_SERVER_ADDR_PREFIX</code> string - Optional prefix for the e-mail addresses to prevent spam, e.g. <code>ntfy-</code> <code>twilio-account</code> <code>NTFY_TWILIO_ACCOUNT</code> string - Twilio account SID, e.g. AC12345beefbeef67890beefbeef122586 <code>twilio-auth-token</code> <code>NTFY_TWILIO_AUTH_TOKEN</code> string - Twilio auth token, e.g. affebeef258625862586258625862586 <code>twilio-phone-number</code> <code>NTFY_TWILIO_PHONE_NUMBER</code> string - Twilio outgoing phone number, e.g. +18775132586 <code>twilio-verify-service</code> <code>NTFY_TWILIO_VERIFY_SERVICE</code> string - Twilio Verify service SID, e.g. VA12345beefbeef67890beefbeef122586 <code>keepalive-interval</code> <code>NTFY_KEEPALIVE_INTERVAL</code> duration 45s Interval in which keepalive messages are sent to the client. This is to prevent intermediaries closing the connection for inactivity. Note that the Android app has a hardcoded timeout at 77s, so it should be less than that. <code>manager-interval</code> <code>NTFY_MANAGER_INTERVAL</code> duration 1m Interval in which the manager prunes old messages, deletes topics and prints the stats. <code>message-size-limit</code> <code>NTFY_MESSAGE_SIZE_LIMIT</code> size 4K The size limit for the message body. Please note that this is largely untested, and that FCM/APNS have limits around 4KB. If you increase this size limit, FCM and APNS will NOT work for large messages. <code>message-delay-limit</code> <code>NTFY_MESSAGE_DELAY_LIMIT</code> duration 3d Amount of time a message can be scheduled into the future when using the <code>Delay</code> header <code>global-topic-limit</code> <code>NTFY_GLOBAL_TOPIC_LIMIT</code> number 15,000 Rate limiting: Total number of topics before the server rejects new topics. <code>upstream-base-url</code> <code>NTFY_UPSTREAM_BASE_URL</code> URL <code>https://ntfy.sh</code> Forward poll request to an upstream server, this is needed for iOS push notifications for self-hosted servers <code>upstream-access-token</code> <code>NTFY_UPSTREAM_ACCESS_TOKEN</code> string <code>tk_zyYLYj...</code> Access token to use for the upstream server; needed only if upstream rate limits are exceeded or upstream server requires auth <code>visitor-attachment-total-size-limit</code> <code>NTFY_VISITOR_ATTACHMENT_TOTAL_SIZE_LIMIT</code> size 100M Rate limiting: Total storage limit used for attachments per visitor, for all attachments combined. Storage is freed after attachments expire. See <code>attachment-expiry-duration</code>. <code>visitor-attachment-daily-bandwidth-limit</code> <code>NTFY_VISITOR_ATTACHMENT_DAILY_BANDWIDTH_LIMIT</code> size 500M Rate limiting: Total daily attachment download/upload traffic limit per visitor. This is to protect your bandwidth costs from exploding. <code>visitor-email-limit-burst</code> <code>NTFY_VISITOR_EMAIL_LIMIT_BURST</code> number 16 Rate limiting:Initial limit of e-mails per visitor <code>visitor-email-limit-replenish</code> <code>NTFY_VISITOR_EMAIL_LIMIT_REPLENISH</code> duration 1h Rate limiting: Strongly related to <code>visitor-email-limit-burst</code>: The rate at which the bucket is refilled <code>visitor-message-daily-limit</code> <code>NTFY_VISITOR_MESSAGE_DAILY_LIMIT</code> number - Rate limiting: Allowed number of messages per day per visitor, reset every day at midnight (UTC). By default, this value is unset. <code>visitor-request-limit-burst</code> <code>NTFY_VISITOR_REQUEST_LIMIT_BURST</code> number 60 Rate limiting: Allowed GET/PUT/POST requests per second, per visitor. This setting is the initial bucket of requests each visitor has <code>visitor-request-limit-replenish</code> <code>NTFY_VISITOR_REQUEST_LIMIT_REPLENISH</code> duration 5s Rate limiting: Strongly related to <code>visitor-request-limit-burst</code>: The rate at which the bucket is refilled <code>visitor-request-limit-exempt-hosts</code> <code>NTFY_VISITOR_REQUEST_LIMIT_EXEMPT_HOSTS</code> comma-separated host/IP list - Rate limiting: List of hostnames and IPs to be exempt from request rate limiting <code>visitor-subscription-limit</code> <code>NTFY_VISITOR_SUBSCRIPTION_LIMIT</code> number 30 Rate limiting: Number of subscriptions per visitor (IP address) <code>visitor-subscriber-rate-limiting</code> <code>NTFY_VISITOR_SUBSCRIBER_RATE_LIMITING</code> bool <code>false</code> Rate limiting: Enables subscriber-based rate limiting <code>web-root</code> <code>NTFY_WEB_ROOT</code> path, e.g. <code>/</code> or <code>/app</code>, or <code>disable</code> <code>/</code> Sets root of the web app (e.g. /, or /app), or disables it entirely (disable) <code>enable-signup</code> <code>NTFY_ENABLE_SIGNUP</code> boolean (<code>true</code> or <code>false</code>) <code>false</code> Allows users to sign up via the web app, or API <code>enable-login</code> <code>NTFY_ENABLE_LOGIN</code> boolean (<code>true</code> or <code>false</code>) <code>false</code> Allows users to log in via the web app, or API <code>enable-reservations</code> <code>NTFY_ENABLE_RESERVATIONS</code> boolean (<code>true</code> or <code>false</code>) <code>false</code> Allows users to reserve topics (if their tier allows it) <code>stripe-secret-key</code> <code>NTFY_STRIPE_SECRET_KEY</code> string - Payments: Key used for the Stripe API communication, this enables payments <code>stripe-webhook-key</code> <code>NTFY_STRIPE_WEBHOOK_KEY</code> string - Payments: Key required to validate the authenticity of incoming webhooks from Stripe <code>billing-contact</code> <code>NTFY_BILLING_CONTACT</code> email address or website - Payments: Email or website displayed in Upgrade dialog as a billing contact <code>web-push-public-key</code> <code>NTFY_WEB_PUSH_PUBLIC_KEY</code> string - Web Push: Public Key. Run <code>ntfy webpush keys</code> to generate <code>web-push-private-key</code> <code>NTFY_WEB_PUSH_PRIVATE_KEY</code> string - Web Push: Private Key. Run <code>ntfy webpush keys</code> to generate <code>web-push-file</code> <code>NTFY_WEB_PUSH_FILE</code> string - Web Push: Database file that stores subscriptions <code>web-push-email-address</code> <code>NTFY_WEB_PUSH_EMAIL_ADDRESS</code> string - Web Push: Sender email address <code>web-push-startup-queries</code> <code>NTFY_WEB_PUSH_STARTUP_QUERIES</code> string - Web Push: SQL queries to run against subscription database at startup <code>log-format</code> <code>NTFY_LOG_FORMAT</code> string <code>text</code> Defines the output format, can be text or json <code>log-file</code> <code>NTFY_LOG_FILE</code> string - Defines the filename to write logs to. If this is not set, ntfy logs to stderr <code>log-level</code> <code>NTFY_LOG_LEVEL</code> string <code>info</code> Defines the default log level, can be one of trace, debug, info, warn or error <p>The format for a duration is: <code>&lt;number&gt;(smhd)</code>, e.g. 30s, 20m, 1h or 3d.  The format for a size is: <code>&lt;number&gt;(GMK)</code>, e.g. 1G, 200M or 4000k.</p>"},{"location":"config/#command-line-options","title":"Command line options","text":"<pre><code>NAME:\n   ntfy serve - Run the ntfy server\n\nUSAGE:\n   ntfy serve [OPTIONS..]\n\nCATEGORY:\n   Server commands\n\nDESCRIPTION:\n   Run the ntfy server and listen for incoming requests\n\n   The command will load the configuration from /etc/ntfy/server.yml. Config options can \n   be overridden using the command line options.\n\n   Examples:\n     ntfy serve                      # Starts server in the foreground (on port 80)\n     ntfy serve --listen-http :8080  # Starts server with alternate port\n\nOPTIONS:\n   --debug, -d                                                                                                            enable debug logging (default: false) [$NTFY_DEBUG]\n   --trace                                                                                                                enable tracing (very verbose, be careful) (default: false) [$NTFY_TRACE]\n   --no-log-dates, --no_log_dates                                                                                         disable the date/time prefix (default: false) [$NTFY_NO_LOG_DATES]\n   --log-level value, --log_level value                                                                                   set log level (default: \"INFO\") [$NTFY_LOG_LEVEL]\n   --log-level-overrides value, --log_level_overrides value [ --log-level-overrides value, --log_level_overrides value ]  set log level overrides [$NTFY_LOG_LEVEL_OVERRIDES]\n   --log-format value, --log_format value                                                                                 set log format (default: \"text\") [$NTFY_LOG_FORMAT]\n   --log-file value, --log_file value                                                                                     set log file, default is STDOUT [$NTFY_LOG_FILE]\n   --config value, -c value                                                                                               config file (default: \"/etc/ntfy/server.yml\") [$NTFY_CONFIG_FILE]\n   --base-url value, --base_url value, -B value                                                                           externally visible base URL for this host (e.g. https://ntfy.sh) [$NTFY_BASE_URL]\n   --listen-http value, --listen_http value, -l value                                                                     ip:port used as HTTP listen address (default: \":80\") [$NTFY_LISTEN_HTTP]\n   --listen-https value, --listen_https value, -L value                                                                   ip:port used as HTTPS listen address [$NTFY_LISTEN_HTTPS]\n   --listen-unix value, --listen_unix value, -U value                                                                     listen on unix socket path [$NTFY_LISTEN_UNIX]\n   --listen-unix-mode value, --listen_unix_mode value                                                                     file permissions of unix socket, e.g. 0700 (default: system default) [$NTFY_LISTEN_UNIX_MODE]\n   --key-file value, --key_file value, -K value                                                                           private key file, if listen-https is set [$NTFY_KEY_FILE]\n   --cert-file value, --cert_file value, -E value                                                                         certificate file, if listen-https is set [$NTFY_CERT_FILE]\n   --firebase-key-file value, --firebase_key_file value, -F value                                                         Firebase credentials file; if set additionally publish to FCM topic [$NTFY_FIREBASE_KEY_FILE]\n   --cache-file value, --cache_file value, -C value                                                                       cache file used for message caching [$NTFY_CACHE_FILE]\n   --cache-duration since, --cache_duration since, -b since                                                               buffer messages for this time to allow since requests (default: \"12h\") [$NTFY_CACHE_DURATION]\n   --cache-batch-size value, --cache_batch_size value                                                                     max size of messages to batch together when writing to message cache (if zero, writes are synchronous) (default: 0) [$NTFY_BATCH_SIZE]\n   --cache-batch-timeout value, --cache_batch_timeout value                                                               timeout for batched async writes to the message cache (if zero, writes are synchronous) (default: \"0s\") [$NTFY_CACHE_BATCH_TIMEOUT]\n   --cache-startup-queries value, --cache_startup_queries value                                                           queries run when the cache database is initialized [$NTFY_CACHE_STARTUP_QUERIES]\n   --auth-file value, --auth_file value, -H value                                                                         auth database file used for access control [$NTFY_AUTH_FILE]\n   --auth-startup-queries value, --auth_startup_queries value                                                             queries run when the auth database is initialized [$NTFY_AUTH_STARTUP_QUERIES]\n   --auth-default-access value, --auth_default_access value, -p value                                                     default permissions if no matching entries in the auth database are found (default: \"read-write\") [$NTFY_AUTH_DEFAULT_ACCESS]\n   --attachment-cache-dir value, --attachment_cache_dir value                                                             cache directory for attached files [$NTFY_ATTACHMENT_CACHE_DIR]\n   --attachment-total-size-limit value, --attachment_total_size_limit value, -A value                                     limit of the on-disk attachment cache (default: \"5G\") [$NTFY_ATTACHMENT_TOTAL_SIZE_LIMIT]\n   --attachment-file-size-limit value, --attachment_file_size_limit value, -Y value                                       per-file attachment size limit (e.g. 300k, 2M, 100M) (default: \"15M\") [$NTFY_ATTACHMENT_FILE_SIZE_LIMIT]\n   --attachment-expiry-duration value, --attachment_expiry_duration value, -X value                                       duration after which uploaded attachments will be deleted (e.g. 3h, 20h) (default: \"3h\") [$NTFY_ATTACHMENT_EXPIRY_DURATION]\n   --keepalive-interval value, --keepalive_interval value, -k value                                                       interval of keepalive messages (default: \"45s\") [$NTFY_KEEPALIVE_INTERVAL]\n   --manager-interval value, --manager_interval value, -m value                                                           interval of for message pruning and stats printing (default: \"1m\") [$NTFY_MANAGER_INTERVAL]\n   --disallowed-topics value, --disallowed_topics value [ --disallowed-topics value, --disallowed_topics value ]          topics that are not allowed to be used [$NTFY_DISALLOWED_TOPICS]\n   --web-root value, --web_root value                                                                                     sets root of the web app (e.g. /, or /app), or disables it (disable) (default: \"/\") [$NTFY_WEB_ROOT]\n   --enable-signup, --enable_signup                                                                                       allows users to sign up via the web app, or API (default: false) [$NTFY_ENABLE_SIGNUP]\n   --enable-login, --enable_login                                                                                         allows users to log in via the web app, or API (default: false) [$NTFY_ENABLE_LOGIN]\n   --enable-reservations, --enable_reservations                                                                           allows users to reserve topics (if their tier allows it) (default: false) [$NTFY_ENABLE_RESERVATIONS]\n   --upstream-base-url value, --upstream_base_url value                                                                   forward poll request to an upstream server, this is needed for iOS push notifications for self-hosted servers [$NTFY_UPSTREAM_BASE_URL]\n   --upstream-access-token value, --upstream_access_token value                                                           access token to use for the upstream server; needed only if upstream rate limits are exceeded or upstream server requires auth [$NTFY_UPSTREAM_ACCESS_TOKEN]\n   --smtp-sender-addr value, --smtp_sender_addr value                                                                     SMTP server address (host:port) for outgoing emails [$NTFY_SMTP_SENDER_ADDR]\n   --smtp-sender-user value, --smtp_sender_user value                                                                     SMTP user (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_USER]\n   --smtp-sender-pass value, --smtp_sender_pass value                                                                     SMTP password (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_PASS]\n   --smtp-sender-from value, --smtp_sender_from value                                                                     SMTP sender address (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_FROM]\n   --smtp-server-listen value, --smtp_server_listen value                                                                 SMTP server address (ip:port) for incoming emails, e.g. :25 [$NTFY_SMTP_SERVER_LISTEN]\n   --smtp-server-domain value, --smtp_server_domain value                                                                 SMTP domain for incoming e-mail, e.g. ntfy.sh [$NTFY_SMTP_SERVER_DOMAIN]\n   --smtp-server-addr-prefix value, --smtp_server_addr_prefix value                                                       SMTP email address prefix for topics to prevent spam (e.g. 'ntfy-') [$NTFY_SMTP_SERVER_ADDR_PREFIX]\n   --twilio-account value, --twilio_account value                                                                         Twilio account SID, used for phone calls, e.g. AC123... [$NTFY_TWILIO_ACCOUNT]\n   --twilio-auth-token value, --twilio_auth_token value                                                                   Twilio auth token [$NTFY_TWILIO_AUTH_TOKEN]\n   --twilio-phone-number value, --twilio_phone_number value                                                               Twilio number to use for outgoing calls [$NTFY_TWILIO_PHONE_NUMBER]\n   --twilio-verify-service value, --twilio_verify_service value                                                           Twilio Verify service ID, used for phone number verification [$NTFY_TWILIO_VERIFY_SERVICE]\n   --message-size-limit value, --message_size_limit value                                                                 size limit for the message (see docs for limitations) (default: \"4K\") [$NTFY_MESSAGE_SIZE_LIMIT]\n   --message-delay-limit value, --message_delay_limit value                                                               max duration a message can be scheduled into the future (default: \"3d\") [$NTFY_MESSAGE_DELAY_LIMIT]\n   --global-topic-limit value, --global_topic_limit value, -T value                                                       total number of topics allowed (default: 15000) [$NTFY_GLOBAL_TOPIC_LIMIT]\n   --visitor-subscription-limit value, --visitor_subscription_limit value                                                 number of subscriptions per visitor (default: 30) [$NTFY_VISITOR_SUBSCRIPTION_LIMIT]\n   --visitor-attachment-total-size-limit value, --visitor_attachment_total_size_limit value                               total storage limit used for attachments per visitor (default: \"100M\") [$NTFY_VISITOR_ATTACHMENT_TOTAL_SIZE_LIMIT]\n   --visitor-attachment-daily-bandwidth-limit value, --visitor_attachment_daily_bandwidth_limit value                     total daily attachment download/upload bandwidth limit per visitor (default: \"500M\") [$NTFY_VISITOR_ATTACHMENT_DAILY_BANDWIDTH_LIMIT]\n   --visitor-request-limit-burst value, --visitor_request_limit_burst value                                               initial limit of requests per visitor (default: 60) [$NTFY_VISITOR_REQUEST_LIMIT_BURST]\n   --visitor-request-limit-replenish value, --visitor_request_limit_replenish value                                       interval at which burst limit is replenished (one per x) (default: \"5s\") [$NTFY_VISITOR_REQUEST_LIMIT_REPLENISH]\n   --visitor-request-limit-exempt-hosts value, --visitor_request_limit_exempt_hosts value                                 hostnames and/or IP addresses of hosts that will be exempt from the visitor request limit [$NTFY_VISITOR_REQUEST_LIMIT_EXEMPT_HOSTS]\n   --visitor-message-daily-limit value, --visitor_message_daily_limit value                                               max messages per visitor per day, derived from request limit if unset (default: 0) [$NTFY_VISITOR_MESSAGE_DAILY_LIMIT]\n   --visitor-email-limit-burst value, --visitor_email_limit_burst value                                                   initial limit of e-mails per visitor (default: 16) [$NTFY_VISITOR_EMAIL_LIMIT_BURST]\n   --visitor-email-limit-replenish value, --visitor_email_limit_replenish value                                           interval at which burst limit is replenished (one per x) (default: \"1h\") [$NTFY_VISITOR_EMAIL_LIMIT_REPLENISH]\n   --visitor-subscriber-rate-limiting, --visitor_subscriber_rate_limiting                                                 enables subscriber-based rate limiting (default: false) [$NTFY_VISITOR_SUBSCRIBER_RATE_LIMITING]\n   --behind-proxy, --behind_proxy, -P                                                                                     if set, use X-Forwarded-For header to determine visitor IP address (for rate limiting) (default: false) [$NTFY_BEHIND_PROXY]\n   --stripe-secret-key value, --stripe_secret_key value                                                                   key used for the Stripe API communication, this enables payments [$NTFY_STRIPE_SECRET_KEY]\n   --stripe-webhook-key value, --stripe_webhook_key value                                                                 key required to validate the authenticity of incoming webhooks from Stripe [$NTFY_STRIPE_WEBHOOK_KEY]\n   --billing-contact value, --billing_contact value                                                                       e-mail or website to display in upgrade dialog (only if payments are enabled) [$NTFY_BILLING_CONTACT]\n   --enable-metrics, --enable_metrics                                                                                     if set, Prometheus metrics are exposed via the /metrics endpoint (default: false) [$NTFY_ENABLE_METRICS]\n   --metrics-listen-http value, --metrics_listen_http value                                                               ip:port used to expose the metrics endpoint (implicitly enables metrics) [$NTFY_METRICS_LISTEN_HTTP]\n   --profile-listen-http value, --profile_listen_http value                                                               ip:port used to expose the profiling endpoints (implicitly enables profiling) [$NTFY_PROFILE_LISTEN_HTTP]\n   --web-push-public-key value, --web_push_public_key value                                                               public key used for web push notifications [$NTFY_WEB_PUSH_PUBLIC_KEY]\n   --web-push-private-key value, --web_push_private_key value                                                             private key used for web push notifications [$NTFY_WEB_PUSH_PRIVATE_KEY]\n   --web-push-file value, --web_push_file value                                                                           file used to store web push subscriptions [$NTFY_WEB_PUSH_FILE]\n   --web-push-email-address value, --web_push_email_address value                                                         e-mail address of sender, required to use browser push services [$NTFY_WEB_PUSH_EMAIL_ADDRESS]\n   --web-push-startup-queries value, --web_push_startup_queries value                                                     queries run when the web push database is initialized [$NTFY_WEB_PUSH_STARTUP_QUERIES]\n   --help, -h                                                                                                             show help\n</code></pre>"},{"location":"deprecations/","title":"Deprecations and breaking changes","text":"<p>This page is used to list deprecation notices for ntfy. Deprecated commands and options will be  removed after 1-3 months from the time they were deprecated. How long the feature is deprecated before the behavior is changed depends on the severity of the change, and how prominent the feature is.</p>"},{"location":"deprecations/#active-deprecations","title":"Active deprecations","text":"<p>No active deprecations</p>"},{"location":"deprecations/#previous-deprecations","title":"Previous deprecations","text":""},{"location":"deprecations/#ntfy-cli-ntfy-publish-env-topic-will-be-removed","title":"ntfy CLI: <code>ntfy publish --env-topic</code> will be removed","text":"<p>Active since 2022-06-20, behavior changed with v1.30.1</p> <p>The <code>ntfy publish --env-topic</code> option will be removed. It'll still be possible to specify a topic via the <code>NTFY_TOPIC</code> environment variable, but it won't be necessary anymore to specify the <code>--env-topic</code> flag.</p> BeforeAfter <pre><code>$ NTFY_TOPIC=mytopic ntfy publish --env-topic \"this is the message\"\n</code></pre> <pre><code>$ NTFY_TOPIC=mytopic ntfy publish \"this is the message\"\n</code></pre>"},{"location":"deprecations/#android-app-websockets-will-become-the-default-connection-protocol","title":"Android app: WebSockets will become the default connection protocol","text":"<p>Active since 2022-03-13, behavior will not change (deprecation removed 2022-06-20)</p> <p>Instant delivery connections and connections to self-hosted servers in the Android app were going to switch to use the WebSockets protocol by default. It was decided to keep JSON stream as the most compatible default and add a notice banner in the Android app instead.</p>"},{"location":"deprecations/#android-app-using-sincetimestamp-instead-of-sinceid","title":"Android app: Using <code>since=&lt;timestamp&gt;</code> instead of <code>since=&lt;id&gt;</code>","text":"<p>Active since 2022-02-27, behavior changed with v1.14.0</p> <p>The Android app started using <code>since=&lt;id&gt;</code> instead of <code>since=&lt;timestamp&gt;</code>, which means as of Android app v1.14.0,  it will not work with servers older than v1.16.0 anymore. This is to simplify handling of deduplication in the Android app.</p> <p>The <code>since=&lt;timestamp&gt;</code> endpoint will continue to work. This is merely a notice that the Android app behavior will change.</p>"},{"location":"deprecations/#running-server-via-ntfy-instead-of-ntfy-serve","title":"Running server via <code>ntfy</code> (instead of <code>ntfy serve</code>)","text":"<p>Deprecated 2021-12-17, behavior changed with v1.10.0</p> <p>As more commands are added to the <code>ntfy</code> CLI tool, using just <code>ntfy</code> to run the server is not practical anymore. Please use <code>ntfy serve</code> instead. This also applies to Docker images, as they can also execute more than just the server.</p> BeforeAfter <pre><code>$ ntfy\n2021/12/17 08:16:01 Listening on :80/http\n</code></pre> <pre><code>$ ntfy serve\n2021/12/17 08:16:01 Listening on :80/http\n</code></pre>"},{"location":"develop/","title":"Development","text":"<p>Hurray \ud83e\udd73 \ud83c\udf89, you are interested in writing code for ntfy! That's awesome. \ud83d\ude0e</p> <p>I tried my very best to write up detailed instructions, but if at any point in time you run into issues, don't  hesitate to contact me on Discord or Matrix.</p>"},{"location":"develop/#ntfy-server","title":"ntfy server","text":"<p>The ntfy server source code is available on GitHub. The codebase for the server consists of three components:</p> <ul> <li>The main server/client is written in Go (so you'll need Go). Its main entrypoint is at    main.go, and the meat you're likely interested in is    in server.go. Notably, the server uses a    SQLite library called go-sqlite3, which requires    Cgo and <code>CGO_ENABLED=1</code> to be set. Otherwise things will not work (see below).</li> <li>The documentation is generated by MkDocs and Material for MkDocs,   which is written in Python. You'll need Python and MkDocs (via <code>pip</code>) only if you want to   build the docs.</li> <li>The web app is written in React, using MUI. It uses Vite   to build the production build. If you want to modify the web app, you need nodejs (for <code>npm</code>)    and install all the 100,000 dependencies (sigh).</li> </ul> <p>All of these components are built and then baked into one binary. </p>"},{"location":"develop/#navigating-the-code","title":"Navigating the code","text":"<p>Code:</p> <ul> <li>main.go - Main entrypoint into the CLI, for both server and client</li> <li>cmd/ - CLI commands, such as <code>serve</code> or <code>publish</code></li> <li>server/ - The meat of the server logic</li> <li>docs/ - The MkDocs documentation, also see <code>mkdocs.yml</code></li> <li>web/ - The React application, also see <code>web/package.json</code></li> </ul> <p>Build related:</p> <ul> <li>Makefile - Main entrypoint for all things related to building</li> <li>.goreleaser.yml - Describes all build outputs (for GoReleaser)</li> <li>go.mod - Go modules dependency file</li> <li>mkdocs.yml - Config file for the docs (for MkDocs)</li> <li>web/package.json - Build and dependency file for web app (for npm)</li> </ul> <p>The <code>web/</code> and <code>docs/</code> folder are the sources for web app and documentation. During the build process, the generated output is copied to <code>server/site</code> (web app and landing page) and <code>server/docs</code> (documentation).</p>"},{"location":"develop/#buildtest-on-gitpod","title":"Build/test on Gitpod","text":"<p>To get a quick working development environment you can use Gitpod, an in-browser IDE  that makes it easy to develop ntfy without having to set up a desktop IDE. For any real development, I do suggest a proper IDE like IntelliJ IDEA.</p> <p></p>"},{"location":"develop/#build-requirements","title":"Build requirements","text":"<ul> <li>Go (required for main server)</li> <li>gcc (required main server, for SQLite cgo-based bindings)</li> <li>Make (required for convenience)</li> <li>libsqlite3/libsqlite3-dev (required for main server, for SQLite cgo-based bindings)</li> <li>GoReleaser (required for a proper main server build)</li> <li>Python (for <code>pip</code>, only to build the docs) </li> <li>nodejs (for <code>npm</code>, only to build the web app)</li> </ul>"},{"location":"develop/#install-dependencies","title":"Install dependencies","text":"<p>These steps assume Ubuntu. Steps may vary on different Linux distributions.</p> <p>First, install Go (see official instructions): <pre><code>wget https://go.dev/dl/go1.19.1.linux-amd64.tar.gz\nsudo rm -rf /usr/local/go &amp;&amp; sudo tar -C /usr/local -xzf go1.19.1.linux-amd64.tar.gz\nexport PATH=$PATH:/usr/local/go/bin:$HOME/go/bin\ngo version   # verifies that it worked\n</code></pre></p> <p>Install GoReleaser (see official instructions): <pre><code>go install github.com/goreleaser/goreleaser@latest\ngoreleaser -v   # verifies that it worked\n</code></pre></p> <p>Install nodejs (see official instructions): <pre><code>curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\nnpm -v   # verifies that it worked\n</code></pre></p> <p>Then install a few other things required: <pre><code>sudo apt install \\\n    build-essential \\\n    libsqlite3-dev \\\n    gcc-arm-linux-gnueabi \\\n    gcc-aarch64-linux-gnu \\\n    python3-pip \\\n    git\n</code></pre></p>"},{"location":"develop/#check-out-code","title":"Check out code","text":"<p>Now check out via git from the GitHub repository:</p> via HTTPSvia SSH <pre><code>git clone https://github.com/binwiederhier/ntfy.git\ncd ntfy\n</code></pre> <pre><code>git clone git@github.com:binwiederhier/ntfy.git \ncd ntfy\n</code></pre>"},{"location":"develop/#build-all-the-things","title":"Build all the things","text":"<p>Now you can finally build everything. There are tons of <code>make</code> targets, so maybe just review what's there first  by typing <code>make</code>:</p> <pre><code>$ make \nTypical commands (more see below):\n  make build                   - Build web app, documentation and server/client (sloowwww)\n  make cli-linux-amd64         - Build server/client binary (amd64, no web app or docs)\n  make install-linux-amd64     - Install ntfy binary to /usr/bin/ntfy (amd64)\n  make web                     - Build the web app\n  make docs                    - Build the documentation\n  make check                   - Run all tests, vetting/formatting checks and linters\n...\n</code></pre> <p>If you want to build the ntfy binary including web app and docs for all supported architectures (amd64, armv7, and arm64),  you can simply run <code>make build</code>:</p> <pre><code>$ make build\n...\n# This builds web app, docs, and the ntfy binary (for amd64, armv7 and arm64). \n# This will be SLOW (5+ minutes on my laptop on the first run). Maybe look at the other make targets?\n</code></pre> <p>You'll see all the outputs in the <code>dist/</code> folder afterwards:</p> <pre><code>$ find dist \ndist\ndist/metadata.json\ndist/ntfy_arm64_linux_arm64\ndist/ntfy_arm64_linux_arm64/ntfy\ndist/ntfy_armv7_linux_arm_7\ndist/ntfy_armv7_linux_arm_7/ntfy\ndist/ntfy_amd64_linux_amd64\ndist/ntfy_amd64_linux_amd64/ntfy\ndist/config.yaml\ndist/artifacts.json\n</code></pre> <p>If you also want to build the Debian/RPM packages and the Docker images for all supported architectures, you can  use the <code>make release-snapshot</code> target:</p> <pre><code>$ make release-snapshot\n...\n# This will be REALLY SLOW (sometimes 5+ minutes on my laptop)\n</code></pre> <p>During development, you may want to be more picky and build only certain things. Here are a few examples.</p>"},{"location":"develop/#build-a-docker-image-only-for-linux","title":"Build a Docker image only for Linux","text":"<p>This is useful to test the final build with web app, docs, and server without any dependencies locally</p> <pre><code>$ make docker-dev\n$ docker run --rm -p 80:80 binwiederhier/ntfy:dev serve\n</code></pre>"},{"location":"develop/#build-the-ntfy-binary","title":"Build the ntfy binary","text":"<p>To build only the <code>ntfy</code> binary without the web app or documentation, use the <code>make cli-...</code> targets:</p> <pre><code>$ make\nBuild server &amp; client (using GoReleaser, not release version):\n  make cli                        - Build server &amp; client (all architectures)\n  make cli-linux-amd64            - Build server &amp; client (Linux, amd64 only)\n  make cli-linux-armv6            - Build server &amp; client (Linux, armv6 only)\n  make cli-linux-armv7            - Build server &amp; client (Linux, armv7 only)\n  make cli-linux-arm64            - Build server &amp; client (Linux, arm64 only)\n  make cli-windows-amd64          - Build client (Windows, amd64 only)\n  make cli-darwin-all             - Build client (macOS, arm64+amd64 universal binary)\n</code></pre> <p>So if you're on an amd64/x86_64-based machine, you may just want to run <code>make cli-linux-amd64</code> during testing. On a modern system, this shouldn't take longer than 5-10 seconds. I often combine it with <code>install-linux-amd64</code> so I can run the binary right away:</p> <pre><code>$ make cli-linux-amd64 install-linux-amd64\n$ ntfy serve\n</code></pre> <p>During development of the main app, you can also just use <code>go run main.go</code>, as long as you run  <code>make cli-deps-static-sites</code>at least once and <code>CGO_ENABLED=1</code>:</p> <pre><code>$ export CGO_ENABLED=1\n$ make cli-deps-static-sites\n$ go run main.go serve\n2022/03/18 08:43:55 Listening on :2586[http]\n...\n</code></pre> <p>If you don't run <code>cli-deps-static-sites</code>, you may see an error <code>pattern ...: no matching files found</code>: <pre><code>$ go run main.go serve\nserver/server.go:85:13: pattern docs: no matching files found\n</code></pre></p> <p>This is because we use <code>go:embed</code> to embed the documentation and web app, so the Go code expects files to be present at <code>server/docs</code> and <code>server/site</code>. If they are not, you'll see the above error. The <code>cli-deps-static-sites</code> target creates dummy files that ensure that you'll be able to build.</p> <p>While not officially supported (or released), you can build and run the server on macOS as well. Simply run  <code>make cli-darwin-server</code> to build a binary, or <code>go run main.go serve</code> (see above) to run it.</p>"},{"location":"develop/#build-the-web-app","title":"Build the web app","text":"<p>The sources for the web app live in <code>web/</code>. As long as you have <code>npm</code> installed (see above), building the web app  is really simple. Just type <code>make web</code> and you're in business:</p> <pre><code>$ make web\n...\n</code></pre> <p>This will build the web app using Create React App and then copy the production build to the <code>server/site</code> folder, so  that when you <code>make cli</code> (or <code>make cli-linux-amd64</code>, ...), you will have the web app included in the <code>ntfy</code> binary.</p> <p>If you're developing on the web app, it's best to just <code>cd web</code> and run <code>npm start</code> manually. This will open your browser at <code>http://127.0.0.1:3000</code> with the web app, and as you edit the source files, they will be recompiled and the browser  will automatically refresh:</p> <pre><code>$ cd web\n$ npm start\n</code></pre>"},{"location":"develop/#testing-web-push-locally","title":"Testing Web Push locally","text":"<p>Reference: https://stackoverflow.com/questions/34160509/options-for-testing-service-workers-via-http</p>"},{"location":"develop/#with-the-dev-servers","title":"With the dev servers","text":"<ol> <li> <p>Get web push keys <code>go run main.go webpush keys</code></p> </li> <li> <p>Run the server with web push enabled</p> <pre><code>go run main.go \\\n  --log-level debug \\\n  serve \\\n    --web-push-public-key KEY \\\n    --web-push-private-key KEY \\\n    --web-push-email-address &lt;email&gt; \\\n    --web-push-file=/tmp/webpush.db\n</code></pre> </li> <li> <p>In <code>web/public/config.js</code>:</p> </li> <li> <p>Set <code>base_url</code> to <code>http://localhost</code>, This is required as web push can only be used with the server matching the <code>base_url</code>.</p> </li> <li> <p>Set the <code>web_push_public_key</code> correctly.</p> </li> <li> <p>Run <code>npm run start</code></p> </li> </ol>"},{"location":"develop/#with-a-built-package","title":"With a built package","text":"<ol> <li> <p>Run <code>make web-build</code></p> </li> <li> <p>Run the server (step 2 above)</p> </li> <li> <p>Open http://localhost/</p> </li> </ol>"},{"location":"develop/#build-the-docs","title":"Build the docs","text":"<p>The sources for the docs live in <code>docs/</code>. Similarly to the web app, you can simply run <code>make docs</code> to build the  documentation. As long as you have <code>mkdocs</code> installed (see above), this should work fine:</p> <pre><code>$ make docs\n...\n</code></pre> <p>If you are changing the documentation, you should be running <code>mkdocs serve</code> directly. This will build the documentation,  serve the files at <code>http://127.0.0.1:8000/</code>, and rebuild every time you save the source files: </p> <pre><code>$ mkdocs serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 5.53 seconds\nINFO     -  [16:28:14] Serving on http://127.0.0.1:8000/\n</code></pre> <p>Then you can navigate to http://127.0.0.1:8000/ and whenever you change a markdown file in your text editor it'll automatically update.</p>"},{"location":"develop/#android-app","title":"Android app","text":"<p>The ntfy Android app source code is available on GitHub. The Android app has two flavors:</p> <ul> <li>Google Play: The <code>play</code> flavor includes Firebase (FCM) and requires a Firebase account</li> <li>F-Droid: The <code>fdroid</code> flavor does not include Firebase or Google dependencies</li> </ul>"},{"location":"develop/#navigating-the-code_1","title":"Navigating the code","text":"<ul> <li>main/ - Main Android app source code</li> <li>play/ - Google Play / Firebase specific code</li> <li>fdroid/ - F-Droid Firebase stubs</li> <li>build.gradle - Main build file</li> </ul>"},{"location":"develop/#ideenvironment","title":"IDE/Environment","text":"<p>You should download Android Studio (or IntelliJ IDEA  with the relevant Android plugins). Everything else will just be a pain for you. Do yourself a favor. \ud83d\ude00 </p>"},{"location":"develop/#check-out-the-code","title":"Check out the code","text":"<p>First check out the repository:</p> via HTTPSvia SSH <pre><code>git clone https://github.com/binwiederhier/ntfy-android.git\ncd ntfy-android\n</code></pre> <pre><code>git clone git@github.com:binwiederhier/ntfy-android.git\ncd ntfy-android\n</code></pre> <p>Then either follow the steps for building with or without Firebase.</p>"},{"location":"develop/#build-f-droid-flavor-no-fcm","title":"Build F-Droid flavor (no FCM)","text":"<p>Info</p> <p>I do build the ntfy Android app using IntelliJ IDEA (Android Studio), so I don't know if these Gradle commands will work without issues. Please give me feedback if it does/doesn't work for you.</p> <p>Without Firebase, you may want to still change the default <code>app_base_url</code> in values.xml if you're self-hosting the server. Then run: <pre><code># Remove Google dependencies (FCM)\nsed -i -e '/google-services/d' build.gradle\nsed -i -e '/google-services/d' app/build.gradle\n\n# To build an unsigned .apk (app/build/outputs/apk/fdroid/*.apk)\n./gradlew assembleFdroidRelease\n\n# To build a bundle .aab (app/fdroid/release/*.aab)\n./gradlew bundleFdroidRelease\n</code></pre></p>"},{"location":"develop/#build-play-flavor-fcm","title":"Build Play flavor (FCM)","text":"<p>Info</p> <p>I do build the ntfy Android app using IntelliJ IDEA (Android Studio), so I don't know if these Gradle commands will work without issues. Please give me feedback if it does/doesn't work for you.</p> <p>To build your own version with Firebase, you must:</p> <ul> <li>Create a Firebase/FCM account</li> <li>Place your account file at <code>app/google-services.json</code></li> <li>And change <code>app_base_url</code> in values.xml</li> <li>Then run: <pre><code># To build an unsigned .apk (app/build/outputs/apk/play/release/*.apk)\n./gradlew assemblePlayRelease\n\n# To build a bundle .aab (app/play/release/*.aab)\n./gradlew bundlePlayRelease\n</code></pre></li> </ul>"},{"location":"develop/#ios-app","title":"iOS app","text":"<p>Building the iOS app is very involved. Please report any inconsistencies or issues with it. The requirements are  strictly based off of my development on this app. There may be other versions of macOS / XCode that work.</p>"},{"location":"develop/#requirements","title":"Requirements","text":"<ol> <li>macOS Monterey or later</li> <li>XCode 13.2+</li> <li>A physical iOS device (for push notifications, Firebase does not work in the XCode simulator)</li> <li>Firebase account</li> <li>Apple Developer license? (I forget if it's possible to do testing without purchasing the license)</li> </ol>"},{"location":"develop/#apple-setup","title":"Apple setup","text":"<p>Info</p> <p>Along with this step, the PLIST Deployment step is also required  for these changes to take effect in the iOS app.</p> <ol> <li>Create a new key in Apple Developer Member Center</li> <li>Select \"Apple Push Notifications service (APNs)\"</li> <li>Download the newly created key (should have a file name similar to <code>AuthKey_ZZZZZZ.p8</code>, where <code>ZZZZZZ</code> is the Key ID)</li> <li>Record your Team ID - it can be seen in the top-right corner of the page, or on your Account &gt; Membership page</li> <li>Next, navigate to \"Project Settings\" in the firebase console for your project, and select the iOS app you created. Then, click \"Cloud Messaging\" in the left sidebar, and scroll down to the \"APNs Authentication Key\" section. Click \"Upload Key\", and upload the key you downloaded from Apple Developer.</li> </ol> <p>Warning</p> <p>If you don't do the above setups for APNS, notifications will not post instantly or sometimes at all. This is because of the missing APNS key, which is required for firebase to send notifications to the iOS app. See below for a snip from the firebase docs.</p> <p>If you don't have an APNs authentication key, you can still send notifications to iOS devices, but they won't be delivered instantly. Instead, they'll be delivered when the device wakes up to check for new notifications or when your application sends a firebase request to check for them. The time to check for new notifications can vary from a few seconds to hours, days or even weeks. Enabling APNs authentication keys ensures that notifications are delivered instantly and is strongly recommended.</p>"},{"location":"develop/#firebase-setup","title":"Firebase setup","text":"<ol> <li>If you haven't already, create a Google / Firebase account</li> <li>Visit the Firebase console</li> <li>Create a new Firebase project:</li> <li>Enter a project name</li> <li>Disable Google Analytics (currently iOS app does not support analytics)</li> <li>On the \"Project settings\" page, add an iOS app</li> <li>Apple bundle ID - \"com.copephobia.ntfy-ios\" (this can be changed to match XCode's ntfy.sh target &gt; \"Bundle Identifier\" value)</li> <li>Register the app</li> <li>Download the config file - GoogleInfo.plist (this will need to be included in the ntfy-ios repository / XCode)</li> <li>Generate a new service account private key for the ntfy server</li> <li>Go to \"Project settings\" &gt; \"Service accounts\"</li> <li>Click \"Generate new private key\" to generate and download a private key to use for sending messages via the ntfy server</li> </ol>"},{"location":"develop/#ntfy-server_1","title":"ntfy server","text":"<p>Note that the ntfy server is not officially supported on macOS. It should, however, be able to run on macOS using these steps:</p> <ol> <li>If not already made, make the <code>/etc/ntfy/</code> directory and move the service account private key to that folder</li> <li>Copy the <code>server/server.yml</code> file from the ntfy repository to <code>/etc/ntfy/</code></li> <li>Modify the <code>/etc/ntfy/server.yml</code> file <code>firebase-key-file</code> value to the path of the private key</li> <li>Install go: <code>brew install go</code></li> <li>In the ntfy repository, run <code>make cli-darwin-server</code>.</li> </ol>"},{"location":"develop/#xcode-setup","title":"XCode setup","text":"<ol> <li>Follow step 4 of Add Firebase to your Apple project to install the     <code>firebase-ios-sdk</code> in XCode, if it's not already present - you can select any packages in addition to Firebase Core / Firebase Messaging</li> <li>Similarly, install the SQLite.swift package dependency in XCode</li> <li>When running the debug build, ensure XCode is pointed to the connected iOS device - registering for push notifications does not work in the iOS simulators</li> </ol>"},{"location":"develop/#plist-config","title":"PLIST config","text":"<p>To have instant notifications/better notification delivery when using firebase, you will need to add the  <code>GoogleService-Info.plist</code> file to your project. Here's how to do that:</p> <ol> <li>In XCode, find the NTFY app target. Not the NSE app target.</li> <li>Find the Asset/ folder in the project navigator</li> <li>Drag the <code>GoogleService-Info.plist</code> file into the Asset/ folder that you get from the firebase console. It can be     found in the \"Project settings\" &gt; \"General\" &gt; \"Your apps\"  with a button labled \"GoogleService-Info.plist\"</li> </ol> <p>After that, you should be all set!</p>"},{"location":"emojis/","title":"Emoji reference","text":"<p>You can tag messages with emojis \ud83e\udd73 \ud83c\udf89 and other relevant strings. Matching tags are automatically converted to emojis. This is a reference of all supported emojis. To learn more about the feature, please refer to the tagging and emojis page.</p> TagEmoji <code>grinning</code>\ud83d\ude00 <code>smiley</code>\ud83d\ude03 <code>smile</code>\ud83d\ude04 <code>grin</code>\ud83d\ude01 <code>laughing</code>\ud83d\ude06 <code>sweat_smile</code>\ud83d\ude05 <code>rofl</code>\ud83e\udd23 <code>joy</code>\ud83d\ude02 <code>slightly_smiling_face</code>\ud83d\ude42 <code>upside_down_face</code>\ud83d\ude43 <code>wink</code>\ud83d\ude09 <code>blush</code>\ud83d\ude0a <code>innocent</code>\ud83d\ude07 <code>smiling_face_with_three_hearts</code>\ud83e\udd70 <code>heart_eyes</code>\ud83d\ude0d <code>star_struck</code>\ud83e\udd29 <code>kissing_heart</code>\ud83d\ude18 <code>kissing</code>\ud83d\ude17 <code>relaxed</code>\u263a\ufe0f <code>kissing_closed_eyes</code>\ud83d\ude1a <code>kissing_smiling_eyes</code>\ud83d\ude19 <code>smiling_face_with_tear</code>\ud83e\udd72 <code>yum</code>\ud83d\ude0b <code>stuck_out_tongue</code>\ud83d\ude1b <code>stuck_out_tongue_winking_eye</code>\ud83d\ude1c <code>zany_face</code>\ud83e\udd2a <code>stuck_out_tongue_closed_eyes</code>\ud83d\ude1d <code>money_mouth_face</code>\ud83e\udd11 <code>hugs</code>\ud83e\udd17 <code>hand_over_mouth</code>\ud83e\udd2d <code>shushing_face</code>\ud83e\udd2b <code>thinking</code>\ud83e\udd14 <code>zipper_mouth_face</code>\ud83e\udd10 <code>raised_eyebrow</code>\ud83e\udd28 <code>neutral_face</code>\ud83d\ude10 <code>expressionless</code>\ud83d\ude11 <code>no_mouth</code>\ud83d\ude36 <code>face_in_clouds</code>\ud83d\ude36\u200d\ud83c\udf2b\ufe0f <code>smirk</code>\ud83d\ude0f <code>unamused</code>\ud83d\ude12 <code>roll_eyes</code>\ud83d\ude44 <code>grimacing</code>\ud83d\ude2c <code>face_exhaling</code>\ud83d\ude2e\u200d\ud83d\udca8 <code>lying_face</code>\ud83e\udd25 <code>relieved</code>\ud83d\ude0c <code>pensive</code>\ud83d\ude14 <code>sleepy</code>\ud83d\ude2a <code>drooling_face</code>\ud83e\udd24 <code>sleeping</code>\ud83d\ude34 <code>mask</code>\ud83d\ude37 <code>face_with_thermometer</code>\ud83e\udd12 <code>face_with_head_bandage</code>\ud83e\udd15 <code>nauseated_face</code>\ud83e\udd22 <code>vomiting_face</code>\ud83e\udd2e <code>sneezing_face</code>\ud83e\udd27 <code>hot_face</code>\ud83e\udd75 <code>cold_face</code>\ud83e\udd76 <code>woozy_face</code>\ud83e\udd74 <code>dizzy_face</code>\ud83d\ude35 <code>face_with_spiral_eyes</code>\ud83d\ude35\u200d\ud83d\udcab <code>exploding_head</code>\ud83e\udd2f <code>cowboy_hat_face</code>\ud83e\udd20 <code>partying_face</code>\ud83e\udd73 <code>disguised_face</code>\ud83e\udd78 <code>sunglasses</code>\ud83d\ude0e <code>nerd_face</code>\ud83e\udd13 <code>monocle_face</code>\ud83e\uddd0 <code>confused</code>\ud83d\ude15 <code>worried</code>\ud83d\ude1f <code>slightly_frowning_face</code>\ud83d\ude41 <code>frowning_face</code>\u2639\ufe0f <code>open_mouth</code>\ud83d\ude2e <code>hushed</code>\ud83d\ude2f <code>astonished</code>\ud83d\ude32 <code>flushed</code>\ud83d\ude33 <code>pleading_face</code>\ud83e\udd7a <code>frowning</code>\ud83d\ude26 <code>anguished</code>\ud83d\ude27 <code>fearful</code>\ud83d\ude28 <code>cold_sweat</code>\ud83d\ude30 <code>disappointed_relieved</code>\ud83d\ude25 <code>cry</code>\ud83d\ude22 <code>sob</code>\ud83d\ude2d <code>scream</code>\ud83d\ude31 <code>confounded</code>\ud83d\ude16 <code>persevere</code>\ud83d\ude23 <code>disappointed</code>\ud83d\ude1e <code>sweat</code>\ud83d\ude13 <code>weary</code>\ud83d\ude29 <code>tired_face</code>\ud83d\ude2b <code>yawning_face</code>\ud83e\udd71 <code>triumph</code>\ud83d\ude24 <code>rage</code>\ud83d\ude21 <code>angry</code>\ud83d\ude20 <code>cursing_face</code>\ud83e\udd2c <code>smiling_imp</code>\ud83d\ude08 <code>imp</code>\ud83d\udc7f <code>skull</code>\ud83d\udc80 <code>skull_and_crossbones</code>\u2620\ufe0f <code>hankey</code>\ud83d\udca9 <code>clown_face</code>\ud83e\udd21 <code>japanese_ogre</code>\ud83d\udc79 <code>japanese_goblin</code>\ud83d\udc7a <code>ghost</code>\ud83d\udc7b <code>alien</code>\ud83d\udc7d <code>space_invader</code>\ud83d\udc7e <code>robot</code>\ud83e\udd16 <code>smiley_cat</code>\ud83d\ude3a <code>smile_cat</code>\ud83d\ude38 <code>joy_cat</code>\ud83d\ude39 <code>heart_eyes_cat</code>\ud83d\ude3b <code>smirk_cat</code>\ud83d\ude3c <code>kissing_cat</code>\ud83d\ude3d <code>scream_cat</code>\ud83d\ude40 <code>crying_cat_face</code>\ud83d\ude3f <code>pouting_cat</code>\ud83d\ude3e <code>see_no_evil</code>\ud83d\ude48 <code>hear_no_evil</code>\ud83d\ude49 <code>speak_no_evil</code>\ud83d\ude4a <code>kiss</code>\ud83d\udc8b <code>love_letter</code>\ud83d\udc8c <code>cupid</code>\ud83d\udc98 <code>gift_heart</code>\ud83d\udc9d <code>sparkling_heart</code>\ud83d\udc96 <code>heartpulse</code>\ud83d\udc97 <code>heartbeat</code>\ud83d\udc93 <code>revolving_hearts</code>\ud83d\udc9e <code>two_hearts</code>\ud83d\udc95 <code>heart_decoration</code>\ud83d\udc9f <code>heavy_heart_exclamation</code>\u2763\ufe0f <code>broken_heart</code>\ud83d\udc94 <code>heart_on_fire</code>\u2764\ufe0f\u200d\ud83d\udd25 <code>mending_heart</code>\u2764\ufe0f\u200d\ud83e\ude79 <code>heart</code>\u2764\ufe0f <code>orange_heart</code>\ud83e\udde1 <code>yellow_heart</code>\ud83d\udc9b <code>green_heart</code>\ud83d\udc9a <code>blue_heart</code>\ud83d\udc99 <code>purple_heart</code>\ud83d\udc9c <code>brown_heart</code>\ud83e\udd0e <code>black_heart</code>\ud83d\udda4 <code>white_heart</code>\ud83e\udd0d <code>100</code>\ud83d\udcaf <code>anger</code>\ud83d\udca2 <code>boom</code>\ud83d\udca5 <code>dizzy</code>\ud83d\udcab <code>sweat_drops</code>\ud83d\udca6 <code>dash</code>\ud83d\udca8 <code>hole</code>\ud83d\udd73\ufe0f <code>bomb</code>\ud83d\udca3 <code>speech_balloon</code>\ud83d\udcac <code>eye_speech_bubble</code>\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f <code>left_speech_bubble</code>\ud83d\udde8\ufe0f <code>right_anger_bubble</code>\ud83d\uddef\ufe0f <code>thought_balloon</code>\ud83d\udcad <code>zzz</code>\ud83d\udca4 <code>wave</code>\ud83d\udc4b <code>raised_back_of_hand</code>\ud83e\udd1a <code>raised_hand_with_fingers_splayed</code>\ud83d\udd90\ufe0f <code>hand</code>\u270b <code>vulcan_salute</code>\ud83d\udd96 <code>ok_hand</code>\ud83d\udc4c <code>pinched_fingers</code>\ud83e\udd0c <code>pinching_hand</code>\ud83e\udd0f <code>v</code>\u270c\ufe0f <code>crossed_fingers</code>\ud83e\udd1e <code>love_you_gesture</code>\ud83e\udd1f <code>metal</code>\ud83e\udd18 <code>call_me_hand</code>\ud83e\udd19 <code>point_left</code>\ud83d\udc48 <code>point_right</code>\ud83d\udc49 <code>point_up_2</code>\ud83d\udc46 <code>middle_finger</code>\ud83d\udd95 <code>point_down</code>\ud83d\udc47 <code>point_up</code>\u261d\ufe0f <code>+1</code>\ud83d\udc4d <code>-1</code>\ud83d\udc4e <code>fist_raised</code>\u270a <code>fist_oncoming</code>\ud83d\udc4a <code>fist_left</code>\ud83e\udd1b <code>fist_right</code>\ud83e\udd1c <code>clap</code>\ud83d\udc4f <code>raised_hands</code>\ud83d\ude4c <code>open_hands</code>\ud83d\udc50 <code>palms_up_together</code>\ud83e\udd32 <code>handshake</code>\ud83e\udd1d <code>pray</code>\ud83d\ude4f <code>writing_hand</code>\u270d\ufe0f <code>nail_care</code>\ud83d\udc85 <code>selfie</code>\ud83e\udd33 <code>muscle</code>\ud83d\udcaa <code>mechanical_arm</code>\ud83e\uddbe <code>mechanical_leg</code>\ud83e\uddbf <code>leg</code>\ud83e\uddb5 <code>foot</code>\ud83e\uddb6 <code>ear</code>\ud83d\udc42 <code>ear_with_hearing_aid</code>\ud83e\uddbb <code>nose</code>\ud83d\udc43 <code>brain</code>\ud83e\udde0 <code>anatomical_heart</code>\ud83e\udec0 <code>lungs</code>\ud83e\udec1 <code>tooth</code>\ud83e\uddb7 <code>bone</code>\ud83e\uddb4 <code>eyes</code>\ud83d\udc40 <code>eye</code>\ud83d\udc41\ufe0f <code>tongue</code>\ud83d\udc45 <code>lips</code>\ud83d\udc44 <code>baby</code>\ud83d\udc76 <code>child</code>\ud83e\uddd2 <code>boy</code>\ud83d\udc66 <code>girl</code>\ud83d\udc67 <code>adult</code>\ud83e\uddd1 <code>blond_haired_person</code>\ud83d\udc71 <code>man</code>\ud83d\udc68 <code>bearded_person</code>\ud83e\uddd4 <code>man_beard</code>\ud83e\uddd4\u200d\u2642\ufe0f <code>woman_beard</code>\ud83e\uddd4\u200d\u2640\ufe0f <code>red_haired_man</code>\ud83d\udc68\u200d\ud83e\uddb0 <code>curly_haired_man</code>\ud83d\udc68\u200d\ud83e\uddb1 <code>white_haired_man</code>\ud83d\udc68\u200d\ud83e\uddb3 <code>bald_man</code>\ud83d\udc68\u200d\ud83e\uddb2 <code>woman</code>\ud83d\udc69 <code>red_haired_woman</code>\ud83d\udc69\u200d\ud83e\uddb0 <code>person_red_hair</code>\ud83e\uddd1\u200d\ud83e\uddb0 <code>curly_haired_woman</code>\ud83d\udc69\u200d\ud83e\uddb1 <code>person_curly_hair</code>\ud83e\uddd1\u200d\ud83e\uddb1 <code>white_haired_woman</code>\ud83d\udc69\u200d\ud83e\uddb3 <code>person_white_hair</code>\ud83e\uddd1\u200d\ud83e\uddb3 <code>bald_woman</code>\ud83d\udc69\u200d\ud83e\uddb2 <code>person_bald</code>\ud83e\uddd1\u200d\ud83e\uddb2 <code>blond_haired_woman</code>\ud83d\udc71\u200d\u2640\ufe0f <code>blond_haired_man</code>\ud83d\udc71\u200d\u2642\ufe0f <code>older_adult</code>\ud83e\uddd3 <code>older_man</code>\ud83d\udc74 <code>older_woman</code>\ud83d\udc75 <code>frowning_person</code>\ud83d\ude4d <code>frowning_man</code>\ud83d\ude4d\u200d\u2642\ufe0f <code>frowning_woman</code>\ud83d\ude4d\u200d\u2640\ufe0f <code>pouting_face</code>\ud83d\ude4e <code>pouting_man</code>\ud83d\ude4e\u200d\u2642\ufe0f <code>pouting_woman</code>\ud83d\ude4e\u200d\u2640\ufe0f <code>no_good</code>\ud83d\ude45 <code>no_good_man</code>\ud83d\ude45\u200d\u2642\ufe0f <code>no_good_woman</code>\ud83d\ude45\u200d\u2640\ufe0f <code>ok_person</code>\ud83d\ude46 <code>ok_man</code>\ud83d\ude46\u200d\u2642\ufe0f <code>ok_woman</code>\ud83d\ude46\u200d\u2640\ufe0f <code>tipping_hand_person</code>\ud83d\udc81 <code>tipping_hand_man</code>\ud83d\udc81\u200d\u2642\ufe0f <code>tipping_hand_woman</code>\ud83d\udc81\u200d\u2640\ufe0f <code>raising_hand</code>\ud83d\ude4b <code>raising_hand_man</code>\ud83d\ude4b\u200d\u2642\ufe0f <code>raising_hand_woman</code>\ud83d\ude4b\u200d\u2640\ufe0f <code>deaf_person</code>\ud83e\uddcf <code>deaf_man</code>\ud83e\uddcf\u200d\u2642\ufe0f <code>deaf_woman</code>\ud83e\uddcf\u200d\u2640\ufe0f <code>bow</code>\ud83d\ude47 <code>bowing_man</code>\ud83d\ude47\u200d\u2642\ufe0f <code>bowing_woman</code>\ud83d\ude47\u200d\u2640\ufe0f <code>facepalm</code>\ud83e\udd26 <code>man_facepalming</code>\ud83e\udd26\u200d\u2642\ufe0f <code>woman_facepalming</code>\ud83e\udd26\u200d\u2640\ufe0f <code>shrug</code>\ud83e\udd37 <code>man_shrugging</code>\ud83e\udd37\u200d\u2642\ufe0f <code>woman_shrugging</code>\ud83e\udd37\u200d\u2640\ufe0f <code>health_worker</code>\ud83e\uddd1\u200d\u2695\ufe0f <code>man_health_worker</code>\ud83d\udc68\u200d\u2695\ufe0f <code>woman_health_worker</code>\ud83d\udc69\u200d\u2695\ufe0f <code>student</code>\ud83e\uddd1\u200d\ud83c\udf93 <code>man_student</code>\ud83d\udc68\u200d\ud83c\udf93 <code>woman_student</code>\ud83d\udc69\u200d\ud83c\udf93 <code>teacher</code>\ud83e\uddd1\u200d\ud83c\udfeb <code>man_teacher</code>\ud83d\udc68\u200d\ud83c\udfeb <code>woman_teacher</code>\ud83d\udc69\u200d\ud83c\udfeb <code>judge</code>\ud83e\uddd1\u200d\u2696\ufe0f <code>man_judge</code>\ud83d\udc68\u200d\u2696\ufe0f <code>woman_judge</code>\ud83d\udc69\u200d\u2696\ufe0f <code>farmer</code>\ud83e\uddd1\u200d\ud83c\udf3e <code>man_farmer</code>\ud83d\udc68\u200d\ud83c\udf3e <code>woman_farmer</code>\ud83d\udc69\u200d\ud83c\udf3e <code>cook</code>\ud83e\uddd1\u200d\ud83c\udf73 <code>man_cook</code>\ud83d\udc68\u200d\ud83c\udf73 <code>woman_cook</code>\ud83d\udc69\u200d\ud83c\udf73 <code>mechanic</code>\ud83e\uddd1\u200d\ud83d\udd27 <code>man_mechanic</code>\ud83d\udc68\u200d\ud83d\udd27 <code>woman_mechanic</code>\ud83d\udc69\u200d\ud83d\udd27 <code>factory_worker</code>\ud83e\uddd1\u200d\ud83c\udfed <code>man_factory_worker</code>\ud83d\udc68\u200d\ud83c\udfed <code>woman_factory_worker</code>\ud83d\udc69\u200d\ud83c\udfed <code>office_worker</code>\ud83e\uddd1\u200d\ud83d\udcbc <code>man_office_worker</code>\ud83d\udc68\u200d\ud83d\udcbc <code>woman_office_worker</code>\ud83d\udc69\u200d\ud83d\udcbc <code>scientist</code>\ud83e\uddd1\u200d\ud83d\udd2c <code>man_scientist</code>\ud83d\udc68\u200d\ud83d\udd2c <code>woman_scientist</code>\ud83d\udc69\u200d\ud83d\udd2c <code>technologist</code>\ud83e\uddd1\u200d\ud83d\udcbb <code>man_technologist</code>\ud83d\udc68\u200d\ud83d\udcbb <code>woman_technologist</code>\ud83d\udc69\u200d\ud83d\udcbb <code>singer</code>\ud83e\uddd1\u200d\ud83c\udfa4 <code>man_singer</code>\ud83d\udc68\u200d\ud83c\udfa4 <code>woman_singer</code>\ud83d\udc69\u200d\ud83c\udfa4 <code>artist</code>\ud83e\uddd1\u200d\ud83c\udfa8 <code>man_artist</code>\ud83d\udc68\u200d\ud83c\udfa8 <code>woman_artist</code>\ud83d\udc69\u200d\ud83c\udfa8 <code>pilot</code>\ud83e\uddd1\u200d\u2708\ufe0f <code>man_pilot</code>\ud83d\udc68\u200d\u2708\ufe0f <code>woman_pilot</code>\ud83d\udc69\u200d\u2708\ufe0f <code>astronaut</code>\ud83e\uddd1\u200d\ud83d\ude80 <code>man_astronaut</code>\ud83d\udc68\u200d\ud83d\ude80 <code>woman_astronaut</code>\ud83d\udc69\u200d\ud83d\ude80 <code>firefighter</code>\ud83e\uddd1\u200d\ud83d\ude92 <code>man_firefighter</code>\ud83d\udc68\u200d\ud83d\ude92 <code>woman_firefighter</code>\ud83d\udc69\u200d\ud83d\ude92 <code>police_officer</code>\ud83d\udc6e <code>policeman</code>\ud83d\udc6e\u200d\u2642\ufe0f <code>policewoman</code>\ud83d\udc6e\u200d\u2640\ufe0f <code>detective</code>\ud83d\udd75\ufe0f <code>male_detective</code>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f <code>female_detective</code>\ud83d\udd75\ufe0f\u200d\u2640\ufe0f <code>guard</code>\ud83d\udc82 <code>guardsman</code>\ud83d\udc82\u200d\u2642\ufe0f <code>guardswoman</code>\ud83d\udc82\u200d\u2640\ufe0f <code>ninja</code>\ud83e\udd77 <code>construction_worker</code>\ud83d\udc77 <code>construction_worker_man</code>\ud83d\udc77\u200d\u2642\ufe0f <code>construction_worker_woman</code>\ud83d\udc77\u200d\u2640\ufe0f <code>prince</code>\ud83e\udd34 <code>princess</code>\ud83d\udc78 <code>person_with_turban</code>\ud83d\udc73 <code>man_with_turban</code>\ud83d\udc73\u200d\u2642\ufe0f <code>woman_with_turban</code>\ud83d\udc73\u200d\u2640\ufe0f <code>man_with_gua_pi_mao</code>\ud83d\udc72 <code>woman_with_headscarf</code>\ud83e\uddd5 <code>person_in_tuxedo</code>\ud83e\udd35 <code>man_in_tuxedo</code>\ud83e\udd35\u200d\u2642\ufe0f <code>woman_in_tuxedo</code>\ud83e\udd35\u200d\u2640\ufe0f <code>person_with_veil</code>\ud83d\udc70 <code>man_with_veil</code>\ud83d\udc70\u200d\u2642\ufe0f <code>woman_with_veil</code>\ud83d\udc70\u200d\u2640\ufe0f <code>pregnant_woman</code>\ud83e\udd30 <code>breast_feeding</code>\ud83e\udd31 <code>woman_feeding_baby</code>\ud83d\udc69\u200d\ud83c\udf7c <code>man_feeding_baby</code>\ud83d\udc68\u200d\ud83c\udf7c <code>person_feeding_baby</code>\ud83e\uddd1\u200d\ud83c\udf7c <code>angel</code>\ud83d\udc7c <code>santa</code>\ud83c\udf85 <code>mrs_claus</code>\ud83e\udd36 <code>mx_claus</code>\ud83e\uddd1\u200d\ud83c\udf84 <code>superhero</code>\ud83e\uddb8 <code>superhero_man</code>\ud83e\uddb8\u200d\u2642\ufe0f <code>superhero_woman</code>\ud83e\uddb8\u200d\u2640\ufe0f <code>supervillain</code>\ud83e\uddb9 <code>supervillain_man</code>\ud83e\uddb9\u200d\u2642\ufe0f <code>supervillain_woman</code>\ud83e\uddb9\u200d\u2640\ufe0f <code>mage</code>\ud83e\uddd9 <code>mage_man</code>\ud83e\uddd9\u200d\u2642\ufe0f <code>mage_woman</code>\ud83e\uddd9\u200d\u2640\ufe0f <code>fairy</code>\ud83e\uddda <code>fairy_man</code>\ud83e\uddda\u200d\u2642\ufe0f <code>fairy_woman</code>\ud83e\uddda\u200d\u2640\ufe0f <code>vampire</code>\ud83e\udddb <code>vampire_man</code>\ud83e\udddb\u200d\u2642\ufe0f <code>vampire_woman</code>\ud83e\udddb\u200d\u2640\ufe0f <code>merperson</code>\ud83e\udddc <code>merman</code>\ud83e\udddc\u200d\u2642\ufe0f <code>mermaid</code>\ud83e\udddc\u200d\u2640\ufe0f <code>elf</code>\ud83e\udddd <code>elf_man</code>\ud83e\udddd\u200d\u2642\ufe0f <code>elf_woman</code>\ud83e\udddd\u200d\u2640\ufe0f <code>genie</code>\ud83e\uddde <code>genie_man</code>\ud83e\uddde\u200d\u2642\ufe0f <code>genie_woman</code>\ud83e\uddde\u200d\u2640\ufe0f <code>zombie</code>\ud83e\udddf <code>zombie_man</code>\ud83e\udddf\u200d\u2642\ufe0f <code>zombie_woman</code>\ud83e\udddf\u200d\u2640\ufe0f <code>massage</code>\ud83d\udc86 <code>massage_man</code>\ud83d\udc86\u200d\u2642\ufe0f <code>massage_woman</code>\ud83d\udc86\u200d\u2640\ufe0f <code>haircut</code>\ud83d\udc87 <code>haircut_man</code>\ud83d\udc87\u200d\u2642\ufe0f <code>haircut_woman</code>\ud83d\udc87\u200d\u2640\ufe0f <code>walking</code>\ud83d\udeb6 <code>walking_man</code>\ud83d\udeb6\u200d\u2642\ufe0f <code>walking_woman</code>\ud83d\udeb6\u200d\u2640\ufe0f <code>standing_person</code>\ud83e\uddcd <code>standing_man</code>\ud83e\uddcd\u200d\u2642\ufe0f <code>standing_woman</code>\ud83e\uddcd\u200d\u2640\ufe0f <code>kneeling_person</code>\ud83e\uddce <code>kneeling_man</code>\ud83e\uddce\u200d\u2642\ufe0f <code>kneeling_woman</code>\ud83e\uddce\u200d\u2640\ufe0f <code>person_with_probing_cane</code>\ud83e\uddd1\u200d\ud83e\uddaf <code>man_with_probing_cane</code>\ud83d\udc68\u200d\ud83e\uddaf <code>woman_with_probing_cane</code>\ud83d\udc69\u200d\ud83e\uddaf <code>person_in_motorized_wheelchair</code>\ud83e\uddd1\u200d\ud83e\uddbc <code>man_in_motorized_wheelchair</code>\ud83d\udc68\u200d\ud83e\uddbc <code>woman_in_motorized_wheelchair</code>\ud83d\udc69\u200d\ud83e\uddbc <code>person_in_manual_wheelchair</code>\ud83e\uddd1\u200d\ud83e\uddbd <code>man_in_manual_wheelchair</code>\ud83d\udc68\u200d\ud83e\uddbd <code>woman_in_manual_wheelchair</code>\ud83d\udc69\u200d\ud83e\uddbd <code>runner</code>\ud83c\udfc3 <code>running_man</code>\ud83c\udfc3\u200d\u2642\ufe0f <code>running_woman</code>\ud83c\udfc3\u200d\u2640\ufe0f <code>woman_dancing</code>\ud83d\udc83 <code>man_dancing</code>\ud83d\udd7a <code>business_suit_levitating</code>\ud83d\udd74\ufe0f <code>dancers</code>\ud83d\udc6f <code>dancing_men</code>\ud83d\udc6f\u200d\u2642\ufe0f <code>dancing_women</code>\ud83d\udc6f\u200d\u2640\ufe0f <code>sauna_person</code>\ud83e\uddd6 <code>sauna_man</code>\ud83e\uddd6\u200d\u2642\ufe0f <code>sauna_woman</code>\ud83e\uddd6\u200d\u2640\ufe0f <code>climbing</code>\ud83e\uddd7 <code>climbing_man</code>\ud83e\uddd7\u200d\u2642\ufe0f <code>climbing_woman</code>\ud83e\uddd7\u200d\u2640\ufe0f <code>person_fencing</code>\ud83e\udd3a <code>horse_racing</code>\ud83c\udfc7 <code>skier</code>\u26f7\ufe0f <code>snowboarder</code>\ud83c\udfc2 <code>golfing</code>\ud83c\udfcc\ufe0f <code>golfing_man</code>\ud83c\udfcc\ufe0f\u200d\u2642\ufe0f <code>golfing_woman</code>\ud83c\udfcc\ufe0f\u200d\u2640\ufe0f <code>surfer</code>\ud83c\udfc4 <code>surfing_man</code>\ud83c\udfc4\u200d\u2642\ufe0f <code>surfing_woman</code>\ud83c\udfc4\u200d\u2640\ufe0f <code>rowboat</code>\ud83d\udea3 <code>rowing_man</code>\ud83d\udea3\u200d\u2642\ufe0f <code>rowing_woman</code>\ud83d\udea3\u200d\u2640\ufe0f <code>swimmer</code>\ud83c\udfca <code>swimming_man</code>\ud83c\udfca\u200d\u2642\ufe0f <code>swimming_woman</code>\ud83c\udfca\u200d\u2640\ufe0f <code>bouncing_ball_person</code>\u26f9\ufe0f <code>bouncing_ball_man</code>\u26f9\ufe0f\u200d\u2642\ufe0f <code>bouncing_ball_woman</code>\u26f9\ufe0f\u200d\u2640\ufe0f <code>weight_lifting</code>\ud83c\udfcb\ufe0f <code>weight_lifting_man</code>\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f <code>weight_lifting_woman</code>\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f <code>bicyclist</code>\ud83d\udeb4 <code>biking_man</code>\ud83d\udeb4\u200d\u2642\ufe0f <code>biking_woman</code>\ud83d\udeb4\u200d\u2640\ufe0f <code>mountain_bicyclist</code>\ud83d\udeb5 <code>mountain_biking_man</code>\ud83d\udeb5\u200d\u2642\ufe0f <code>mountain_biking_woman</code>\ud83d\udeb5\u200d\u2640\ufe0f <code>cartwheeling</code>\ud83e\udd38 <code>man_cartwheeling</code>\ud83e\udd38\u200d\u2642\ufe0f <code>woman_cartwheeling</code>\ud83e\udd38\u200d\u2640\ufe0f <code>wrestling</code>\ud83e\udd3c <code>men_wrestling</code>\ud83e\udd3c\u200d\u2642\ufe0f <code>women_wrestling</code>\ud83e\udd3c\u200d\u2640\ufe0f <code>water_polo</code>\ud83e\udd3d <code>man_playing_water_polo</code>\ud83e\udd3d\u200d\u2642\ufe0f <code>woman_playing_water_polo</code>\ud83e\udd3d\u200d\u2640\ufe0f <code>handball_person</code>\ud83e\udd3e <code>man_playing_handball</code>\ud83e\udd3e\u200d\u2642\ufe0f <code>woman_playing_handball</code>\ud83e\udd3e\u200d\u2640\ufe0f <code>juggling_person</code>\ud83e\udd39 <code>man_juggling</code>\ud83e\udd39\u200d\u2642\ufe0f <code>woman_juggling</code>\ud83e\udd39\u200d\u2640\ufe0f <code>lotus_position</code>\ud83e\uddd8 <code>lotus_position_man</code>\ud83e\uddd8\u200d\u2642\ufe0f <code>lotus_position_woman</code>\ud83e\uddd8\u200d\u2640\ufe0f <code>bath</code>\ud83d\udec0 <code>sleeping_bed</code>\ud83d\udecc <code>people_holding_hands</code>\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 <code>two_women_holding_hands</code>\ud83d\udc6d <code>couple</code>\ud83d\udc6b <code>two_men_holding_hands</code>\ud83d\udc6c <code>couplekiss</code>\ud83d\udc8f <code>couplekiss_man_woman</code>\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 <code>couplekiss_man_man</code>\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 <code>couplekiss_woman_woman</code>\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69 <code>couple_with_heart</code>\ud83d\udc91 <code>couple_with_heart_woman_man</code>\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68 <code>couple_with_heart_man_man</code>\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68 <code>couple_with_heart_woman_woman</code>\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 <code>family</code>\ud83d\udc6a <code>family_man_woman_boy</code>\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 <code>family_man_woman_girl</code>\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 <code>family_man_woman_girl_boy</code>\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 <code>family_man_woman_boy_boy</code>\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 <code>family_man_woman_girl_girl</code>\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 <code>family_man_man_boy</code>\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 <code>family_man_man_girl</code>\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 <code>family_man_man_girl_boy</code>\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 <code>family_man_man_boy_boy</code>\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 <code>family_man_man_girl_girl</code>\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 <code>family_woman_woman_boy</code>\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 <code>family_woman_woman_girl</code>\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 <code>family_woman_woman_girl_boy</code>\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 <code>family_woman_woman_boy_boy</code>\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 <code>family_woman_woman_girl_girl</code>\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 <code>family_man_boy</code>\ud83d\udc68\u200d\ud83d\udc66 <code>family_man_boy_boy</code>\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 <code>family_man_girl</code>\ud83d\udc68\u200d\ud83d\udc67 <code>family_man_girl_boy</code>\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 <code>family_man_girl_girl</code>\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 <code>family_woman_boy</code>\ud83d\udc69\u200d\ud83d\udc66 <code>family_woman_boy_boy</code>\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 <code>family_woman_girl</code>\ud83d\udc69\u200d\ud83d\udc67 <code>family_woman_girl_boy</code>\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 <code>family_woman_girl_girl</code>\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 <code>speaking_head</code>\ud83d\udde3\ufe0f <code>bust_in_silhouette</code>\ud83d\udc64 <code>busts_in_silhouette</code>\ud83d\udc65 <code>people_hugging</code>\ud83e\udec2 <code>footprints</code>\ud83d\udc63 <code>monkey_face</code>\ud83d\udc35 <code>monkey</code>\ud83d\udc12 <code>gorilla</code>\ud83e\udd8d <code>orangutan</code>\ud83e\udda7 <code>dog</code>\ud83d\udc36 <code>dog2</code>\ud83d\udc15 <code>guide_dog</code>\ud83e\uddae <code>service_dog</code>\ud83d\udc15\u200d\ud83e\uddba <code>poodle</code>\ud83d\udc29 <code>wolf</code>\ud83d\udc3a <code>fox_face</code>\ud83e\udd8a <code>raccoon</code>\ud83e\udd9d <code>cat</code>\ud83d\udc31 <code>cat2</code>\ud83d\udc08 <code>black_cat</code>\ud83d\udc08\u200d\u2b1b <code>lion</code>\ud83e\udd81 <code>tiger</code>\ud83d\udc2f <code>tiger2</code>\ud83d\udc05 <code>leopard</code>\ud83d\udc06 <code>horse</code>\ud83d\udc34 <code>racehorse</code>\ud83d\udc0e <code>unicorn</code>\ud83e\udd84 <code>zebra</code>\ud83e\udd93 <code>deer</code>\ud83e\udd8c <code>bison</code>\ud83e\uddac <code>cow</code>\ud83d\udc2e <code>ox</code>\ud83d\udc02 <code>water_buffalo</code>\ud83d\udc03 <code>cow2</code>\ud83d\udc04 <code>pig</code>\ud83d\udc37 <code>pig2</code>\ud83d\udc16 <code>boar</code>\ud83d\udc17 <code>pig_nose</code>\ud83d\udc3d <code>ram</code>\ud83d\udc0f <code>sheep</code>\ud83d\udc11 <code>goat</code>\ud83d\udc10 <code>dromedary_camel</code>\ud83d\udc2a <code>camel</code>\ud83d\udc2b <code>llama</code>\ud83e\udd99 <code>giraffe</code>\ud83e\udd92 <code>elephant</code>\ud83d\udc18 <code>mammoth</code>\ud83e\udda3 <code>rhinoceros</code>\ud83e\udd8f <code>hippopotamus</code>\ud83e\udd9b <code>mouse</code>\ud83d\udc2d <code>mouse2</code>\ud83d\udc01 <code>rat</code>\ud83d\udc00 <code>hamster</code>\ud83d\udc39 <code>rabbit</code>\ud83d\udc30 <code>rabbit2</code>\ud83d\udc07 <code>chipmunk</code>\ud83d\udc3f\ufe0f <code>beaver</code>\ud83e\uddab <code>hedgehog</code>\ud83e\udd94 <code>bat</code>\ud83e\udd87 <code>bear</code>\ud83d\udc3b <code>polar_bear</code>\ud83d\udc3b\u200d\u2744\ufe0f <code>koala</code>\ud83d\udc28 <code>panda_face</code>\ud83d\udc3c <code>sloth</code>\ud83e\udda5 <code>otter</code>\ud83e\udda6 <code>skunk</code>\ud83e\udda8 <code>kangaroo</code>\ud83e\udd98 <code>badger</code>\ud83e\udda1 <code>feet</code>\ud83d\udc3e <code>turkey</code>\ud83e\udd83 <code>chicken</code>\ud83d\udc14 <code>rooster</code>\ud83d\udc13 <code>hatching_chick</code>\ud83d\udc23 <code>baby_chick</code>\ud83d\udc24 <code>hatched_chick</code>\ud83d\udc25 <code>bird</code>\ud83d\udc26 <code>penguin</code>\ud83d\udc27 <code>dove</code>\ud83d\udd4a\ufe0f <code>eagle</code>\ud83e\udd85 <code>duck</code>\ud83e\udd86 <code>swan</code>\ud83e\udda2 <code>owl</code>\ud83e\udd89 <code>dodo</code>\ud83e\udda4 <code>feather</code>\ud83e\udeb6 <code>flamingo</code>\ud83e\udda9 <code>peacock</code>\ud83e\udd9a <code>parrot</code>\ud83e\udd9c <code>frog</code>\ud83d\udc38 <code>crocodile</code>\ud83d\udc0a <code>turtle</code>\ud83d\udc22 <code>lizard</code>\ud83e\udd8e <code>snake</code>\ud83d\udc0d <code>dragon_face</code>\ud83d\udc32 <code>dragon</code>\ud83d\udc09 <code>sauropod</code>\ud83e\udd95 <code>t-rex</code>\ud83e\udd96 <code>whale</code>\ud83d\udc33 <code>whale2</code>\ud83d\udc0b <code>dolphin</code>\ud83d\udc2c <code>seal</code>\ud83e\uddad <code>fish</code>\ud83d\udc1f <code>tropical_fish</code>\ud83d\udc20 <code>blowfish</code>\ud83d\udc21 <code>shark</code>\ud83e\udd88 <code>octopus</code>\ud83d\udc19 TagEmoji <code>octopus</code>\ud83d\udc19 <code>shell</code>\ud83d\udc1a <code>snail</code>\ud83d\udc0c <code>butterfly</code>\ud83e\udd8b <code>bug</code>\ud83d\udc1b <code>ant</code>\ud83d\udc1c <code>bee</code>\ud83d\udc1d <code>beetle</code>\ud83e\udeb2 <code>lady_beetle</code>\ud83d\udc1e <code>cricket</code>\ud83e\udd97 <code>cockroach</code>\ud83e\udeb3 <code>spider</code>\ud83d\udd77\ufe0f <code>spider_web</code>\ud83d\udd78\ufe0f <code>scorpion</code>\ud83e\udd82 <code>mosquito</code>\ud83e\udd9f <code>fly</code>\ud83e\udeb0 <code>worm</code>\ud83e\udeb1 <code>microbe</code>\ud83e\udda0 <code>bouquet</code>\ud83d\udc90 <code>cherry_blossom</code>\ud83c\udf38 <code>white_flower</code>\ud83d\udcae <code>rosette</code>\ud83c\udff5\ufe0f <code>rose</code>\ud83c\udf39 <code>wilted_flower</code>\ud83e\udd40 <code>hibiscus</code>\ud83c\udf3a <code>sunflower</code>\ud83c\udf3b <code>blossom</code>\ud83c\udf3c <code>tulip</code>\ud83c\udf37 <code>seedling</code>\ud83c\udf31 <code>potted_plant</code>\ud83e\udeb4 <code>evergreen_tree</code>\ud83c\udf32 <code>deciduous_tree</code>\ud83c\udf33 <code>palm_tree</code>\ud83c\udf34 <code>cactus</code>\ud83c\udf35 <code>ear_of_rice</code>\ud83c\udf3e <code>herb</code>\ud83c\udf3f <code>shamrock</code>\u2618\ufe0f <code>four_leaf_clover</code>\ud83c\udf40 <code>maple_leaf</code>\ud83c\udf41 <code>fallen_leaf</code>\ud83c\udf42 <code>leaves</code>\ud83c\udf43 <code>grapes</code>\ud83c\udf47 <code>melon</code>\ud83c\udf48 <code>watermelon</code>\ud83c\udf49 <code>tangerine</code>\ud83c\udf4a <code>lemon</code>\ud83c\udf4b <code>banana</code>\ud83c\udf4c <code>pineapple</code>\ud83c\udf4d <code>mango</code>\ud83e\udd6d <code>apple</code>\ud83c\udf4e <code>green_apple</code>\ud83c\udf4f <code>pear</code>\ud83c\udf50 <code>peach</code>\ud83c\udf51 <code>cherries</code>\ud83c\udf52 <code>strawberry</code>\ud83c\udf53 <code>blueberries</code>\ud83e\uded0 <code>kiwi_fruit</code>\ud83e\udd5d <code>tomato</code>\ud83c\udf45 <code>olive</code>\ud83e\uded2 <code>coconut</code>\ud83e\udd65 <code>avocado</code>\ud83e\udd51 <code>eggplant</code>\ud83c\udf46 <code>potato</code>\ud83e\udd54 <code>carrot</code>\ud83e\udd55 <code>corn</code>\ud83c\udf3d <code>hot_pepper</code>\ud83c\udf36\ufe0f <code>bell_pepper</code>\ud83e\uded1 <code>cucumber</code>\ud83e\udd52 <code>leafy_green</code>\ud83e\udd6c <code>broccoli</code>\ud83e\udd66 <code>garlic</code>\ud83e\uddc4 <code>onion</code>\ud83e\uddc5 <code>mushroom</code>\ud83c\udf44 <code>peanuts</code>\ud83e\udd5c <code>chestnut</code>\ud83c\udf30 <code>bread</code>\ud83c\udf5e <code>croissant</code>\ud83e\udd50 <code>baguette_bread</code>\ud83e\udd56 <code>flatbread</code>\ud83e\uded3 <code>pretzel</code>\ud83e\udd68 <code>bagel</code>\ud83e\udd6f <code>pancakes</code>\ud83e\udd5e <code>waffle</code>\ud83e\uddc7 <code>cheese</code>\ud83e\uddc0 <code>meat_on_bone</code>\ud83c\udf56 <code>poultry_leg</code>\ud83c\udf57 <code>cut_of_meat</code>\ud83e\udd69 <code>bacon</code>\ud83e\udd53 <code>hamburger</code>\ud83c\udf54 <code>fries</code>\ud83c\udf5f <code>pizza</code>\ud83c\udf55 <code>hotdog</code>\ud83c\udf2d <code>sandwich</code>\ud83e\udd6a <code>taco</code>\ud83c\udf2e <code>burrito</code>\ud83c\udf2f <code>tamale</code>\ud83e\uded4 <code>stuffed_flatbread</code>\ud83e\udd59 <code>falafel</code>\ud83e\uddc6 <code>egg</code>\ud83e\udd5a <code>fried_egg</code>\ud83c\udf73 <code>shallow_pan_of_food</code>\ud83e\udd58 <code>stew</code>\ud83c\udf72 <code>fondue</code>\ud83e\uded5 <code>bowl_with_spoon</code>\ud83e\udd63 <code>green_salad</code>\ud83e\udd57 <code>popcorn</code>\ud83c\udf7f <code>butter</code>\ud83e\uddc8 <code>salt</code>\ud83e\uddc2 <code>canned_food</code>\ud83e\udd6b <code>bento</code>\ud83c\udf71 <code>rice_cracker</code>\ud83c\udf58 <code>rice_ball</code>\ud83c\udf59 <code>rice</code>\ud83c\udf5a <code>curry</code>\ud83c\udf5b <code>ramen</code>\ud83c\udf5c <code>spaghetti</code>\ud83c\udf5d <code>sweet_potato</code>\ud83c\udf60 <code>oden</code>\ud83c\udf62 <code>sushi</code>\ud83c\udf63 <code>fried_shrimp</code>\ud83c\udf64 <code>fish_cake</code>\ud83c\udf65 <code>moon_cake</code>\ud83e\udd6e <code>dango</code>\ud83c\udf61 <code>dumpling</code>\ud83e\udd5f <code>fortune_cookie</code>\ud83e\udd60 <code>takeout_box</code>\ud83e\udd61 <code>crab</code>\ud83e\udd80 <code>lobster</code>\ud83e\udd9e <code>shrimp</code>\ud83e\udd90 <code>squid</code>\ud83e\udd91 <code>oyster</code>\ud83e\uddaa <code>icecream</code>\ud83c\udf66 <code>shaved_ice</code>\ud83c\udf67 <code>ice_cream</code>\ud83c\udf68 <code>doughnut</code>\ud83c\udf69 <code>cookie</code>\ud83c\udf6a <code>birthday</code>\ud83c\udf82 <code>cake</code>\ud83c\udf70 <code>cupcake</code>\ud83e\uddc1 <code>pie</code>\ud83e\udd67 <code>chocolate_bar</code>\ud83c\udf6b <code>candy</code>\ud83c\udf6c <code>lollipop</code>\ud83c\udf6d <code>custard</code>\ud83c\udf6e <code>honey_pot</code>\ud83c\udf6f <code>baby_bottle</code>\ud83c\udf7c <code>milk_glass</code>\ud83e\udd5b <code>coffee</code>\u2615 <code>teapot</code>\ud83e\uded6 <code>tea</code>\ud83c\udf75 <code>sake</code>\ud83c\udf76 <code>champagne</code>\ud83c\udf7e <code>wine_glass</code>\ud83c\udf77 <code>cocktail</code>\ud83c\udf78 <code>tropical_drink</code>\ud83c\udf79 <code>beer</code>\ud83c\udf7a <code>beers</code>\ud83c\udf7b <code>clinking_glasses</code>\ud83e\udd42 <code>tumbler_glass</code>\ud83e\udd43 <code>cup_with_straw</code>\ud83e\udd64 <code>bubble_tea</code>\ud83e\uddcb <code>beverage_box</code>\ud83e\uddc3 <code>mate</code>\ud83e\uddc9 <code>ice_cube</code>\ud83e\uddca <code>chopsticks</code>\ud83e\udd62 <code>plate_with_cutlery</code>\ud83c\udf7d\ufe0f <code>fork_and_knife</code>\ud83c\udf74 <code>spoon</code>\ud83e\udd44 <code>hocho</code>\ud83d\udd2a <code>amphora</code>\ud83c\udffa <code>earth_africa</code>\ud83c\udf0d <code>earth_americas</code>\ud83c\udf0e <code>earth_asia</code>\ud83c\udf0f <code>globe_with_meridians</code>\ud83c\udf10 <code>world_map</code>\ud83d\uddfa\ufe0f <code>japan</code>\ud83d\uddfe <code>compass</code>\ud83e\udded <code>mountain_snow</code>\ud83c\udfd4\ufe0f <code>mountain</code>\u26f0\ufe0f <code>volcano</code>\ud83c\udf0b <code>mount_fuji</code>\ud83d\uddfb <code>camping</code>\ud83c\udfd5\ufe0f <code>beach_umbrella</code>\ud83c\udfd6\ufe0f <code>desert</code>\ud83c\udfdc\ufe0f <code>desert_island</code>\ud83c\udfdd\ufe0f <code>national_park</code>\ud83c\udfde\ufe0f <code>stadium</code>\ud83c\udfdf\ufe0f <code>classical_building</code>\ud83c\udfdb\ufe0f <code>building_construction</code>\ud83c\udfd7\ufe0f <code>bricks</code>\ud83e\uddf1 <code>rock</code>\ud83e\udea8 <code>wood</code>\ud83e\udeb5 <code>hut</code>\ud83d\uded6 <code>houses</code>\ud83c\udfd8\ufe0f <code>derelict_house</code>\ud83c\udfda\ufe0f <code>house</code>\ud83c\udfe0 <code>house_with_garden</code>\ud83c\udfe1 <code>office</code>\ud83c\udfe2 <code>post_office</code>\ud83c\udfe3 <code>european_post_office</code>\ud83c\udfe4 <code>hospital</code>\ud83c\udfe5 <code>bank</code>\ud83c\udfe6 <code>hotel</code>\ud83c\udfe8 <code>love_hotel</code>\ud83c\udfe9 <code>convenience_store</code>\ud83c\udfea <code>school</code>\ud83c\udfeb <code>department_store</code>\ud83c\udfec <code>factory</code>\ud83c\udfed <code>japanese_castle</code>\ud83c\udfef <code>european_castle</code>\ud83c\udff0 <code>wedding</code>\ud83d\udc92 <code>tokyo_tower</code>\ud83d\uddfc <code>statue_of_liberty</code>\ud83d\uddfd <code>church</code>\u26ea <code>mosque</code>\ud83d\udd4c <code>hindu_temple</code>\ud83d\uded5 <code>synagogue</code>\ud83d\udd4d <code>shinto_shrine</code>\u26e9\ufe0f <code>kaaba</code>\ud83d\udd4b <code>fountain</code>\u26f2 <code>tent</code>\u26fa <code>foggy</code>\ud83c\udf01 <code>night_with_stars</code>\ud83c\udf03 <code>cityscape</code>\ud83c\udfd9\ufe0f <code>sunrise_over_mountains</code>\ud83c\udf04 <code>sunrise</code>\ud83c\udf05 <code>city_sunset</code>\ud83c\udf06 <code>city_sunrise</code>\ud83c\udf07 <code>bridge_at_night</code>\ud83c\udf09 <code>hotsprings</code>\u2668\ufe0f <code>carousel_horse</code>\ud83c\udfa0 <code>ferris_wheel</code>\ud83c\udfa1 <code>roller_coaster</code>\ud83c\udfa2 <code>barber</code>\ud83d\udc88 <code>circus_tent</code>\ud83c\udfaa <code>steam_locomotive</code>\ud83d\ude82 <code>railway_car</code>\ud83d\ude83 <code>bullettrain_side</code>\ud83d\ude84 <code>bullettrain_front</code>\ud83d\ude85 <code>train2</code>\ud83d\ude86 <code>metro</code>\ud83d\ude87 <code>light_rail</code>\ud83d\ude88 <code>station</code>\ud83d\ude89 <code>tram</code>\ud83d\ude8a <code>monorail</code>\ud83d\ude9d <code>mountain_railway</code>\ud83d\ude9e <code>train</code>\ud83d\ude8b <code>bus</code>\ud83d\ude8c <code>oncoming_bus</code>\ud83d\ude8d <code>trolleybus</code>\ud83d\ude8e <code>minibus</code>\ud83d\ude90 <code>ambulance</code>\ud83d\ude91 <code>fire_engine</code>\ud83d\ude92 <code>police_car</code>\ud83d\ude93 <code>oncoming_police_car</code>\ud83d\ude94 <code>taxi</code>\ud83d\ude95 <code>oncoming_taxi</code>\ud83d\ude96 <code>car</code>\ud83d\ude97 <code>oncoming_automobile</code>\ud83d\ude98 <code>blue_car</code>\ud83d\ude99 <code>pickup_truck</code>\ud83d\udefb <code>truck</code>\ud83d\ude9a <code>articulated_lorry</code>\ud83d\ude9b <code>tractor</code>\ud83d\ude9c <code>racing_car</code>\ud83c\udfce\ufe0f <code>motorcycle</code>\ud83c\udfcd\ufe0f <code>motor_scooter</code>\ud83d\udef5 <code>manual_wheelchair</code>\ud83e\uddbd <code>motorized_wheelchair</code>\ud83e\uddbc <code>auto_rickshaw</code>\ud83d\udefa <code>bike</code>\ud83d\udeb2 <code>kick_scooter</code>\ud83d\udef4 <code>skateboard</code>\ud83d\udef9 <code>roller_skate</code>\ud83d\udefc <code>busstop</code>\ud83d\ude8f <code>motorway</code>\ud83d\udee3\ufe0f <code>railway_track</code>\ud83d\udee4\ufe0f <code>oil_drum</code>\ud83d\udee2\ufe0f <code>fuelpump</code>\u26fd <code>rotating_light</code>\ud83d\udea8 <code>traffic_light</code>\ud83d\udea5 <code>vertical_traffic_light</code>\ud83d\udea6 <code>stop_sign</code>\ud83d\uded1 <code>construction</code>\ud83d\udea7 <code>anchor</code>\u2693 <code>boat</code>\u26f5 <code>canoe</code>\ud83d\udef6 <code>speedboat</code>\ud83d\udea4 <code>passenger_ship</code>\ud83d\udef3\ufe0f <code>ferry</code>\u26f4\ufe0f <code>motor_boat</code>\ud83d\udee5\ufe0f <code>ship</code>\ud83d\udea2 <code>airplane</code>\u2708\ufe0f <code>small_airplane</code>\ud83d\udee9\ufe0f <code>flight_departure</code>\ud83d\udeeb <code>flight_arrival</code>\ud83d\udeec <code>parachute</code>\ud83e\ude82 <code>seat</code>\ud83d\udcba <code>helicopter</code>\ud83d\ude81 <code>suspension_railway</code>\ud83d\ude9f <code>mountain_cableway</code>\ud83d\udea0 <code>aerial_tramway</code>\ud83d\udea1 <code>artificial_satellite</code>\ud83d\udef0\ufe0f <code>rocket</code>\ud83d\ude80 <code>flying_saucer</code>\ud83d\udef8 <code>bellhop_bell</code>\ud83d\udece\ufe0f <code>luggage</code>\ud83e\uddf3 <code>hourglass</code>\u231b <code>hourglass_flowing_sand</code>\u23f3 <code>watch</code>\u231a <code>alarm_clock</code>\u23f0 <code>stopwatch</code>\u23f1\ufe0f <code>timer_clock</code>\u23f2\ufe0f <code>mantelpiece_clock</code>\ud83d\udd70\ufe0f <code>clock12</code>\ud83d\udd5b <code>clock1230</code>\ud83d\udd67 <code>clock1</code>\ud83d\udd50 <code>clock130</code>\ud83d\udd5c <code>clock2</code>\ud83d\udd51 <code>clock230</code>\ud83d\udd5d <code>clock3</code>\ud83d\udd52 <code>clock330</code>\ud83d\udd5e <code>clock4</code>\ud83d\udd53 <code>clock430</code>\ud83d\udd5f <code>clock5</code>\ud83d\udd54 <code>clock530</code>\ud83d\udd60 <code>clock6</code>\ud83d\udd55 <code>clock630</code>\ud83d\udd61 <code>clock7</code>\ud83d\udd56 <code>clock730</code>\ud83d\udd62 <code>clock8</code>\ud83d\udd57 <code>clock830</code>\ud83d\udd63 <code>clock9</code>\ud83d\udd58 <code>clock930</code>\ud83d\udd64 <code>clock10</code>\ud83d\udd59 <code>clock1030</code>\ud83d\udd65 <code>clock11</code>\ud83d\udd5a <code>clock1130</code>\ud83d\udd66 <code>new_moon</code>\ud83c\udf11 <code>waxing_crescent_moon</code>\ud83c\udf12 <code>first_quarter_moon</code>\ud83c\udf13 <code>moon</code>\ud83c\udf14 <code>full_moon</code>\ud83c\udf15 <code>waning_gibbous_moon</code>\ud83c\udf16 <code>last_quarter_moon</code>\ud83c\udf17 <code>waning_crescent_moon</code>\ud83c\udf18 <code>crescent_moon</code>\ud83c\udf19 <code>new_moon_with_face</code>\ud83c\udf1a <code>first_quarter_moon_with_face</code>\ud83c\udf1b <code>last_quarter_moon_with_face</code>\ud83c\udf1c <code>thermometer</code>\ud83c\udf21\ufe0f <code>sunny</code>\u2600\ufe0f <code>full_moon_with_face</code>\ud83c\udf1d <code>sun_with_face</code>\ud83c\udf1e <code>ringed_planet</code>\ud83e\ude90 <code>star</code>\u2b50 <code>star2</code>\ud83c\udf1f <code>stars</code>\ud83c\udf20 <code>milky_way</code>\ud83c\udf0c <code>cloud</code>\u2601\ufe0f <code>partly_sunny</code>\u26c5 <code>cloud_with_lightning_and_rain</code>\u26c8\ufe0f <code>sun_behind_small_cloud</code>\ud83c\udf24\ufe0f <code>sun_behind_large_cloud</code>\ud83c\udf25\ufe0f <code>sun_behind_rain_cloud</code>\ud83c\udf26\ufe0f <code>cloud_with_rain</code>\ud83c\udf27\ufe0f <code>cloud_with_snow</code>\ud83c\udf28\ufe0f <code>cloud_with_lightning</code>\ud83c\udf29\ufe0f <code>tornado</code>\ud83c\udf2a\ufe0f <code>fog</code>\ud83c\udf2b\ufe0f <code>wind_face</code>\ud83c\udf2c\ufe0f <code>cyclone</code>\ud83c\udf00 <code>rainbow</code>\ud83c\udf08 <code>closed_umbrella</code>\ud83c\udf02 <code>open_umbrella</code>\u2602\ufe0f <code>umbrella</code>\u2614 <code>parasol_on_ground</code>\u26f1\ufe0f <code>zap</code>\u26a1 <code>snowflake</code>\u2744\ufe0f <code>snowman_with_snow</code>\u2603\ufe0f <code>snowman</code>\u26c4 <code>comet</code>\u2604\ufe0f <code>fire</code>\ud83d\udd25 <code>droplet</code>\ud83d\udca7 <code>ocean</code>\ud83c\udf0a <code>jack_o_lantern</code>\ud83c\udf83 <code>christmas_tree</code>\ud83c\udf84 <code>fireworks</code>\ud83c\udf86 <code>sparkler</code>\ud83c\udf87 <code>firecracker</code>\ud83e\udde8 <code>sparkles</code>\u2728 <code>balloon</code>\ud83c\udf88 <code>tada</code>\ud83c\udf89 <code>confetti_ball</code>\ud83c\udf8a <code>tanabata_tree</code>\ud83c\udf8b <code>bamboo</code>\ud83c\udf8d <code>dolls</code>\ud83c\udf8e <code>flags</code>\ud83c\udf8f <code>wind_chime</code>\ud83c\udf90 <code>rice_scene</code>\ud83c\udf91 <code>red_envelope</code>\ud83e\udde7 <code>ribbon</code>\ud83c\udf80 <code>gift</code>\ud83c\udf81 <code>reminder_ribbon</code>\ud83c\udf97\ufe0f <code>tickets</code>\ud83c\udf9f\ufe0f <code>ticket</code>\ud83c\udfab <code>medal_military</code>\ud83c\udf96\ufe0f <code>trophy</code>\ud83c\udfc6 <code>medal_sports</code>\ud83c\udfc5 <code>1st_place_medal</code>\ud83e\udd47 <code>2nd_place_medal</code>\ud83e\udd48 <code>3rd_place_medal</code>\ud83e\udd49 <code>soccer</code>\u26bd <code>baseball</code>\u26be <code>softball</code>\ud83e\udd4e <code>basketball</code>\ud83c\udfc0 <code>volleyball</code>\ud83c\udfd0 <code>football</code>\ud83c\udfc8 <code>rugby_football</code>\ud83c\udfc9 <code>tennis</code>\ud83c\udfbe <code>flying_disc</code>\ud83e\udd4f <code>bowling</code>\ud83c\udfb3 <code>cricket_game</code>\ud83c\udfcf <code>field_hockey</code>\ud83c\udfd1 <code>ice_hockey</code>\ud83c\udfd2 <code>lacrosse</code>\ud83e\udd4d <code>ping_pong</code>\ud83c\udfd3 <code>badminton</code>\ud83c\udff8 <code>boxing_glove</code>\ud83e\udd4a <code>martial_arts_uniform</code>\ud83e\udd4b <code>goal_net</code>\ud83e\udd45 <code>golf</code>\u26f3 <code>ice_skate</code>\u26f8\ufe0f <code>fishing_pole_and_fish</code>\ud83c\udfa3 <code>diving_mask</code>\ud83e\udd3f <code>running_shirt_with_sash</code>\ud83c\udfbd <code>ski</code>\ud83c\udfbf <code>sled</code>\ud83d\udef7 <code>curling_stone</code>\ud83e\udd4c <code>dart</code>\ud83c\udfaf <code>yo_yo</code>\ud83e\ude80 <code>kite</code>\ud83e\ude81 <code>8ball</code>\ud83c\udfb1 <code>crystal_ball</code>\ud83d\udd2e <code>magic_wand</code>\ud83e\ude84 <code>nazar_amulet</code>\ud83e\uddff <code>video_game</code>\ud83c\udfae <code>joystick</code>\ud83d\udd79\ufe0f <code>slot_machine</code>\ud83c\udfb0 <code>game_die</code>\ud83c\udfb2 <code>jigsaw</code>\ud83e\udde9 <code>teddy_bear</code>\ud83e\uddf8 <code>pinata</code>\ud83e\ude85 <code>nesting_dolls</code>\ud83e\ude86 <code>spades</code>\u2660\ufe0f <code>hearts</code>\u2665\ufe0f <code>diamonds</code>\u2666\ufe0f <code>clubs</code>\u2663\ufe0f <code>chess_pawn</code>\u265f\ufe0f <code>black_joker</code>\ud83c\udccf <code>mahjong</code>\ud83c\udc04 <code>flower_playing_cards</code>\ud83c\udfb4 <code>performing_arts</code>\ud83c\udfad <code>framed_picture</code>\ud83d\uddbc\ufe0f <code>art</code>\ud83c\udfa8 <code>thread</code>\ud83e\uddf5 <code>sewing_needle</code>\ud83e\udea1 <code>yarn</code>\ud83e\uddf6 <code>knot</code>\ud83e\udea2 <code>eyeglasses</code>\ud83d\udc53 <code>dark_sunglasses</code>\ud83d\udd76\ufe0f <code>goggles</code>\ud83e\udd7d <code>lab_coat</code>\ud83e\udd7c <code>safety_vest</code>\ud83e\uddba <code>necktie</code>\ud83d\udc54 <code>shirt</code>\ud83d\udc55 <code>jeans</code>\ud83d\udc56 <code>scarf</code>\ud83e\udde3 <code>gloves</code>\ud83e\udde4 <code>coat</code>\ud83e\udde5 <code>socks</code>\ud83e\udde6 <code>dress</code>\ud83d\udc57 <code>kimono</code>\ud83d\udc58 <code>sari</code>\ud83e\udd7b <code>one_piece_swimsuit</code>\ud83e\ude71 <code>swim_brief</code>\ud83e\ude72 <code>shorts</code>\ud83e\ude73 <code>bikini</code>\ud83d\udc59 <code>womans_clothes</code>\ud83d\udc5a <code>purse</code>\ud83d\udc5b <code>handbag</code>\ud83d\udc5c <code>pouch</code>\ud83d\udc5d <code>shopping</code>\ud83d\udecd\ufe0f <code>school_satchel</code>\ud83c\udf92 <code>thong_sandal</code>\ud83e\ude74 <code>mans_shoe</code>\ud83d\udc5e <code>athletic_shoe</code>\ud83d\udc5f <code>hiking_boot</code>\ud83e\udd7e <code>flat_shoe</code>\ud83e\udd7f <code>high_heel</code>\ud83d\udc60 <code>sandal</code>\ud83d\udc61 <code>ballet_shoes</code>\ud83e\ude70 <code>boot</code>\ud83d\udc62 <code>crown</code>\ud83d\udc51 <code>womans_hat</code>\ud83d\udc52 <code>tophat</code>\ud83c\udfa9 <code>mortar_board</code>\ud83c\udf93 <code>billed_cap</code>\ud83e\udde2 <code>military_helmet</code>\ud83e\ude96 <code>rescue_worker_helmet</code>\u26d1\ufe0f <code>prayer_beads</code>\ud83d\udcff <code>lipstick</code>\ud83d\udc84 <code>ring</code>\ud83d\udc8d <code>gem</code>\ud83d\udc8e <code>mute</code>\ud83d\udd07 <code>speaker</code>\ud83d\udd08 <code>sound</code>\ud83d\udd09 <code>loud_sound</code>\ud83d\udd0a <code>loudspeaker</code>\ud83d\udce2 <code>mega</code>\ud83d\udce3 <code>postal_horn</code>\ud83d\udcef <code>bell</code>\ud83d\udd14 <code>no_bell</code>\ud83d\udd15 <code>musical_score</code>\ud83c\udfbc <code>musical_note</code>\ud83c\udfb5 <code>notes</code>\ud83c\udfb6 <code>studio_microphone</code>\ud83c\udf99\ufe0f <code>level_slider</code>\ud83c\udf9a\ufe0f <code>control_knobs</code>\ud83c\udf9b\ufe0f <code>microphone</code>\ud83c\udfa4 <code>headphones</code>\ud83c\udfa7 <code>radio</code>\ud83d\udcfb <code>saxophone</code>\ud83c\udfb7 <code>accordion</code>\ud83e\ude97 <code>guitar</code>\ud83c\udfb8 <code>musical_keyboard</code>\ud83c\udfb9 <code>trumpet</code>\ud83c\udfba <code>violin</code>\ud83c\udfbb <code>banjo</code>\ud83e\ude95 <code>drum</code>\ud83e\udd41 <code>long_drum</code>\ud83e\ude98 <code>iphone</code>\ud83d\udcf1 <code>calling</code>\ud83d\udcf2 <code>phone</code>\u260e\ufe0f <code>telephone_receiver</code>\ud83d\udcde <code>pager</code>\ud83d\udcdf <code>fax</code>\ud83d\udce0 <code>battery</code>\ud83d\udd0b <code>electric_plug</code>\ud83d\udd0c <code>computer</code>\ud83d\udcbb <code>desktop_computer</code>\ud83d\udda5\ufe0f <code>printer</code>\ud83d\udda8\ufe0f <code>keyboard</code>\u2328\ufe0f <code>computer_mouse</code>\ud83d\uddb1\ufe0f <code>trackball</code>\ud83d\uddb2\ufe0f <code>minidisc</code>\ud83d\udcbd <code>floppy_disk</code>\ud83d\udcbe <code>cd</code>\ud83d\udcbf <code>dvd</code>\ud83d\udcc0 <code>abacus</code>\ud83e\uddee <code>movie_camera</code>\ud83c\udfa5 <code>film_strip</code>\ud83c\udf9e\ufe0f <code>film_projector</code>\ud83d\udcfd\ufe0f <code>clapper</code>\ud83c\udfac <code>tv</code>\ud83d\udcfa <code>camera</code>\ud83d\udcf7 <code>camera_flash</code>\ud83d\udcf8 <code>video_camera</code>\ud83d\udcf9 <code>vhs</code>\ud83d\udcfc <code>mag</code>\ud83d\udd0d <code>mag_right</code>\ud83d\udd0e <code>candle</code>\ud83d\udd6f\ufe0f <code>bulb</code>\ud83d\udca1 <code>flashlight</code>\ud83d\udd26 <code>izakaya_lantern</code>\ud83c\udfee <code>diya_lamp</code>\ud83e\ude94 <code>notebook_with_decorative_cover</code>\ud83d\udcd4 <code>closed_book</code>\ud83d\udcd5 <code>book</code>\ud83d\udcd6 <code>green_book</code>\ud83d\udcd7 <code>blue_book</code>\ud83d\udcd8 <code>orange_book</code>\ud83d\udcd9 <code>books</code>\ud83d\udcda <code>notebook</code>\ud83d\udcd3 <code>ledger</code>\ud83d\udcd2 <code>page_with_curl</code>\ud83d\udcc3 <code>scroll</code>\ud83d\udcdc <code>page_facing_up</code>\ud83d\udcc4 <code>newspaper</code>\ud83d\udcf0 <code>newspaper_roll</code>\ud83d\uddde\ufe0f <code>bookmark_tabs</code>\ud83d\udcd1 <code>bookmark</code>\ud83d\udd16 <code>label</code>\ud83c\udff7\ufe0f <code>moneybag</code>\ud83d\udcb0 <code>coin</code>\ud83e\ude99 <code>yen</code>\ud83d\udcb4 <code>dollar</code>\ud83d\udcb5 <code>euro</code>\ud83d\udcb6 <code>pound</code>\ud83d\udcb7 <code>money_with_wings</code>\ud83d\udcb8 <code>credit_card</code>\ud83d\udcb3 <code>receipt</code>\ud83e\uddfe <code>chart</code>\ud83d\udcb9 <code>envelope</code>\u2709\ufe0f <code>email</code>\ud83d\udce7 TagEmoji <code>email</code>\ud83d\udce7 <code>incoming_envelope</code>\ud83d\udce8 <code>envelope_with_arrow</code>\ud83d\udce9 <code>outbox_tray</code>\ud83d\udce4 <code>inbox_tray</code>\ud83d\udce5 <code>package</code>\ud83d\udce6 <code>mailbox</code>\ud83d\udceb <code>mailbox_closed</code>\ud83d\udcea <code>mailbox_with_mail</code>\ud83d\udcec <code>mailbox_with_no_mail</code>\ud83d\udced <code>postbox</code>\ud83d\udcee <code>ballot_box</code>\ud83d\uddf3\ufe0f <code>pencil2</code>\u270f\ufe0f <code>black_nib</code>\u2712\ufe0f <code>fountain_pen</code>\ud83d\udd8b\ufe0f <code>pen</code>\ud83d\udd8a\ufe0f <code>paintbrush</code>\ud83d\udd8c\ufe0f <code>crayon</code>\ud83d\udd8d\ufe0f <code>memo</code>\ud83d\udcdd <code>briefcase</code>\ud83d\udcbc <code>file_folder</code>\ud83d\udcc1 <code>open_file_folder</code>\ud83d\udcc2 <code>card_index_dividers</code>\ud83d\uddc2\ufe0f <code>date</code>\ud83d\udcc5 <code>calendar</code>\ud83d\udcc6 <code>spiral_notepad</code>\ud83d\uddd2\ufe0f <code>spiral_calendar</code>\ud83d\uddd3\ufe0f <code>card_index</code>\ud83d\udcc7 <code>chart_with_upwards_trend</code>\ud83d\udcc8 <code>chart_with_downwards_trend</code>\ud83d\udcc9 <code>bar_chart</code>\ud83d\udcca <code>clipboard</code>\ud83d\udccb <code>pushpin</code>\ud83d\udccc <code>round_pushpin</code>\ud83d\udccd <code>paperclip</code>\ud83d\udcce <code>paperclips</code>\ud83d\udd87\ufe0f <code>straight_ruler</code>\ud83d\udccf <code>triangular_ruler</code>\ud83d\udcd0 <code>scissors</code>\u2702\ufe0f <code>card_file_box</code>\ud83d\uddc3\ufe0f <code>file_cabinet</code>\ud83d\uddc4\ufe0f <code>wastebasket</code>\ud83d\uddd1\ufe0f <code>lock</code>\ud83d\udd12 <code>unlock</code>\ud83d\udd13 <code>lock_with_ink_pen</code>\ud83d\udd0f <code>closed_lock_with_key</code>\ud83d\udd10 <code>key</code>\ud83d\udd11 <code>old_key</code>\ud83d\udddd\ufe0f <code>hammer</code>\ud83d\udd28 <code>axe</code>\ud83e\ude93 <code>pick</code>\u26cf\ufe0f <code>hammer_and_pick</code>\u2692\ufe0f <code>hammer_and_wrench</code>\ud83d\udee0\ufe0f <code>dagger</code>\ud83d\udde1\ufe0f <code>crossed_swords</code>\u2694\ufe0f <code>gun</code>\ud83d\udd2b <code>boomerang</code>\ud83e\ude83 <code>bow_and_arrow</code>\ud83c\udff9 <code>shield</code>\ud83d\udee1\ufe0f <code>carpentry_saw</code>\ud83e\ude9a <code>wrench</code>\ud83d\udd27 <code>screwdriver</code>\ud83e\ude9b <code>nut_and_bolt</code>\ud83d\udd29 <code>gear</code>\u2699\ufe0f <code>clamp</code>\ud83d\udddc\ufe0f <code>balance_scale</code>\u2696\ufe0f <code>probing_cane</code>\ud83e\uddaf <code>link</code>\ud83d\udd17 <code>chains</code>\u26d3\ufe0f <code>hook</code>\ud83e\ude9d <code>toolbox</code>\ud83e\uddf0 <code>magnet</code>\ud83e\uddf2 <code>ladder</code>\ud83e\ude9c <code>alembic</code>\u2697\ufe0f <code>test_tube</code>\ud83e\uddea <code>petri_dish</code>\ud83e\uddeb <code>dna</code>\ud83e\uddec <code>microscope</code>\ud83d\udd2c <code>telescope</code>\ud83d\udd2d <code>satellite</code>\ud83d\udce1 <code>syringe</code>\ud83d\udc89 <code>drop_of_blood</code>\ud83e\ude78 <code>pill</code>\ud83d\udc8a <code>adhesive_bandage</code>\ud83e\ude79 <code>stethoscope</code>\ud83e\ude7a <code>door</code>\ud83d\udeaa <code>elevator</code>\ud83d\uded7 <code>mirror</code>\ud83e\ude9e <code>window</code>\ud83e\ude9f <code>bed</code>\ud83d\udecf\ufe0f <code>couch_and_lamp</code>\ud83d\udecb\ufe0f <code>chair</code>\ud83e\ude91 <code>toilet</code>\ud83d\udebd <code>plunger</code>\ud83e\udea0 <code>shower</code>\ud83d\udebf <code>bathtub</code>\ud83d\udec1 <code>mouse_trap</code>\ud83e\udea4 <code>razor</code>\ud83e\ude92 <code>lotion_bottle</code>\ud83e\uddf4 <code>safety_pin</code>\ud83e\uddf7 <code>broom</code>\ud83e\uddf9 <code>basket</code>\ud83e\uddfa <code>roll_of_paper</code>\ud83e\uddfb <code>bucket</code>\ud83e\udea3 <code>soap</code>\ud83e\uddfc <code>toothbrush</code>\ud83e\udea5 <code>sponge</code>\ud83e\uddfd <code>fire_extinguisher</code>\ud83e\uddef <code>shopping_cart</code>\ud83d\uded2 <code>smoking</code>\ud83d\udeac <code>coffin</code>\u26b0\ufe0f <code>headstone</code>\ud83e\udea6 <code>funeral_urn</code>\u26b1\ufe0f <code>moyai</code>\ud83d\uddff <code>placard</code>\ud83e\udea7 <code>atm</code>\ud83c\udfe7 <code>put_litter_in_its_place</code>\ud83d\udeae <code>potable_water</code>\ud83d\udeb0 <code>wheelchair</code>\u267f <code>mens</code>\ud83d\udeb9 <code>womens</code>\ud83d\udeba <code>restroom</code>\ud83d\udebb <code>baby_symbol</code>\ud83d\udebc <code>wc</code>\ud83d\udebe <code>passport_control</code>\ud83d\udec2 <code>customs</code>\ud83d\udec3 <code>baggage_claim</code>\ud83d\udec4 <code>left_luggage</code>\ud83d\udec5 <code>warning</code>\u26a0\ufe0f <code>children_crossing</code>\ud83d\udeb8 <code>no_entry</code>\u26d4 <code>no_entry_sign</code>\ud83d\udeab <code>no_bicycles</code>\ud83d\udeb3 <code>no_smoking</code>\ud83d\udead <code>do_not_litter</code>\ud83d\udeaf <code>non-potable_water</code>\ud83d\udeb1 <code>no_pedestrians</code>\ud83d\udeb7 <code>no_mobile_phones</code>\ud83d\udcf5 <code>underage</code>\ud83d\udd1e <code>radioactive</code>\u2622\ufe0f <code>biohazard</code>\u2623\ufe0f <code>arrow_up</code>\u2b06\ufe0f <code>arrow_upper_right</code>\u2197\ufe0f <code>arrow_right</code>\u27a1\ufe0f <code>arrow_lower_right</code>\u2198\ufe0f <code>arrow_down</code>\u2b07\ufe0f <code>arrow_lower_left</code>\u2199\ufe0f <code>arrow_left</code>\u2b05\ufe0f <code>arrow_upper_left</code>\u2196\ufe0f <code>arrow_up_down</code>\u2195\ufe0f <code>left_right_arrow</code>\u2194\ufe0f <code>leftwards_arrow_with_hook</code>\u21a9\ufe0f <code>arrow_right_hook</code>\u21aa\ufe0f <code>arrow_heading_up</code>\u2934\ufe0f <code>arrow_heading_down</code>\u2935\ufe0f <code>arrows_clockwise</code>\ud83d\udd03 <code>arrows_counterclockwise</code>\ud83d\udd04 <code>back</code>\ud83d\udd19 <code>end</code>\ud83d\udd1a <code>on</code>\ud83d\udd1b <code>soon</code>\ud83d\udd1c <code>top</code>\ud83d\udd1d <code>place_of_worship</code>\ud83d\uded0 <code>atom_symbol</code>\u269b\ufe0f <code>om</code>\ud83d\udd49\ufe0f <code>star_of_david</code>\u2721\ufe0f <code>wheel_of_dharma</code>\u2638\ufe0f <code>yin_yang</code>\u262f\ufe0f <code>latin_cross</code>\u271d\ufe0f <code>orthodox_cross</code>\u2626\ufe0f <code>star_and_crescent</code>\u262a\ufe0f <code>peace_symbol</code>\u262e\ufe0f <code>menorah</code>\ud83d\udd4e <code>six_pointed_star</code>\ud83d\udd2f <code>aries</code>\u2648 <code>taurus</code>\u2649 <code>gemini</code>\u264a <code>cancer</code>\u264b <code>leo</code>\u264c <code>virgo</code>\u264d <code>libra</code>\u264e <code>scorpius</code>\u264f <code>sagittarius</code>\u2650 <code>capricorn</code>\u2651 <code>aquarius</code>\u2652 <code>pisces</code>\u2653 <code>ophiuchus</code>\u26ce <code>twisted_rightwards_arrows</code>\ud83d\udd00 <code>repeat</code>\ud83d\udd01 <code>repeat_one</code>\ud83d\udd02 <code>arrow_forward</code>\u25b6\ufe0f <code>fast_forward</code>\u23e9 <code>next_track_button</code>\u23ed\ufe0f <code>play_or_pause_button</code>\u23ef\ufe0f <code>arrow_backward</code>\u25c0\ufe0f <code>rewind</code>\u23ea <code>previous_track_button</code>\u23ee\ufe0f <code>arrow_up_small</code>\ud83d\udd3c <code>arrow_double_up</code>\u23eb <code>arrow_down_small</code>\ud83d\udd3d <code>arrow_double_down</code>\u23ec <code>pause_button</code>\u23f8\ufe0f <code>stop_button</code>\u23f9\ufe0f <code>record_button</code>\u23fa\ufe0f <code>eject_button</code>\u23cf\ufe0f <code>cinema</code>\ud83c\udfa6 <code>low_brightness</code>\ud83d\udd05 <code>high_brightness</code>\ud83d\udd06 <code>signal_strength</code>\ud83d\udcf6 <code>vibration_mode</code>\ud83d\udcf3 <code>mobile_phone_off</code>\ud83d\udcf4 <code>female_sign</code>\u2640\ufe0f <code>male_sign</code>\u2642\ufe0f <code>transgender_symbol</code>\u26a7\ufe0f <code>heavy_multiplication_x</code>\u2716\ufe0f <code>heavy_plus_sign</code>\u2795 <code>heavy_minus_sign</code>\u2796 <code>heavy_division_sign</code>\u2797 <code>infinity</code>\u267e\ufe0f <code>bangbang</code>\u203c\ufe0f <code>interrobang</code>\u2049\ufe0f <code>question</code>\u2753 <code>grey_question</code>\u2754 <code>grey_exclamation</code>\u2755 <code>exclamation</code>\u2757 <code>wavy_dash</code>\u3030\ufe0f <code>currency_exchange</code>\ud83d\udcb1 <code>heavy_dollar_sign</code>\ud83d\udcb2 <code>medical_symbol</code>\u2695\ufe0f <code>recycle</code>\u267b\ufe0f <code>fleur_de_lis</code>\u269c\ufe0f <code>trident</code>\ud83d\udd31 <code>name_badge</code>\ud83d\udcdb <code>beginner</code>\ud83d\udd30 <code>o</code>\u2b55 <code>white_check_mark</code>\u2705 <code>ballot_box_with_check</code>\u2611\ufe0f <code>heavy_check_mark</code>\u2714\ufe0f <code>x</code>\u274c <code>negative_squared_cross_mark</code>\u274e <code>curly_loop</code>\u27b0 <code>loop</code>\u27bf <code>part_alternation_mark</code>\u303d\ufe0f <code>eight_spoked_asterisk</code>\u2733\ufe0f <code>eight_pointed_black_star</code>\u2734\ufe0f <code>sparkle</code>\u2747\ufe0f <code>copyright</code>\u00a9\ufe0f <code>registered</code>\u00ae\ufe0f <code>tm</code>\u2122\ufe0f <code>hash</code>#\ufe0f\u20e3 <code>asterisk</code>*\ufe0f\u20e3 <code>zero</code>0\ufe0f\u20e3 <code>one</code>1\ufe0f\u20e3 <code>two</code>2\ufe0f\u20e3 <code>three</code>3\ufe0f\u20e3 <code>four</code>4\ufe0f\u20e3 <code>five</code>5\ufe0f\u20e3 <code>six</code>6\ufe0f\u20e3 <code>seven</code>7\ufe0f\u20e3 <code>eight</code>8\ufe0f\u20e3 <code>nine</code>9\ufe0f\u20e3 <code>keycap_ten</code>\ud83d\udd1f <code>capital_abcd</code>\ud83d\udd20 <code>abcd</code>\ud83d\udd21 <code>1234</code>\ud83d\udd22 <code>symbols</code>\ud83d\udd23 <code>abc</code>\ud83d\udd24 <code>a</code>\ud83c\udd70\ufe0f <code>ab</code>\ud83c\udd8e <code>b</code>\ud83c\udd71\ufe0f <code>cl</code>\ud83c\udd91 <code>cool</code>\ud83c\udd92 <code>free</code>\ud83c\udd93 <code>information_source</code>\u2139\ufe0f <code>id</code>\ud83c\udd94 <code>m</code>\u24c2\ufe0f <code>new</code>\ud83c\udd95 <code>ng</code>\ud83c\udd96 <code>o2</code>\ud83c\udd7e\ufe0f <code>ok</code>\ud83c\udd97 <code>parking</code>\ud83c\udd7f\ufe0f <code>sos</code>\ud83c\udd98 <code>up</code>\ud83c\udd99 <code>vs</code>\ud83c\udd9a <code>koko</code>\ud83c\ude01 <code>sa</code>\ud83c\ude02\ufe0f <code>u6708</code>\ud83c\ude37\ufe0f <code>u6709</code>\ud83c\ude36 <code>u6307</code>\ud83c\ude2f <code>ideograph_advantage</code>\ud83c\ude50 <code>u5272</code>\ud83c\ude39 <code>u7121</code>\ud83c\ude1a <code>u7981</code>\ud83c\ude32 <code>accept</code>\ud83c\ude51 <code>u7533</code>\ud83c\ude38 <code>u5408</code>\ud83c\ude34 <code>u7a7a</code>\ud83c\ude33 <code>congratulations</code>\u3297\ufe0f <code>secret</code>\u3299\ufe0f <code>u55b6</code>\ud83c\ude3a <code>u6e80</code>\ud83c\ude35 <code>red_circle</code>\ud83d\udd34 <code>orange_circle</code>\ud83d\udfe0 <code>yellow_circle</code>\ud83d\udfe1 <code>green_circle</code>\ud83d\udfe2 <code>large_blue_circle</code>\ud83d\udd35 <code>purple_circle</code>\ud83d\udfe3 <code>brown_circle</code>\ud83d\udfe4 <code>black_circle</code>\u26ab <code>white_circle</code>\u26aa <code>red_square</code>\ud83d\udfe5 <code>orange_square</code>\ud83d\udfe7 <code>yellow_square</code>\ud83d\udfe8 <code>green_square</code>\ud83d\udfe9 <code>blue_square</code>\ud83d\udfe6 <code>purple_square</code>\ud83d\udfea <code>brown_square</code>\ud83d\udfeb <code>black_large_square</code>\u2b1b <code>white_large_square</code>\u2b1c <code>black_medium_square</code>\u25fc\ufe0f <code>white_medium_square</code>\u25fb\ufe0f <code>black_medium_small_square</code>\u25fe <code>white_medium_small_square</code>\u25fd <code>black_small_square</code>\u25aa\ufe0f <code>white_small_square</code>\u25ab\ufe0f <code>large_orange_diamond</code>\ud83d\udd36 <code>large_blue_diamond</code>\ud83d\udd37 <code>small_orange_diamond</code>\ud83d\udd38 <code>small_blue_diamond</code>\ud83d\udd39 <code>small_red_triangle</code>\ud83d\udd3a <code>small_red_triangle_down</code>\ud83d\udd3b <code>diamond_shape_with_a_dot_inside</code>\ud83d\udca0 <code>radio_button</code>\ud83d\udd18 <code>white_square_button</code>\ud83d\udd33 <code>black_square_button</code>\ud83d\udd32 <code>checkered_flag</code>\ud83c\udfc1 <code>triangular_flag_on_post</code>\ud83d\udea9 <code>crossed_flags</code>\ud83c\udf8c <code>black_flag</code>\ud83c\udff4 <code>white_flag</code>\ud83c\udff3\ufe0f <code>rainbow_flag</code>\ud83c\udff3\ufe0f\u200d\ud83c\udf08 <code>transgender_flag</code>\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f <code>pirate_flag</code>\ud83c\udff4\u200d\u2620\ufe0f <code>ascension_island</code>\ud83c\udde6\ud83c\udde8 <code>andorra</code>\ud83c\udde6\ud83c\udde9 <code>united_arab_emirates</code>\ud83c\udde6\ud83c\uddea <code>afghanistan</code>\ud83c\udde6\ud83c\uddeb <code>antigua_barbuda</code>\ud83c\udde6\ud83c\uddec <code>anguilla</code>\ud83c\udde6\ud83c\uddee <code>albania</code>\ud83c\udde6\ud83c\uddf1 <code>armenia</code>\ud83c\udde6\ud83c\uddf2 <code>angola</code>\ud83c\udde6\ud83c\uddf4 <code>antarctica</code>\ud83c\udde6\ud83c\uddf6 <code>argentina</code>\ud83c\udde6\ud83c\uddf7 <code>american_samoa</code>\ud83c\udde6\ud83c\uddf8 <code>austria</code>\ud83c\udde6\ud83c\uddf9 <code>australia</code>\ud83c\udde6\ud83c\uddfa <code>aruba</code>\ud83c\udde6\ud83c\uddfc <code>aland_islands</code>\ud83c\udde6\ud83c\uddfd <code>azerbaijan</code>\ud83c\udde6\ud83c\uddff <code>bosnia_herzegovina</code>\ud83c\udde7\ud83c\udde6 <code>barbados</code>\ud83c\udde7\ud83c\udde7 <code>bangladesh</code>\ud83c\udde7\ud83c\udde9 <code>belgium</code>\ud83c\udde7\ud83c\uddea <code>burkina_faso</code>\ud83c\udde7\ud83c\uddeb <code>bulgaria</code>\ud83c\udde7\ud83c\uddec <code>bahrain</code>\ud83c\udde7\ud83c\udded <code>burundi</code>\ud83c\udde7\ud83c\uddee <code>benin</code>\ud83c\udde7\ud83c\uddef <code>st_barthelemy</code>\ud83c\udde7\ud83c\uddf1 <code>bermuda</code>\ud83c\udde7\ud83c\uddf2 <code>brunei</code>\ud83c\udde7\ud83c\uddf3 <code>bolivia</code>\ud83c\udde7\ud83c\uddf4 <code>caribbean_netherlands</code>\ud83c\udde7\ud83c\uddf6 <code>brazil</code>\ud83c\udde7\ud83c\uddf7 <code>bahamas</code>\ud83c\udde7\ud83c\uddf8 <code>bhutan</code>\ud83c\udde7\ud83c\uddf9 <code>bouvet_island</code>\ud83c\udde7\ud83c\uddfb <code>botswana</code>\ud83c\udde7\ud83c\uddfc <code>belarus</code>\ud83c\udde7\ud83c\uddfe <code>belize</code>\ud83c\udde7\ud83c\uddff <code>canada</code>\ud83c\udde8\ud83c\udde6 <code>cocos_islands</code>\ud83c\udde8\ud83c\udde8 <code>congo_kinshasa</code>\ud83c\udde8\ud83c\udde9 <code>central_african_republic</code>\ud83c\udde8\ud83c\uddeb <code>congo_brazzaville</code>\ud83c\udde8\ud83c\uddec <code>switzerland</code>\ud83c\udde8\ud83c\udded <code>cote_divoire</code>\ud83c\udde8\ud83c\uddee <code>cook_islands</code>\ud83c\udde8\ud83c\uddf0 <code>chile</code>\ud83c\udde8\ud83c\uddf1 <code>cameroon</code>\ud83c\udde8\ud83c\uddf2 <code>cn</code>\ud83c\udde8\ud83c\uddf3 <code>colombia</code>\ud83c\udde8\ud83c\uddf4 <code>clipperton_island</code>\ud83c\udde8\ud83c\uddf5 <code>costa_rica</code>\ud83c\udde8\ud83c\uddf7 <code>cuba</code>\ud83c\udde8\ud83c\uddfa <code>cape_verde</code>\ud83c\udde8\ud83c\uddfb <code>curacao</code>\ud83c\udde8\ud83c\uddfc <code>christmas_island</code>\ud83c\udde8\ud83c\uddfd <code>cyprus</code>\ud83c\udde8\ud83c\uddfe <code>czech_republic</code>\ud83c\udde8\ud83c\uddff <code>de</code>\ud83c\udde9\ud83c\uddea <code>diego_garcia</code>\ud83c\udde9\ud83c\uddec <code>djibouti</code>\ud83c\udde9\ud83c\uddef <code>denmark</code>\ud83c\udde9\ud83c\uddf0 <code>dominica</code>\ud83c\udde9\ud83c\uddf2 <code>dominican_republic</code>\ud83c\udde9\ud83c\uddf4 <code>algeria</code>\ud83c\udde9\ud83c\uddff <code>ceuta_melilla</code>\ud83c\uddea\ud83c\udde6 <code>ecuador</code>\ud83c\uddea\ud83c\udde8 <code>estonia</code>\ud83c\uddea\ud83c\uddea <code>egypt</code>\ud83c\uddea\ud83c\uddec <code>western_sahara</code>\ud83c\uddea\ud83c\udded <code>eritrea</code>\ud83c\uddea\ud83c\uddf7 <code>es</code>\ud83c\uddea\ud83c\uddf8 <code>ethiopia</code>\ud83c\uddea\ud83c\uddf9 <code>eu</code>\ud83c\uddea\ud83c\uddfa <code>finland</code>\ud83c\uddeb\ud83c\uddee <code>fiji</code>\ud83c\uddeb\ud83c\uddef <code>falkland_islands</code>\ud83c\uddeb\ud83c\uddf0 <code>micronesia</code>\ud83c\uddeb\ud83c\uddf2 <code>faroe_islands</code>\ud83c\uddeb\ud83c\uddf4 <code>fr</code>\ud83c\uddeb\ud83c\uddf7 <code>gabon</code>\ud83c\uddec\ud83c\udde6 <code>gb</code>\ud83c\uddec\ud83c\udde7 <code>grenada</code>\ud83c\uddec\ud83c\udde9 <code>georgia</code>\ud83c\uddec\ud83c\uddea <code>french_guiana</code>\ud83c\uddec\ud83c\uddeb <code>guernsey</code>\ud83c\uddec\ud83c\uddec <code>ghana</code>\ud83c\uddec\ud83c\udded <code>gibraltar</code>\ud83c\uddec\ud83c\uddee <code>greenland</code>\ud83c\uddec\ud83c\uddf1 <code>gambia</code>\ud83c\uddec\ud83c\uddf2 <code>guinea</code>\ud83c\uddec\ud83c\uddf3 <code>guadeloupe</code>\ud83c\uddec\ud83c\uddf5 <code>equatorial_guinea</code>\ud83c\uddec\ud83c\uddf6 <code>greece</code>\ud83c\uddec\ud83c\uddf7 <code>south_georgia_south_sandwich_islands</code>\ud83c\uddec\ud83c\uddf8 <code>guatemala</code>\ud83c\uddec\ud83c\uddf9 <code>guam</code>\ud83c\uddec\ud83c\uddfa <code>guinea_bissau</code>\ud83c\uddec\ud83c\uddfc <code>guyana</code>\ud83c\uddec\ud83c\uddfe <code>hong_kong</code>\ud83c\udded\ud83c\uddf0 <code>heard_mcdonald_islands</code>\ud83c\udded\ud83c\uddf2 <code>honduras</code>\ud83c\udded\ud83c\uddf3 <code>croatia</code>\ud83c\udded\ud83c\uddf7 <code>haiti</code>\ud83c\udded\ud83c\uddf9 <code>hungary</code>\ud83c\udded\ud83c\uddfa <code>canary_islands</code>\ud83c\uddee\ud83c\udde8 <code>indonesia</code>\ud83c\uddee\ud83c\udde9 <code>ireland</code>\ud83c\uddee\ud83c\uddea <code>israel</code>\ud83c\uddee\ud83c\uddf1 <code>isle_of_man</code>\ud83c\uddee\ud83c\uddf2 <code>india</code>\ud83c\uddee\ud83c\uddf3 <code>british_indian_ocean_territory</code>\ud83c\uddee\ud83c\uddf4 <code>iraq</code>\ud83c\uddee\ud83c\uddf6 <code>iran</code>\ud83c\uddee\ud83c\uddf7 <code>iceland</code>\ud83c\uddee\ud83c\uddf8 <code>it</code>\ud83c\uddee\ud83c\uddf9 <code>jersey</code>\ud83c\uddef\ud83c\uddea <code>jamaica</code>\ud83c\uddef\ud83c\uddf2 <code>jordan</code>\ud83c\uddef\ud83c\uddf4 <code>jp</code>\ud83c\uddef\ud83c\uddf5 <code>kenya</code>\ud83c\uddf0\ud83c\uddea <code>kyrgyzstan</code>\ud83c\uddf0\ud83c\uddec <code>cambodia</code>\ud83c\uddf0\ud83c\udded <code>kiribati</code>\ud83c\uddf0\ud83c\uddee <code>comoros</code>\ud83c\uddf0\ud83c\uddf2 <code>st_kitts_nevis</code>\ud83c\uddf0\ud83c\uddf3 <code>north_korea</code>\ud83c\uddf0\ud83c\uddf5 <code>kr</code>\ud83c\uddf0\ud83c\uddf7 <code>kuwait</code>\ud83c\uddf0\ud83c\uddfc <code>cayman_islands</code>\ud83c\uddf0\ud83c\uddfe <code>kazakhstan</code>\ud83c\uddf0\ud83c\uddff <code>laos</code>\ud83c\uddf1\ud83c\udde6 <code>lebanon</code>\ud83c\uddf1\ud83c\udde7 <code>st_lucia</code>\ud83c\uddf1\ud83c\udde8 <code>liechtenstein</code>\ud83c\uddf1\ud83c\uddee <code>sri_lanka</code>\ud83c\uddf1\ud83c\uddf0 <code>liberia</code>\ud83c\uddf1\ud83c\uddf7 <code>lesotho</code>\ud83c\uddf1\ud83c\uddf8 <code>lithuania</code>\ud83c\uddf1\ud83c\uddf9 <code>luxembourg</code>\ud83c\uddf1\ud83c\uddfa <code>latvia</code>\ud83c\uddf1\ud83c\uddfb <code>libya</code>\ud83c\uddf1\ud83c\uddfe <code>morocco</code>\ud83c\uddf2\ud83c\udde6 <code>monaco</code>\ud83c\uddf2\ud83c\udde8 <code>moldova</code>\ud83c\uddf2\ud83c\udde9 <code>montenegro</code>\ud83c\uddf2\ud83c\uddea <code>st_martin</code>\ud83c\uddf2\ud83c\uddeb <code>madagascar</code>\ud83c\uddf2\ud83c\uddec <code>marshall_islands</code>\ud83c\uddf2\ud83c\udded <code>macedonia</code>\ud83c\uddf2\ud83c\uddf0 <code>mali</code>\ud83c\uddf2\ud83c\uddf1 <code>myanmar</code>\ud83c\uddf2\ud83c\uddf2 <code>mongolia</code>\ud83c\uddf2\ud83c\uddf3 <code>macau</code>\ud83c\uddf2\ud83c\uddf4 <code>northern_mariana_islands</code>\ud83c\uddf2\ud83c\uddf5 <code>martinique</code>\ud83c\uddf2\ud83c\uddf6 <code>mauritania</code>\ud83c\uddf2\ud83c\uddf7 <code>montserrat</code>\ud83c\uddf2\ud83c\uddf8 <code>malta</code>\ud83c\uddf2\ud83c\uddf9 <code>mauritius</code>\ud83c\uddf2\ud83c\uddfa <code>maldives</code>\ud83c\uddf2\ud83c\uddfb <code>malawi</code>\ud83c\uddf2\ud83c\uddfc <code>mexico</code>\ud83c\uddf2\ud83c\uddfd <code>malaysia</code>\ud83c\uddf2\ud83c\uddfe <code>mozambique</code>\ud83c\uddf2\ud83c\uddff <code>namibia</code>\ud83c\uddf3\ud83c\udde6 <code>new_caledonia</code>\ud83c\uddf3\ud83c\udde8 <code>niger</code>\ud83c\uddf3\ud83c\uddea <code>norfolk_island</code>\ud83c\uddf3\ud83c\uddeb <code>nigeria</code>\ud83c\uddf3\ud83c\uddec <code>nicaragua</code>\ud83c\uddf3\ud83c\uddee <code>netherlands</code>\ud83c\uddf3\ud83c\uddf1 <code>norway</code>\ud83c\uddf3\ud83c\uddf4 <code>nepal</code>\ud83c\uddf3\ud83c\uddf5 <code>nauru</code>\ud83c\uddf3\ud83c\uddf7 <code>niue</code>\ud83c\uddf3\ud83c\uddfa <code>new_zealand</code>\ud83c\uddf3\ud83c\uddff <code>oman</code>\ud83c\uddf4\ud83c\uddf2 <code>panama</code>\ud83c\uddf5\ud83c\udde6 <code>peru</code>\ud83c\uddf5\ud83c\uddea <code>french_polynesia</code>\ud83c\uddf5\ud83c\uddeb <code>papua_new_guinea</code>\ud83c\uddf5\ud83c\uddec <code>philippines</code>\ud83c\uddf5\ud83c\udded <code>pakistan</code>\ud83c\uddf5\ud83c\uddf0 <code>poland</code>\ud83c\uddf5\ud83c\uddf1 <code>st_pierre_miquelon</code>\ud83c\uddf5\ud83c\uddf2 <code>pitcairn_islands</code>\ud83c\uddf5\ud83c\uddf3 <code>puerto_rico</code>\ud83c\uddf5\ud83c\uddf7 <code>palestinian_territories</code>\ud83c\uddf5\ud83c\uddf8 <code>portugal</code>\ud83c\uddf5\ud83c\uddf9 <code>palau</code>\ud83c\uddf5\ud83c\uddfc <code>paraguay</code>\ud83c\uddf5\ud83c\uddfe <code>qatar</code>\ud83c\uddf6\ud83c\udde6 <code>reunion</code>\ud83c\uddf7\ud83c\uddea <code>romania</code>\ud83c\uddf7\ud83c\uddf4 <code>serbia</code>\ud83c\uddf7\ud83c\uddf8 <code>ru</code>\ud83c\uddf7\ud83c\uddfa <code>rwanda</code>\ud83c\uddf7\ud83c\uddfc <code>saudi_arabia</code>\ud83c\uddf8\ud83c\udde6 <code>solomon_islands</code>\ud83c\uddf8\ud83c\udde7 <code>seychelles</code>\ud83c\uddf8\ud83c\udde8 <code>sudan</code>\ud83c\uddf8\ud83c\udde9 <code>sweden</code>\ud83c\uddf8\ud83c\uddea <code>singapore</code>\ud83c\uddf8\ud83c\uddec <code>st_helena</code>\ud83c\uddf8\ud83c\udded <code>slovenia</code>\ud83c\uddf8\ud83c\uddee <code>svalbard_jan_mayen</code>\ud83c\uddf8\ud83c\uddef <code>slovakia</code>\ud83c\uddf8\ud83c\uddf0 <code>sierra_leone</code>\ud83c\uddf8\ud83c\uddf1 <code>san_marino</code>\ud83c\uddf8\ud83c\uddf2 <code>senegal</code>\ud83c\uddf8\ud83c\uddf3 <code>somalia</code>\ud83c\uddf8\ud83c\uddf4 <code>suriname</code>\ud83c\uddf8\ud83c\uddf7 <code>south_sudan</code>\ud83c\uddf8\ud83c\uddf8 <code>sao_tome_principe</code>\ud83c\uddf8\ud83c\uddf9 <code>el_salvador</code>\ud83c\uddf8\ud83c\uddfb <code>sint_maarten</code>\ud83c\uddf8\ud83c\uddfd <code>syria</code>\ud83c\uddf8\ud83c\uddfe <code>swaziland</code>\ud83c\uddf8\ud83c\uddff <code>tristan_da_cunha</code>\ud83c\uddf9\ud83c\udde6 <code>turks_caicos_islands</code>\ud83c\uddf9\ud83c\udde8 <code>chad</code>\ud83c\uddf9\ud83c\udde9 <code>french_southern_territories</code>\ud83c\uddf9\ud83c\uddeb <code>togo</code>\ud83c\uddf9\ud83c\uddec <code>thailand</code>\ud83c\uddf9\ud83c\udded <code>tajikistan</code>\ud83c\uddf9\ud83c\uddef <code>tokelau</code>\ud83c\uddf9\ud83c\uddf0 <code>timor_leste</code>\ud83c\uddf9\ud83c\uddf1 <code>turkmenistan</code>\ud83c\uddf9\ud83c\uddf2 <code>tunisia</code>\ud83c\uddf9\ud83c\uddf3 <code>tonga</code>\ud83c\uddf9\ud83c\uddf4 <code>tr</code>\ud83c\uddf9\ud83c\uddf7 <code>trinidad_tobago</code>\ud83c\uddf9\ud83c\uddf9 <code>tuvalu</code>\ud83c\uddf9\ud83c\uddfb <code>taiwan</code>\ud83c\uddf9\ud83c\uddfc <code>tanzania</code>\ud83c\uddf9\ud83c\uddff <code>ukraine</code>\ud83c\uddfa\ud83c\udde6 <code>uganda</code>\ud83c\uddfa\ud83c\uddec <code>us_outlying_islands</code>\ud83c\uddfa\ud83c\uddf2 <code>united_nations</code>\ud83c\uddfa\ud83c\uddf3 <code>us</code>\ud83c\uddfa\ud83c\uddf8 <code>uruguay</code>\ud83c\uddfa\ud83c\uddfe <code>uzbekistan</code>\ud83c\uddfa\ud83c\uddff <code>vatican_city</code>\ud83c\uddfb\ud83c\udde6 <code>st_vincent_grenadines</code>\ud83c\uddfb\ud83c\udde8 <code>venezuela</code>\ud83c\uddfb\ud83c\uddea <code>british_virgin_islands</code>\ud83c\uddfb\ud83c\uddec <code>us_virgin_islands</code>\ud83c\uddfb\ud83c\uddee <code>vietnam</code>\ud83c\uddfb\ud83c\uddf3 <code>vanuatu</code>\ud83c\uddfb\ud83c\uddfa <code>wallis_futuna</code>\ud83c\uddfc\ud83c\uddeb <code>samoa</code>\ud83c\uddfc\ud83c\uddf8 <code>kosovo</code>\ud83c\uddfd\ud83c\uddf0 <code>yemen</code>\ud83c\uddfe\ud83c\uddea <code>mayotte</code>\ud83c\uddfe\ud83c\uddf9 <code>south_africa</code>\ud83c\uddff\ud83c\udde6 <code>zambia</code>\ud83c\uddff\ud83c\uddf2 <code>zimbabwe</code>\ud83c\uddff\ud83c\uddfc <code>england</code>\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f <code>scotland</code>\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f <code>wales</code>\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f"},{"location":"examples/","title":"Examples","text":"<p>There are a million ways to use ntfy, but here are some inspirations. I try to collect examples on GitHub, so be sure to check those out, too.</p> <p>Info</p> <p>Many of these examples were contributed by ntfy users. If you have other examples of how you use ntfy, please create a pull request, and I'll happily include it. Also note, that I cannot guarantee that all of these examples are functional. Many of them I have not tried myself.</p>"},{"location":"examples/#cronjobs","title":"Cronjobs","text":"<p>ntfy is perfect for any kind of cronjobs or just when long processes are done (backups, pipelines, rsync copy commands, ...).</p> <p>I started adding notifications pretty much all of my scripts. Typically, I just chain the curl call directly to the command I'm running. The following example will either send Laptop backup succeeded or \u26a0\ufe0f Laptop backup failed directly to my phone:</p> <pre><code>rsync -a root@laptop /backups/laptop \\\n  &amp;&amp; zfs snapshot ... \\\n  &amp;&amp; curl -H prio:low -d \"Laptop backup succeeded\" ntfy.sh/backups \\\n  || curl -H tags:warning -H prio:high -d \"Laptop backup failed\" ntfy.sh/backups\n</code></pre> <p>Here's one for the history books. I desperately want the <code>github.com/ntfy</code> organization, but all my tickets with GitHub have been hopeless. In case it ever becomes available, I want to know immediately.</p> <pre><code># Check github/ntfy user\n*/6 * * * * if curl -s https://api.github.com/users/ntfy | grep \"Not Found\"; then curl -d \"github.com/ntfy is available\" -H \"Tags: tada\" -H \"Prio: high\" ntfy.sh/my-alerts; fi\n</code></pre>"},{"location":"examples/#low-disk-space-alerts","title":"Low disk space alerts","text":"<p>Here's a simple cronjob that I use to alert me when the disk space on the root disk is running low. It's simple, but  effective. </p> <pre><code>#!/bin/bash\n\nmingigs=10\navail=$(df | awk '$6 == \"/\" &amp;&amp; $4 &lt; '$mingigs' * 1024*1024 { print $4/1024/1024 }')\ntopicurl=https://ntfy.sh/mytopic\n\nif [ -n \"$avail\" ]; then\n  curl \\\n    -d \"Only $avail GB available on the root disk. Better clean that up.\" \\\n    -H \"Title: Low disk space alert on $(hostname)\" \\\n    -H \"Priority: high\" \\\n    -H \"Tags: warning,cd\" \\\n    $topicurl\nfi\n</code></pre>"},{"location":"examples/#ssh-login-alerts","title":"SSH login alerts","text":"<p>Years ago my home server was broken into. That shook me hard, so every time someone logs into any machine that I own, I now message myself. Here's an example of how to use PAM to notify yourself on SSH login.</p> /etc/pam.d/sshd/usr/bin/ntfy-ssh-login.sh <pre><code># at the end of the file\nsession optional pam_exec.so /usr/bin/ntfy-ssh-login.sh\n</code></pre> <pre><code>#!/bin/bash\nif [ \"${PAM_TYPE}\" = \"open_session\" ]; then\n  curl \\\n    -H prio:high \\\n    -H tags:warning \\\n    -d \"SSH login: ${PAM_USER} from ${PAM_RHOST}\" \\\n    ntfy.sh/alerts\nfi\n</code></pre>"},{"location":"examples/#collect-data-from-multiple-machines","title":"Collect data from multiple machines","text":"<p>The other day I was running tasks on 20 servers, and I wanted to collect the interim results as a CSV in one place. Each of the servers was publishing to a topic as the results completed (<code>publish-result.sh</code>),  and I had one central collector to grab the results as they came in (<code>collect-results.sh</code>).</p> <p>It looked something like this:</p> collect-results.shpublish-result.sh <pre><code>while read result; do\n  [ -n \"$result\" ] &amp;&amp; echo \"$result\" &gt;&gt; results.csv\ndone &lt; &lt;(stdbuf -i0 -o0 curl -s ntfy.sh/results/raw)\n</code></pre> <pre><code>// This script was run on each of the 20 servers. It was doing heavy processing ...\n\n// Publish script results\ncurl -d \"$(hostname),$count,$time\" ntfy.sh/results\n</code></pre>"},{"location":"examples/#ansible-salt-and-puppet","title":"Ansible, Salt and Puppet","text":"<p>You can easily integrate ntfy into Ansible, Salt, or Puppet to notify you when runs are done or are highstated. One of my co-workers uses the following Ansible task to let him know when things are done:</p> <pre><code>- name: Send ntfy.sh update\n  uri:\n    url: \"https://ntfy.sh/{{ ntfy_channel }}\"\n    method: POST\n    body: \"{{ inventory_hostname }} reseeding complete\"\n</code></pre> <p>There's also a dedicated Ansible action plugin (one which runs on the Ansible controller) called ansible-ntfy. The following task posts a message to ntfy at its default URL (<code>attrs</code> and other attributes are optional):</p> <pre><code>- name: \"Notify ntfy that we're done\"\n  ntfy:\n       msg: \"deployment on {{ inventory_hostname }} is complete. \ud83d\udc04\"\n       attrs:\n          tags: [ heavy_check_mark ]\n          priority: 1\n</code></pre>"},{"location":"examples/#github-actions","title":"GitHub Actions","text":"<p>You can send a message during a workflow run with curl. Here is an example sending info about the repo, commit and job status. <pre><code>- name: Actions Ntfy\n  run: |\n    curl \\\n      -u ${{ secrets.NTFY_CRED }} \\\n      -H \"Title: Title here\" \\\n      -H \"Content-Type: text/plain\" \\\n      -d $'Repo: ${{ github.repository }}\\nCommit: ${{ github.sha }}\\nRef: ${{ github.ref }}\\nStatus: ${{ job.status}}' \\\n      ${{ secrets.NTFY_URL }}\n</code></pre></p>"},{"location":"examples/#changedetectionio","title":"Changedetection.io","text":"<p>ntfy is an excellent choice for getting notifications when a website has a change sent to your mobile (or desktop),  changedetection.io or on GitHub (dgtlmoon/changedetection.io)  uses apprise library for notification integrations.</p> <p>To add any ntfy(s) notification to a website change simply add the ntfy style URL  to the notification list.</p> <p>For example <code>ntfy://{topic}</code> or <code>ntfy://{user}:{password}@{host}:{port}/{topics}</code></p> <p>In your changedetection.io installation, click <code>Edit</code> &gt; <code>Notifications</code> on a single website watch (or group) then add  the special ntfy Apprise Notification URL to the Notification List.</p> <p></p>"},{"location":"examples/#watchtower-shoutrrr","title":"Watchtower (shoutrrr)","text":"<p>You can use shoutrrr to send  Watchtower notifications to your ntfy topic.</p> <p>Example docker-compose.yml:</p> <pre><code>services:\n  watchtower:\n    image: containrrr/watchtower\n    environment:\n      - WATCHTOWER_NOTIFICATION_SKIP_TITLE=True\n      - WATCHTOWER_NOTIFICATION_URL=ntfy://ntfy.sh/my_watchtower_topic?title=WatchtowerUpdates\n</code></pre> <p>The environment variable <code>WATCHTOWER_NOTIFICATION_SKIP_TITLE</code> is required to prevent Watchtower from replacing the <code>title</code> query parameter. If omitted, the provided notification title will not be used.</p> <p>Or, if you only want to send notifications using shoutrrr: <pre><code>shoutrrr send -u \"ntfy://ntfy.sh/my_watchtower_topic?title=WatchtowerUpdates\" -m \"testMessage\"\n</code></pre></p> <p>Authentication tokens are also supported:</p> <ul> <li> <p>(Recommended) Ntfy url format (replace the domain, topic and token with your own): <pre><code>ntfy://:TOKEN@DOMAIN/TOPIC\n</code></pre></p> </li> <li> <p>Generic webhook and authorization header using this url format (replace the domain, topic and token with your own):</p> </li> </ul> <pre><code>generic+https://DOMAIN/TOPIC?@authorization=Bearer+TOKEN`\n</code></pre>"},{"location":"examples/#sonarr-radarr-lidarr-readarr-prowlarr-sabnzbd","title":"Sonarr, Radarr, Lidarr, Readarr, Prowlarr, SABnzbd","text":"<p>Radarr, Prowlarr, and Sonarr v4 support ntfy natively under Settings &gt; Connect.</p> <p>Sonarr v3, Readarr, and SABnzbd support custom scripts for downloads, warnings, grabs, etc. Some simple bash scripts to achieve this are kindly provided in nickexyz's ntfy-shellscripts repository.</p>"},{"location":"examples/#node-red","title":"Node-RED","text":"<p>You can use the HTTP request node to send messages with Node-RED, some examples:</p> Example: Send a message (click to expand) <pre><code>[\n    {\n        \"id\": \"c956e688cc74ad8e\",\n        \"type\": \"http request\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"ntfy.sh\",\n        \"method\": \"POST\",\n        \"ret\": \"txt\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://ntfy.sh/mytopic\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"credentials\":\n        {\n            \"user\": \"\",\n            \"password\": \"\"\n        },\n        \"x\": 590,\n        \"y\": 3160,\n        \"wires\":\n        [\n            []\n        ]\n    },\n    {\n        \"id\": \"32ee1eade51fae50\",\n        \"type\": \"function\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"data\",\n        \"func\": \"msg.payload = \\\"Something happened\\\";\\nmsg.headers = {};\\nmsg.headers['tags'] = 'house';\\nmsg.headers['X-Title'] = 'Home Assistant';\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 470,\n        \"y\": 3160,\n        \"wires\":\n        [\n            [\n                \"c956e688cc74ad8e\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b287e59cd2311815\",\n        \"type\": \"inject\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"Manual start\",\n        \"props\":\n        [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": \"20\",\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 330,\n        \"y\": 3160,\n        \"wires\":\n        [\n            [\n                \"32ee1eade51fae50\"\n            ]\n        ]\n    }\n]\n</code></pre> <p></p> Example: Send a picture (click to expand) <pre><code>[\n    {\n        \"id\": \"d135a13eadeb9d6d\",\n        \"type\": \"http request\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"Download image\",\n        \"method\": \"GET\",\n        \"ret\": \"bin\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"credentials\":\n        {\n            \"user\": \"\",\n            \"password\": \"\"\n        },\n        \"x\": 490,\n        \"y\": 3320,\n        \"wires\":\n        [\n            [\n                \"6e75bc41d2ec4a03\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"6e75bc41d2ec4a03\",\n        \"type\": \"function\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"data\",\n        \"func\": \"msg.payload = msg.payload;\\nmsg.headers = {};\\nmsg.headers['tags'] = 'house';\\nmsg.headers['X-Title'] = 'Home Assistant - Picture';\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 650,\n        \"y\": 3320,\n        \"wires\":\n        [\n            [\n                \"eb160615b6ceda98\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"eb160615b6ceda98\",\n        \"type\": \"http request\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"ntfy.sh\",\n        \"method\": \"PUT\",\n        \"ret\": \"bin\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://ntfy.sh/mytopic\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"credentials\":\n        {\n            \"user\": \"\",\n            \"password\": \"\"\n        },\n        \"x\": 770,\n        \"y\": 3320,\n        \"wires\":\n        [\n            []\n        ]\n    },\n    {\n        \"id\": \"5b8dbf15c8a7a3a5\",\n        \"type\": \"inject\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"Manual start\",\n        \"props\":\n        [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": \"20\",\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 310,\n        \"y\": 3320,\n        \"wires\":\n        [\n            [\n                \"d135a13eadeb9d6d\"\n            ]\n        ]\n    }\n]\n</code></pre> <p></p>"},{"location":"examples/#gatus","title":"Gatus","text":"<p>To use ntfy with Gatus, you can use the <code>ntfy</code> alerting provider like so:</p> <pre><code>alerting:\n  ntfy:\n    url: \"https://ntfy.sh\"\n    topic: \"YOUR_NTFY_TOPIC\"\n    priority: 3\n</code></pre> <p>For more information on using ntfy with Gatus, refer to Configuring ntfy alerts.</p> Alternative: Using the custom alerting provider <pre><code>alerting:\n  custom:\n    url: \"https://ntfy.sh\"\n    method: \"POST\"\n    body: |\n      {\n        \"topic\": \"mytopic\",\n        \"message\": \"[ENDPOINT_NAME] - [ALERT_DESCRIPTION]\",\n        \"title\": \"Gatus\",\n        \"tags\": [\"[ALERT_TRIGGERED_OR_RESOLVED]\"],\n        \"priority\": 3\n      }\n    default-alert:\n      enabled: true\n      description: \"health check failed\"\n      send-on-resolved: true\n      failure-threshold: 3\n      success-threshold: 3\n    placeholders:\n      ALERT_TRIGGERED_OR_RESOLVED:\n        TRIGGERED: \"warning\"\n        RESOLVED: \"white_check_mark\"\n</code></pre>"},{"location":"examples/#jellyseerroverseerr-webhook","title":"Jellyseerr/Overseerr webhook","text":"<p>Here is an example for jellyseerr/overseerr webhook JSON payload. Remember to change the <code>https://request.example.com</code> to your URL as the value of the JSON key click.  And if you're not using the request <code>topic</code>, make sure to change it in the JSON payload to your topic.</p> <pre><code>{\n    \"topic\": \"requests\",\n    \"title\": \"{{event}}\",\n    \"message\": \"{{subject}}\\n{{message}}\\n\\nRequested by: {{requestedBy_username}}\\n\\nStatus: {{media_status}}\\nRequest Id: {{request_id}}\",\n    \"priority\": 4,\n    \"attach\": \"{{image}}\",\n    \"click\": \"https://requests.example.com/{{media_type}}/{{media_tmdbid}}\"\n}\n</code></pre>"},{"location":"examples/#home-assistant","title":"Home Assistant","text":"<p>Here is an example for the configuration.yml file to setup a REST notify component. Since Home Assistant is going to POST JSON, you need to specify the root of your ntfy resource.</p> <pre><code>notify:\n  - name: ntfy\n    platform: rest\n    method: POST_JSON\n    data:\n      topic: YOUR_NTFY_TOPIC\n    title_param_name: title\n    message_param_name: message\n    resource: https://ntfy.sh\n</code></pre> <p>If you need to authenticate to your ntfy resource, define the authentication, username and password as below:</p> <pre><code>notify:\n  - name: ntfy\n    platform: rest\n    method: POST_JSON\n    authentication: basic\n    username: YOUR_USERNAME\n    password: YOUR_PASSWORD\n    data:\n      topic: YOUR_NTFY_TOPIC\n    title_param_name: title\n    message_param_name: message\n    resource: https://ntfy.sh\n</code></pre> <p>If you need to add any other ntfy specific parameters such as priority, tags, etc., add them to the <code>data</code> array in the example yml. For example:</p> <pre><code>notify:\n  - name: ntfy\n    platform: rest\n    method: POST_JSON\n    data:\n      topic: YOUR_NTFY_TOPIC\n      priority: 4\n    title_param_name: title\n    message_param_name: message\n    resource: https://ntfy.sh\n</code></pre>"},{"location":"examples/#uptime-kuma","title":"Uptime Kuma","text":"<p>Go to your Uptime Kuma Settings &gt; Notifications, click on Setup Notification. Then set your desired title (e.g. \"Uptime Kuma\"), ntfy topic, Server URL and priority (1-5):</p> <p>You can now test the notifications and apply them to monitors:</p>"},{"location":"examples/#uptimerobot","title":"UptimeRobot","text":"<p>Go to your UptimeRobot My Settings &gt; Alert Contacts &gt; Add Alert Contact Select Alert Contact Type = Webhook. Then set your desired Friendly Name (e.g. \"ntfy-sh-UP\"), URL to Notify, POST value and select checkbox Send as JSON (application/json). Make sure to send the JSON POST request to ntfy.domain.com without the topic name in the url and include the \"topic\" name in the JSON body.</p> <p><pre><code>{\n    \"topic\":\"myTopic\",\n    \"title\": \"*monitorFriendlyName* *alertTypeFriendlyName*\",\n    \"message\": \"*alertDetails*\", \n    \"tags\": [\"green_circle\"],\n    \"priority\": 3,\n    \"click\": https://uptimerobot.com/dashboard#*monitorID*\n}\n</code></pre> You can create two Alert Contacts each with a different icon and priority, for example:</p> <p><pre><code>{\n    \"topic\":\"myTopic\",\n    \"title\": \"*monitorFriendlyName* *alertTypeFriendlyName*\",\n    \"message\": \"*alertDetails*\", \n    \"tags\": [\"red_circle\"],\n    \"priority\": 3,\n    \"click\": https://uptimerobot.com/dashboard#*monitorID*\n}\n</code></pre> You can now add the created Alerts Contact(s) to the monitor(s) and test the notifications:</p>"},{"location":"examples/#apprise","title":"Apprise","text":"<p>ntfy is integrated natively into Apprise (also check out the  Apprise/ntfy wiki page).</p> <p>You can use it like this:</p> <pre><code>apprise -vv -t \"Test Message Title\" -b \"Test Message Body\" \\\n   ntfy://mytopic\n</code></pre> <p>Or with your own server like this:</p> <pre><code>apprise -vv -t \"Test Message Title\" -b \"Test Message Body\" \\\n   ntfy://ntfy.example.com/mytopic\n</code></pre>"},{"location":"examples/#rundeck","title":"Rundeck","text":"<p>Rundeck by default sends only HTML email which is not processed by ntfy SMTP server. Append following configurations to  rundeck-config.properties :</p> <pre><code># Template\nrundeck.mail.template.file=/path/to/template.html\nrundeck.mail.template.log.formatted=false\n</code></pre> <p>Example <code>template.html</code>: <pre><code>&lt;div&gt;Execution ${execution.id} was &lt;b&gt;${execution.status}&lt;/b&gt;&lt;/div&gt;\n&lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"${execution.href}\"&gt;Execution result&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"${job.href}\"&gt;Job&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"${execution.projectHref}\"&gt;Project: ${execution.project}&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"${rundeck.href}\"&gt;Rundeck&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></p> <p>Add notification on Rundeck (attachment type must be: <code>Attached as file to email</code>): </p>"},{"location":"examples/#traccar","title":"Traccar","text":"<p>This will only work on selfhosted traccar (Github) instances, as you need to be able to set <code>sms.http.*</code> keys, which is not possible through the UI attributes</p> <p>The easiest way to integrate traccar with ntfy, is to configure ntfy as the SMS provider for your instance. You then can set your ntfy topic as your account's phone number in traccar. Sending the email notifications to ntfy will not work, as ntfy does not support HTML emails.</p> <p>Info: Add a phone number to your traccar account not in device, as otherwise it will not try to send SMS.</p> <p>Caution: JSON publishing is only possible, when POST-ing to the root URL of the ntfy instance. (see documentation) <pre><code>        &lt;entry key='sms.http.url'&gt;https://ntfy.sh&lt;/entry&gt;\n        &lt;entry key='sms.http.template'&gt;\n            {\n                \"topic\": \"{phone}\",\n                \"message\": \"{message}\"\n            }\n        &lt;/entry&gt;\n</code></pre> If access control is enabled, and the target topic does not support anonymous writes, you'll also have to provide an authorization header, for example in form of a privileged token <pre><code>        &lt;entry key='sms.http.authorization'&gt;Bearer tk_JhbsnoMrgy2FcfHeofv97Pi5uXaZZ&lt;/entry&gt;\n</code></pre> or by simply providing traccar with a valid username/password combination. <pre><code>        &lt;entry key='sms.http.user'&gt;phil&lt;/entry&gt;\n        &lt;entry key='sms.http.password'&gt;mypass&lt;/entry&gt;\n</code></pre></p>"},{"location":"faq/","title":"Frequently asked questions (FAQ)","text":""},{"location":"faq/#isnt-this-like","title":"Isn't this like ...?","text":"<p>Who knows. I didn't do a lot of research before making this. It was fun making it.</p>"},{"location":"faq/#can-i-use-this-in-my-app-will-it-stay-free","title":"Can I use this in my app? Will it stay free?","text":"<p>Yes. As long as you don't abuse it, it'll be available and free of charge. While I will always allow usage of the ntfy.sh server without signup and free of charge, I may also offer paid plans in the future.</p>"},{"location":"faq/#what-are-the-uptime-guarantees","title":"What are the uptime guarantees?","text":"<p>Best effort. </p> <p>ntfy currently runs on a single DigitalOcean droplet, without any scale out strategy or redundancies. When the time comes, I'll add scale out features, but for now it is what it is.</p> <p>In the first year of its life, and to this day (Dec'22), ntfy had no outages that I can remember. Other than short  blips and some HTTP 500 spikes, it has been rock solid.   </p> <p>There is a status page which is updated based on some automated checks via the amazingly  awesome healthchecks.io (no affiliation, just a fan).</p>"},{"location":"faq/#what-happens-if-there-are-multiple-subscribers-to-the-same-topic","title":"What happens if there are multiple subscribers to the same topic?","text":"<p>As per usual with pub-sub, all subscribers receive notifications if they are subscribed to a topic.</p>"},{"location":"faq/#will-you-know-what-topics-exist-can-you-spy-on-me","title":"Will you know what topics exist, can you spy on me?","text":"<p>If you don't trust me or your messages are sensitive, run your own server. It's open source. That said, the logs do contain topic names and IP addresses, but I don't use them for anything other than troubleshooting and rate limiting. Messages are cached for the duration configured in <code>server.yml</code> (12h by default)  to facilitate service restarts, message polling and to overcome client network disruptions.</p>"},{"location":"faq/#can-i-self-host-it","title":"Can I self-host it?","text":"<p>Yes. The server (including this Web UI) can be self-hosted, and the Android/iOS app supports adding topics from your own server as well. Check out the install instructions.</p>"},{"location":"faq/#is-firebase-used","title":"Is Firebase used?","text":"<p>In addition to caching messages locally and delivering them to long-polling subscribers, all messages are also published to Firebase Cloud Messaging (FCM) (if <code>FirebaseKeyFile</code> is set, which it is on ntfy.sh). This is to facilitate notifications on Android. </p> <p>If you do not care for Firebase, I suggest you install the F-Droid version of the app and self-host your own ntfy server.</p>"},{"location":"faq/#how-much-battery-does-the-android-app-use","title":"How much battery does the Android app use?","text":"<p>If you use the ntfy.sh server, and you don't use the instant delivery feature,  the Android/iOS app uses no additional battery, since Firebase Cloud Messaging (FCM) is used. If you use your own server,  or you use instant delivery (Android only),  or install from F-droid (which does not support FCM), the app has to maintain a constant connection to the server, which consumes about 0-1% of battery in 17h of use (on my phone).  There has been a ton of testing and improvement around this. I think it's pretty decent now.</p>"},{"location":"faq/#paid-plans-i-thought-it-was-open-source","title":"Paid plans? I thought it was open source?","text":"<p>All of ntfy will remain open source, with a free software license (Apache 2.0 and GPLv2). If you'd like to self-host, you can (and should do that). The paid plans I am offering are for people that do not want to self-host, and/or need higher limits.</p>"},{"location":"faq/#what-is-instant-delivery","title":"What is instant delivery?","text":"<p>Instant delivery is a feature in the Android app. If turned on, the app maintains a constant connection to the server and listens for incoming notifications. This consumes additional battery (see above), but delivers notifications instantly.</p>"},{"location":"faq/#can-you-implement-feature-x","title":"Can you implement feature X?","text":"<p>Yes, maybe. Check out existing GitHub issues to see if somebody else had the same idea before you, or file a new issue. I'll likely get back to you within a few days.</p>"},{"location":"faq/#im-having-issues-with-ios-can-you-help-the-ios-app-is-behind-compared-to-the-android-app-can-you-fix-that","title":"I'm having issues with iOS, can you help? The iOS app is behind compared to the Android app, can you fix that?","text":"<p>The iOS is very bare bones and quite frankly a little buggy. I wanted to get something out the door to make the iOS users happy, but halfway through I got frustrated with iOS development and paused development. I will eventually get back to it, or hopefully, somebody else will come along and help out. Please review the known issues for details.</p>"},{"location":"faq/#can-i-disable-the-web-app-can-i-protect-it-with-a-login-screen","title":"Can I disable the web app? Can I protect it with a login screen?","text":"<p>The web app is a static website without a backend (other than the ntfy API). All data is stored locally in the browser cache and local storage. That means it does not need to be protected with a login screen, and it poses no additional  security risk. So technically, it does not need to be disabled.</p> <p>However, if you still want to disable it, you can do so with the <code>web-root: disable</code> option in the <code>server.yml</code> file. </p> <p>Think of the ntfy web app like an Android/iOS app. It is freely available and accessible to anyone, yet useless without a proper backend. So as long as you secure your backend with ACLs, exposing the ntfy web app to the Internet is harmless.</p>"},{"location":"faq/#if-topic-names-are-public-could-i-not-just-brute-force-them","title":"If topic names are public, could I not just brute force them?","text":"<p>If you don't have ACLs set up, the topic name is your password, it says so everywhere. If you choose a easy-to-guess/dumb topic name, people will be able to guess it. If you choose a randomly generated topic name, the topic is as good as a good password.</p> <p>As for brute forcing: It's not possible to brute force a ntfy server for very long, as you'll get quickly rate limited. In the default configuration, you'll be able to do 60 requests as a burst, and then 1 request per 10 seconds. Assuming you choose a random 10 digit topic name using only A-Z, a-z, 0-9, _ and -, there are 64^10 possible topic names. Even if you could do hundreds of requests per seconds (which you cannot), it would take many years to brute force a topic name.</p> <p>For ntfy.sh, there's even a fail2ban in place which will ban your IP pretty quickly.</p>"},{"location":"faq/#where-can-i-donate","title":"Where can I donate?","text":"<p>I have just very recently started accepting donations via GitHub Sponsors. I would be humbled if you helped me carry the server and developer account costs. Even small donations are very much appreciated.</p>"},{"location":"faq/#can-i-email-you-can-i-dm-you-on-discordmatrix","title":"Can I email you? Can I DM you on Discord/Matrix?","text":"<p>While I love chatting on Discord, Matrix,  Lemmy, or GitHub, I generally  do not respond to emails about ntfy or direct messages about ntfy, unless you are paying for a  ntfy Pro plan, or you are inquiring about business opportunities. </p> <p>I am sorry, but answering individual questions about ntfy on a 1-on-1 basis is not scalable. Answering your questions  in the above-mentioned forums benefits others, since I can link to the discussion at a later point in time, or other users may be able to help out. I hope you understand.</p>"},{"location":"install/","title":"Installing ntfy","text":"<p>The <code>ntfy</code> CLI allows you to publish messages, subscribe to topics as well as to self-host your own ntfy server. It's all pretty straight forward. Just install the binary, package or Docker image,  configure it and run it. Just like any other software. No fuzz. </p> <p>Info</p> <p>The following steps are only required if you want to self-host your own ntfy server or you want to use the ntfy CLI. If you just want to send messages using ntfy.sh, you don't need to install anything. You can just use <code>curl</code>.</p>"},{"location":"install/#general-steps","title":"General steps","text":"<p>The ntfy server comes as a statically linked binary and is shipped as tarball, deb/rpm packages and as a Docker image. We support amd64, armv7 and arm64.</p> <ol> <li>Install ntfy using one of the methods described below</li> <li>Then (optionally) edit <code>/etc/ntfy/server.yml</code> for the server (Linux only, see configuration or sample server.yml)</li> <li>Or (optionally) create/edit <code>~/.config/ntfy/client.yml</code> (for the non-root user), <code>~/Library/Application Support/ntfy/client.yml</code> (for the macOS non-root user), or <code>/etc/ntfy/client.yml</code> (for the root user), see sample client.yml)</li> </ol> <p>To run the ntfy server, then just run <code>ntfy serve</code> (or <code>systemctl start ntfy</code> when using the deb/rpm). To send messages, use <code>ntfy publish</code>. To subscribe to topics, use <code>ntfy subscribe</code> (see subscribing via CLI for details). </p> <p>If you like tutorials, check out  Kris Occhipinti's ntfy install guide on YouTube, or Alex's Docker-based setup guide. Both are great resources to get started. I am not affiliated with Kris or Alex, I just liked their video/post.</p>"},{"location":"install/#linux-binaries","title":"Linux binaries","text":"<p>Please check out the releases page for binaries and deb/rpm packages.</p> x86_64/amd64armv6armv7/armhfarm64 <pre><code>wget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_amd64.tar.gz\ntar zxvf ntfy_2.11.0_linux_amd64.tar.gz\nsudo cp -a ntfy_2.11.0_linux_amd64/ntfy /usr/local/bin/ntfy\nsudo mkdir /etc/ntfy &amp;&amp; sudo cp ntfy_2.11.0_linux_amd64/{client,server}/*.yml /etc/ntfy\nsudo ntfy serve\n</code></pre> <pre><code>wget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_armv6.tar.gz\ntar zxvf ntfy_2.11.0_linux_armv6.tar.gz\nsudo cp -a ntfy_2.11.0_linux_armv6/ntfy /usr/bin/ntfy\nsudo mkdir /etc/ntfy &amp;&amp; sudo cp ntfy_2.11.0_linux_armv6/{client,server}/*.yml /etc/ntfy\nsudo ntfy serve\n</code></pre> <pre><code>wget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_armv7.tar.gz\ntar zxvf ntfy_2.11.0_linux_armv7.tar.gz\nsudo cp -a ntfy_2.11.0_linux_armv7/ntfy /usr/bin/ntfy\nsudo mkdir /etc/ntfy &amp;&amp; sudo cp ntfy_2.11.0_linux_armv7/{client,server}/*.yml /etc/ntfy\nsudo ntfy serve\n</code></pre> <pre><code>wget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_arm64.tar.gz\ntar zxvf ntfy_2.11.0_linux_arm64.tar.gz\nsudo cp -a ntfy_2.11.0_linux_arm64/ntfy /usr/bin/ntfy\nsudo mkdir /etc/ntfy &amp;&amp; sudo cp ntfy_2.11.0_linux_arm64/{client,server}/*.yml /etc/ntfy\nsudo ntfy serve\n</code></pre>"},{"location":"install/#debianubuntu-repository","title":"Debian/Ubuntu repository","text":"<p>Installation via Debian repository:</p> x86_64/amd64armv7/armhfarm64 <pre><code>sudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg\nsudo apt install apt-transport-https\nsudo sh -c \"echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\\n    &gt; /etc/apt/sources.list.d/archive.heckel.io.list\"  \nsudo apt update\nsudo apt install ntfy\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n</code></pre> <pre><code>sudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg\nsudo apt install apt-transport-https\nsudo sh -c \"echo 'deb [arch=armhf signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\\n    &gt; /etc/apt/sources.list.d/archive.heckel.io.list\"\nsudo apt update\nsudo apt install ntfy\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n</code></pre> <pre><code>sudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg\nsudo apt install apt-transport-https\nsudo sh -c \"echo 'deb [arch=arm64 signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\\n    &gt; /etc/apt/sources.list.d/archive.heckel.io.list\"\nsudo apt update\nsudo apt install ntfy\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n</code></pre> <p>Manually installing the .deb file:</p> x86_64/amd64armv6armv7/armhfarm64 <pre><code>wget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_amd64.deb\nsudo dpkg -i ntfy_*.deb\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n</code></pre> <pre><code>wget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_armv6.deb\nsudo dpkg -i ntfy_*.deb\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n</code></pre> <pre><code>wget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_armv7.deb\nsudo dpkg -i ntfy_*.deb\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n</code></pre> <pre><code>wget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_arm64.deb\nsudo dpkg -i ntfy_*.deb\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n</code></pre>"},{"location":"install/#fedorarhelcentos","title":"Fedora/RHEL/CentOS","text":"x86_64/amd64armv6armv7/armhfarm64 <pre><code>sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_amd64.rpm\nsudo systemctl enable ntfy \nsudo systemctl start ntfy\n</code></pre> <pre><code>sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_armv6.rpm\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n</code></pre> <pre><code>sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_armv7.rpm\nsudo systemctl enable ntfy \nsudo systemctl start ntfy\n</code></pre> <pre><code>sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_arm64.rpm\nsudo systemctl enable ntfy \nsudo systemctl start ntfy\n</code></pre>"},{"location":"install/#arch-linux","title":"Arch Linux","text":"<p>ntfy can be installed using an AUR package.  You can use an AUR helper like <code>paru</code>, <code>yay</code> or others to download,  build and install ntfy and keep it up to date. <pre><code>paru -S ntfysh-bin\n</code></pre></p> <p>Alternatively, run the following commands to install ntfy manually: <pre><code>curl https://aur.archlinux.org/cgit/aur.git/snapshot/ntfysh-bin.tar.gz | tar xzv\ncd ntfysh-bin\nmakepkg -si\n</code></pre></p>"},{"location":"install/#nixos-nix","title":"NixOS / Nix","text":"<p>ntfy is packaged in nixpkgs as <code>ntfy-sh</code>. It can be installed by adding the package name to the configuration file and calling <code>nixos-rebuild</code>. Alternatively, the following command can be used to install ntfy in the current user environment: <pre><code>nix-env -iA ntfy-sh\n</code></pre></p> <p>NixOS also supports declarative setup of the ntfy server. </p>"},{"location":"install/#macos","title":"macOS","text":"<p>The ntfy CLI (<code>ntfy publish</code> and <code>ntfy subscribe</code> only) is supported on macOS as well.  To install, please download the tarball,  extract it and place it somewhere in your <code>PATH</code> (e.g. <code>/usr/local/bin/ntfy</code>). </p> <p>If run as <code>root</code>, ntfy will look for its config at <code>/etc/ntfy/client.yml</code>. For all other users, it'll look for it at  <code>~/Library/Application Support/ntfy/client.yml</code> (sample included in the tarball).</p> <pre><code>curl -L https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_darwin_all.tar.gz &gt; ntfy_2.11.0_darwin_all.tar.gz\ntar zxvf ntfy_2.11.0_darwin_all.tar.gz\nsudo cp -a ntfy_2.11.0_darwin_all/ntfy /usr/local/bin/ntfy\nmkdir ~/Library/Application\\ Support/ntfy \ncp ntfy_2.11.0_darwin_all/client/client.yml ~/Library/Application\\ Support/ntfy/client.yml\nntfy --help\n</code></pre> <p>Info</p> <p>Only the ntfy CLI is supported on macOS. ntfy server is currently not supported, but you can build and run it for  development as well. Check out the build instructions for details.</p>"},{"location":"install/#homebrew","title":"Homebrew","text":"<p>To install the ntfy CLI (<code>ntfy publish</code> and <code>ntfy subscribe</code> only) via Homebrew (Linux and macOS), simply run: <pre><code>brew install ntfy\n</code></pre></p>"},{"location":"install/#windows","title":"Windows","text":"<p>The ntfy CLI (<code>ntfy publish</code> and <code>ntfy subscribe</code> only) is supported on Windows as well. To install, please download the latest ZIP, extract it and place the <code>ntfy.exe</code> binary somewhere in your <code>%Path%</code>. </p> <p>The default path for the client config file is at <code>%AppData%\\ntfy\\client.yml</code> (not created automatically, sample in the ZIP file).</p> <p>Also available in Scoop's Main repository:</p> <p><code>scoop install ntfy</code></p> <p>Info</p> <p>There is currently no installer for Windows, and the binary is not signed. If this is desired, please create a GitHub issue to let me know.</p>"},{"location":"install/#docker","title":"Docker","text":"<p>The ntfy image is available for amd64, armv6, armv7 and arm64. It should  be pretty straight forward to use.</p> <p>The server exposes its web UI and the API on port 80, so you need to expose that in Docker. To use the persistent  message cache, you also need to map a volume to <code>/var/cache/ntfy</code>. To change other settings,  you should map <code>/etc/ntfy</code>, so you can edit <code>/etc/ntfy/server.yml</code>.</p> <p>Info</p> <p>Note that the Docker image does not contain a <code>/etc/ntfy/server.yml</code> file. If you'd like to use a config file,  please manually create one outside the image and map it as a volume, e.g. via <code>-v /etc/ntfy:/etc/ntfy</code>. You may use the <code>server.yml</code> file on GitHub as a template.</p> <p>Basic usage (no cache or additional config): <pre><code>docker run -p 80:80 -it binwiederhier/ntfy serve\n</code></pre></p> <p>With persistent cache (configured as command line arguments): <pre><code>docker run \\\n  -v /var/cache/ntfy:/var/cache/ntfy \\\n  -p 80:80 \\\n  -it \\\n  binwiederhier/ntfy \\\n    serve \\\n    --cache-file /var/cache/ntfy/cache.db\n</code></pre></p> <p>With other config options, timezone, and non-root user (configured via <code>/etc/ntfy/server.yml</code>, see configuration for details): <pre><code>docker run \\\n  -v /etc/ntfy:/etc/ntfy \\\n  -e TZ=UTC \\\n  -p 80:80 \\\n  -u UID:GID \\\n  -it \\\n  binwiederhier/ntfy \\\n  serve\n</code></pre></p> <p>Using docker-compose with non-root user and healthchecks enabled: <pre><code>version: \"2.3\"\n\nservices:\n  ntfy:\n    image: binwiederhier/ntfy\n    container_name: ntfy\n    command:\n      - serve\n    environment:\n      - TZ=UTC    # optional: set desired timezone\n    user: UID:GID # optional: replace with your own user/group or uid/gid\n    volumes:\n      - /var/cache/ntfy:/var/cache/ntfy\n      - /etc/ntfy:/etc/ntfy\n    ports:\n      - 80:80\n    healthcheck: # optional: remember to adapt the host:port to your environment\n        test: [\"CMD-SHELL\", \"wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\\\"healthy\\\"\\\\s*:\\\\s*true' || exit 1\"]\n        interval: 60s\n        timeout: 10s\n        retries: 3\n        start_period: 40s\n    restart: unless-stopped\n</code></pre></p> <p>If using a non-root user when running the docker version, be sure to chown the server.yml, user.db, and cache.db files and attachments directory to the same uid/gid.</p> <p>Alternatively, you may wish to build a customized Docker image that can be run with fewer command-line arguments and without delivering the configuration file separately. <pre><code>FROM binwiederhier/ntfy\nCOPY server.yml /etc/ntfy/server.yml\nENTRYPOINT [\"ntfy\", \"serve\"]\n</code></pre> This image can be pushed to a container registry and shipped independently. All that's needed when running it is mapping ntfy's port to a host port.</p>"},{"location":"install/#kubernetes","title":"Kubernetes","text":"<p>The setup for Kubernetes is very similar to that for Docker, and requires a fairly minimal deployment or pod definition to function. There are a few options to mix and match, including a deployment without a cache file, a stateful set with a persistent cache, and a standalone unmanned pod.</p> deploymentstateful setpod <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ntfy\nspec:\n  selector:\n    matchLabels:\n      app: ntfy\n  template:\n    metadata:\n      labels:\n        app: ntfy\n    spec:\n      containers:\n      - name: ntfy\n        image: binwiederhier/ntfy\n        args: [\"serve\"]\n        resources:\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        ports:\n        - containerPort: 80\n          name: http\n        volumeMounts:\n        - name: config\n          mountPath: \"/etc/ntfy\"\n          readOnly: true\n      volumes:\n        - name: config\n          configMap:\n            name: ntfy\n---\n# Basic service for port 80\napiVersion: v1\nkind: Service\nmetadata:\n  name: ntfy\nspec:\n  selector:\n    app: ntfy\n  ports:\n  - port: 80\n    targetPort: 80\n</code></pre> <pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: ntfy\nspec:\n  selector:\n    matchLabels:\n      app: ntfy\n  serviceName: ntfy\n  template:\n    metadata:\n      labels:\n        app: ntfy\n    spec:\n      containers:\n      - name: ntfy\n        image: binwiederhier/ntfy\n        args: [\"serve\", \"--cache-file\", \"/var/cache/ntfy/cache.db\"]\n        ports:\n        - containerPort: 80\n          name: http\n        volumeMounts:\n        - name: config\n          mountPath: \"/etc/ntfy\"\n          readOnly: true\n        - name: cache\n          mountPath: \"/var/cache/ntfy\"\n      volumes:\n        - name: config\n          configMap:\n            name: ntfy\n  volumeClaimTemplates:\n  - metadata:\n      name: cache\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 1Gi\n</code></pre> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    app: ntfy\nspec:\n  containers:\n  - name: ntfy\n    image: binwiederhier/ntfy\n    args: [\"serve\"]\n    resources:\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n    ports:\n    - containerPort: 80\n      name: http\n    volumeMounts:\n    - name: config\n      mountPath: \"/etc/ntfy\"\n      readOnly: true\n  volumes:\n    - name: config\n      configMap:\n        name: ntfy\n</code></pre> <p>Configuration is relatively straightforward. As an example, a minimal configuration is provided.</p> resource definitionfrom-file <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ntfy\ndata:\n  server.yml: |\n    # Template: https://github.com/binwiederhier/ntfy/blob/main/server/server.yml\n    base-url: https://ntfy.sh\n</code></pre> <pre><code>kubectl create configmap ntfy --from-file=server.yml \n</code></pre>"},{"location":"install/#kustomize","title":"Kustomize","text":"<p>ntfy can be deployed in a Kubernetes cluster with Kustomize, a tool used to customize Kubernetes objects using a <code>kustomization.yaml</code> file.</p> <ol> <li>Create new folder - <code>ntfy</code></li> <li>Add all files listed below <ol> <li><code>kustomization.yaml</code> - stores all configmaps and resources used in a deployment</li> <li><code>ntfy-deployment.yaml</code> - define deployment type and its parameters</li> <li><code>ntfy-pvc.yaml</code> - describes how persistent volumes will be created </li> <li><code>ntfy-svc.yaml</code> - expose application to the internal kubernetes network</li> <li><code>ntfy-ingress.yaml</code> - expose service to outside the network using ingress controller</li> <li><code>server.yaml</code> - simple server configuration</li> </ol> </li> <li>Replace TESTNAMESPACE within <code>kustomization.yaml</code> with designated namespace </li> <li>Replace ntfy.test within <code>ntfy-ingress.yaml</code> with desired DNS name</li> <li>Apply configuration to cluster set in current context: </li> </ol> <pre><code>kubectl apply -k /ntfy\n</code></pre> kustomization.yamlntfy-deployment.yamlntfy-pvc.yamlntfy-svc.yamlntfy-ingress.yamlserver.yml <pre><code>apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ntfy-deployment.yaml # deployment definition\n  - ntfy-svc.yaml # service connecting pods to cluster network\n  - ntfy-pvc.yaml # pvc used to store cache and attachment\n  - ntfy-ingress.yaml # ingress definition\nconfigMapGenerator: # will parse config from raw config to configmap,it allows for dynamic reload of application if additional app is deployed ie https://github.com/stakater/Reloader\n    - name: server-config\n      files: \n        - server.yml\nnamespace: TESTNAMESPACE # select namespace for whole application \n</code></pre> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ntfy-deployment\n  labels:\n    app: ntfy-deployment\nspec:\n  revisionHistoryLimit: 1\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ntfy-pod\n  template:\n    metadata:\n      labels:\n        app: ntfy-pod\n    spec:\n      containers:\n        - name: ntfy \n          image: binwiederhier/ntfy:v1.28.0 # set deployed version\n          args: [\"serve\"]\n          env:  #example of adjustments made in environmental variables\n            - name: TZ # set timezone\n              value: XXXXXXX\n            - name: NTFY_DEBUG # enable/disable debug\n              value: \"false\"\n            - name: NTFY_LOG_LEVEL # adjust log level\n              value: INFO\n            - name: NTFY_BASE_URL # add base url\n              value: XXXXXXXXXX \n          ports: \n            - containerPort: 80\n              name: http-ntfy\n          resources:\n            limits:\n              memory: 300Mi\n              cpu:  200m\n            requests:\n                  cpu: 150m\n                  memory: 150Mi\n          volumeMounts:\n              - mountPath: /etc/ntfy/server.yml\n                subPath: server.yml\n                name: config-volume # generated vie configMapGenerator from kustomization file\n              - mountPath: /var/cache/ntfy\n                name: cache-volume #cache volume mounted to persistent volume\n        volumes:\n          - name: config-volume\n            configMap:  # uses configmap generator to parse server.yml to configmap\n              name: server-config\n          - name: cache-volume\n            persistentVolumeClaim: # stores /cache/ntfy in defined pv\n              claimName: ntfy-pvc\n</code></pre> <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ntfy-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: local-path # adjust storage if needed\n  resources:\n    requests:\n      storage: 1Gi\n</code></pre> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: ntfy-svc  \nspec:\n  type: ClusterIP\n  selector:\n    app: ntfy-pod\n  ports:\n    - name: http-ntfy-out\n      protocol: TCP\n      port: 80\n      targetPort:  http-ntfy\n</code></pre> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ntfy-ingress\nspec:\n  rules:\n    - host: ntfy.test #select own\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name:  ntfy-svc\n                port:\n                  number: 80\n</code></pre> <pre><code>cache-file: \"/var/cache/ntfy/cache.db\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n</code></pre>"},{"location":"integrations/","title":"Integrations + community projects","text":"<p>There are quite a few projects that work with ntfy, integrate ntfy, or have been built around ntfy. It's super exciting to see what you guys have come up with. Feel free to create a pull request on GitHub to add your own project here.</p> <p>I've added a \u2b50 to projects or posts that have a significant following, or had a lot of interaction by the community.</p>"},{"location":"integrations/#official-integrations","title":"Official integrations","text":"<ul> <li>changedetection.io \u2b50 - Website change detection and notification</li> <li>Healthchecks.io \u2b50 - Online service for monitoring regularly running tasks such as cron jobs</li> <li>Apprise \u2b50 - Push notifications that work with just about every platform</li> <li>Uptime Kuma \u2b50 - A self-hosted monitoring tool</li> <li>Robusta \u2b50 - open source platform for Kubernetes troubleshooting</li> <li>borgmatic \u2b50 - configuration-driven backup software for servers and workstations</li> <li>Radarr \u2b50 - Movie collection manager for Usenet and BitTorrent users</li> <li>Sonarr \u2b50 - PVR for Usenet and BitTorrent users</li> <li>Gatus \u2b50 - Automated service health dashboard</li> <li>Automatisch \u2b50 - Open source Zapier alternative / workflow automation tool</li> <li>FlexGet \u2b50 - Multipurpose automation tool for all of your media</li> <li>Shoutrrr \u2b50 - Notification library for gophers and their furry friends.</li> <li>Netdata \u2b50 - Real-time performance monitoring</li> <li>Deployer \u2b50 - PHP deployment tool</li> <li>Scrt.link - Share a secret</li> <li>Platypush - Automation platform aimed to run on any device that can run Python</li> <li>diun - Docker Image Update Notifier</li> <li>Cloudron - Platform that makes it easy to manage web apps on your server</li> <li>Xitoring - Server and Uptime monitoring</li> <li>HetrixTools - Uptime monitoring</li> </ul>"},{"location":"integrations/#integration-via-httpsmtpetc","title":"Integration via HTTP/SMTP/etc.","text":"<ul> <li>Watchtower \u2b50 - Automating Docker container base image updates (see integration example)</li> <li>Jellyfin \u2b50 - The Free Software Media System (see integration example)</li> <li>Overseer \u2b50 - a request management and media discovery tool for Plex (see integration example)</li> <li>Tautulli \u2b50 - Monitoring and tracking tool for Plex (integration via webhook)</li> <li>Mailrise - An SMTP gateway (integration via Apprise)</li> <li>Proxmox-Ntfy - Python script that monitors Proxmox tasks and sends notifications using the Ntfy service.</li> <li>Scrutiny - WebUI for smartd S.M.A.R.T monitoring. Scrutiny includes shoutrrr/ntfy integration (see integration README)</li> </ul>"},{"location":"integrations/#unifiedpush-integrations","title":"UnifiedPush integrations","text":"<ul> <li>Element \u2b50 - Matrix client</li> <li>SchildiChat \u2b50 - Matrix client</li> <li>Tusky \u2b50 - Fediverse client</li> <li>Fedilab - Fediverse client</li> <li>FindMyDevice - Find your Device with an SMS or online with the help of FMDServer</li> <li>Tox Push Message App - Tox Push Message App</li> </ul>"},{"location":"integrations/#libraries","title":"Libraries","text":"<ul> <li>ntfy-php-library - PHP library for sending messages using a ntfy server (PHP)</li> <li>ntfy-notifier - Symfony Notifier integration for ntfy (PHP)</li> <li>ntfpy - API Wrapper for ntfy.sh (Python)</li> <li>pyntfy - A module for interacting with ntfy notifications (Python)</li> <li>vntfy - Barebone V client for ntfy (V)</li> <li>ntfy-middleman - Wraps APIs and send notifications using ntfy.sh on schedule (Python)</li> <li>ntfy-dotnet - .NET client library to interact with a ntfy server (C# / .NET)</li> <li>node-ntfy-publish - A Node package to publish notifications to an ntfy server (Node)</li> <li>ntfy - Wraps the ntfy API with pipe-friendly tooling (R)</li> <li>ntfy-for-delphi - A friendly library to push instant notifications ntfy (Delphi)</li> <li>ntfy - Send notifications over ntfy (JS)</li> <li>ntfy_dart - Dart wrapper around the ntfy API (Dart)</li> <li>gotfy - A Go wrapper for the ntfy API (Go)</li> <li>symfony/ntfy-notifier \u2b50 - Symfony Notifier integration for ntfy (PHP)</li> <li>ntfy-java - A Java package to interact with a ntfy server (Java)</li> </ul>"},{"location":"integrations/#clis-guis","title":"CLIs + GUIs","text":"<ul> <li>ntfy.sh.sh - Run scripts on ntfy.sh events</li> <li>ntfy Desktop client - Cross-platform desktop application for ntfy</li> <li>ntfy svelte front-end - Front-end built with svelte</li> <li>wio-ntfy-ticker - Ticker display for a ntfy.sh topic</li> <li>ntfysh-windows - A ntfy client for Windows Desktop</li> <li>ntfyr - A simple commandline tool to send notifications to ntfy</li> <li>ntfy.py - ntfy.py is a simple nfty.sh client for sending notifications</li> <li>wlzntfy - A minimalistic, receive-only toast notification client for Windows 11</li> </ul>"},{"location":"integrations/#projects-scripts","title":"Projects + scripts","text":"<ul> <li>Grafana-to-ntfy - Grafana-to-ntfy alerts channel (Rust)</li> <li>Grafana-ntfy-webhook-integration - Integrates Grafana alerts webhooks (Go)</li> <li>Grafana-to-ntfy - Grafana-to-ntfy alerts channel (Node Js)</li> <li>ntfy-long-zsh-command - Notifies you once a long-running command completes (zsh)</li> <li>ntfy-shellscripts - A few scripts for the ntfy project (Shell)</li> <li>QuickStatus - A shell script to alert to any immediate problems upon login (Shell)</li> <li>ntfy.el - Send notifications from Emacs (Emacs)</li> <li>backup-projects - Stupidly simple backup script for own projects (Shell)</li> <li>grav-plugin-whistleblower - Grav CMS plugin to get notifications via ntfy (PHP)</li> <li>ntfy-server-status -  Checking if server is online and reporting through ntfy (C)</li> <li>ntfy.sh *arr script - Quick and hacky script to get sonarr/radarr to notify the ntfy.sh service (Shell)</li> <li>website-watcher - A small tool to watch websites for changes (with XPath support) (Python)</li> <li>siteeagle - A small Python script to monitor websites and notify changes (Python)</li> <li>send_to_phone - Scripts to upload a file to Transfer.sh and ping ntfy with the download link (Python)</li> <li>ntfy Discord bot - WIP ntfy discord bot (TypeScript)</li> <li>ntfy Discord bot - ntfy Discord bot (Go)</li> <li>ntfy Discord bot - An advanced modal-based bot for interacting with the ntfy.sh API (Dart)</li> <li>Bettarr Notifications - Better Notifications for Sonarr and Radarr (Python)</li> <li>Notify me the intruders - Notify you if they are intruders or new connections on your network (Shell)</li> <li>Send GitHub Action to ntfy - Send GitHub Action workflow notifications to ntfy (JS)</li> <li>aTable/ntfy alertmanager bridge - Basic alertmanager bridge to ntfy (JS)</li> <li>~xenrox/ntfy-alertmanager - A bridge between ntfy and Alertmanager (Go)</li> <li>pinpox/alertmanager-ntfy - Relay prometheus alertmanager alerts to ntfy (Go)</li> <li>alexbakker/alertmanager-ntfy - Service that forwards Prometheus Alertmanager notifications to ntfy (Go)</li> <li>restreamchat2ntfy - Send restream.io chat to ntfy to check on the Meta Quest (JS)</li> <li>k8s-ntfy-deployment-service - Automatic Kubernetes (k8s) ntfy deployment</li> <li>huginn-global-entry-notif - Checks CBP API for available appointments with Huginn (JSON)</li> <li>ntfyer - Sending various information to your ntfy topic by time (TypeScript)</li> <li>git-simple-notifier - Script running git-log, checking for new repositories (Shell)</li> <li>ntfy-to-slack - Tool to subscribe to a ntfy topic and send the messages to a Slack webhook (Go)</li> <li>ansible-ntfy - Ansible action plugin to post JSON messages to ntfy (Python)</li> <li>ntfy-notification-channel - Laravel Notification channel for ntfy (PHP)</li> <li>ntfy_on_a_chip - ESP8266 and ESP32 client code to communicate with ntfy</li> <li>ntfy-sdk - ntfy client library to send notifications (Rust)</li> <li>ntfy_ynh - ntfy app for YunoHost </li> <li>woodpecker-ntfy- Woodpecker CI plugin for sending ntfy notfication from a pipeline (Go)</li> <li>drone-ntfy - Drone.io plugin for sending ntfy notifications from a pipeline (Shell)</li> <li>ignition-ntfy-module - Adds support for sending notifications via a ntfy server to Ignition (Java)</li> <li>maubot-ntfy - Matrix bot to subscribe to ntfy topics and send messages to Matrix (Python)</li> <li>ntfy-wrapper - Wrapper around ntfy (Python)</li> <li>nodebb-plugin-ntfy - Push notifications for NodeBB forums</li> <li>n8n-ntfy - n8n community node that lets you use ntfy in your workflows</li> <li>nlog-ntfy - Send NLog messages over ntfy (C# / .NET / NLog)</li> <li>helm-charts - Helm charts of some of the selfhosted services, incl. ntfy</li> <li>ntfy_ansible_role (on Ansible Galaxy) - Ansible role to install ntfy</li> <li>easy2ntfy - Gateway for ESPeasy to receive commands through ntfy and using easyfetch (HTML/JS)</li> <li>ntfy_lite - Minimalist python API for pushing ntfy notifications (Python)</li> <li>notify - \u63a8\u9001\u901a\u77e5 (PHP)</li> <li>zpool-events - Notify on ZFS pool events (Python)</li> <li>ntfyd - ntfy desktop daemon (Zig)</li> <li>ntfy-browser - browser extension to receive notifications without having the page open (TypeScript)</li> <li>ntfy-electron - Electron wrapper for the ntfy web app (JS)</li> <li>systemd-ntfy-poweronoff - Systemd services to send notifications on system startup, shutdown and service failure</li> <li>msgdrop - Send and receive encrypted messages (Bash)</li> <li>vigilant - Monitor RSS/ATOM and JSON feeds, and send push notifications on new entries (PHP)</li> <li>ansible-role-ntfy-alertmanager - Ansible role to install xenrox/ntfy-alertmanager</li> <li>NtfyMe-Blender - Blender addon to send notifications to NtfyMe (Python)</li> <li>ntfy-ios-url-share - An iOS shortcut that lets you share URLs easily and quickly.</li> <li>ntfy-ios-filesharing - An iOS shortcut that lets you share files from your share feed to a topic of your choice.</li> <li>systemd-ntfy - monitor a set of systemd services an send a notification to ntfy.sh whenever their status changes</li> <li>RouterOS Scripts - a collection of scripts for MikroTik RouterOS</li> <li>ntfy-android-builder - Script for building ntfy-android with custom Firebase configuration (Docker/Shell)</li> <li>jetspotter - send notifications when planes are spotted near you (Go)</li> <li>monitoring_ntfy - Drupal monitoring Ntfy.sh integration (PHP/Drupal)</li> <li>Notify - Native GTK4 client for ntfy (Rust) </li> <li>notify-via-ntfy - Checkmk plugin to send notifications via ntfy (Python)</li> <li>ntfy-java - A Java package to interact with a ntfy server (Java)</li> <li>container-update-check - Scripts to check and notify if a podman or docker container image can be updated (Podman/Shell)</li> <li>ignition-combustion-template - Templates and scripts to generate a configuration to automatically setup a system on first boot. Including systemd-ntfy-poweronoff (Shell)</li> </ul>"},{"location":"integrations/#blog-forum-posts","title":"Blog + forum posts","text":"<ul> <li>ntfy / Emacs Lisp - speechcode.com - 3/2024</li> <li>Boost Your Productivity with ntfy.sh: The Ultimate Notification Tool for Command-Line Users - dev.to - 3/2024</li> <li>Nextcloud Talk (F-Droid version) notifications using ntfy (ntfy.sh) - youtube.com - 2/2024</li> <li>ZFS and SMART Warnings via Ntfy - rair.dev - 2/2024</li> <li>Automating Security Camera Notifications With Home Assistant and Ntfy \u2b50 - runtimeterror.dev - 2/2024</li> <li>Ntfy: self-hosted notification service \u2b50 - williamdonze.medium.com - 1/2024</li> <li>Let\u2019s Supercharge Snowflake Alerts with Cool ntfy Open-source Notifications! - sarathi-data-ml-cloud.medium.com - 1/2024</li> <li>Setting up NTFY with Ngnix-Proxy-Manager, authentication and Ansible notifications - random-it-blog.de - 12/2023</li> <li>Introducing the Monitoring Ntfy.sh Integration Module: Real-time Notifications for Drupal Monitoring - cyberschorsch.dev - 11/2023</li> <li>How to install Ntfy.sh on CasaOS using BigBearCasaOS - youtube.com - 10/2023</li> <li>Podman Update Notifications via Ntfy - rair.dev - 9/2023</li> <li>Easy Push Notifications With ntfy.sh \u2b50 - runtimeterror.dev - 9/2023</li> <li>Ntfy: Your Ultimate Push Notification Powerhouse! - kkamalesh117.medium.com - 9/2023</li> <li>Installing Self Host NTFY On Linux Using Docker Container - pinoylinux.org - 9/2023</li> <li>Homelab Notifications with ntfy \u2b50 - alexsguardian.net - 9/2023 </li> <li>Why NTFY is the Ultimate Push Notification Tool for Your Needs - osintph.medium.com - 9/2023</li> <li>Supercharge Your Alerts: Ntfy \u2014 The Ultimate Push Notification Solution - spring-boot.medium.com - 9/2023</li> <li>Deploy Ntfy using Docker - linkedin.com - 9/2023</li> <li>Send Notifications With Ntfy for New WordPress Posts - activepieces.com - 9/2023</li> <li>Get Ntfy Notifications About New Zendesk Ticket - activepieces.com - 9/2023</li> <li>Set reminder for recurring events using ntfy &amp; Cron - youtube.com - 9/2023</li> <li>ntfy - Installation and full configuration setup - youtube.com - 9/2023</li> <li>How to install Ntfy.sh on Portainer / Docker Compose - youtube.com - 9/2023</li> <li>ntfy - Push-Benachrichtigungen // Push Notifications - youtube.com - 9/2023</li> <li>Podman Update Notifications via Ntfy - rair.dev - 9/2023</li> <li>How to Send Alerts From Raspberry Pi Pico W to a Phone or Tablet - tomshardware.com - 8/2023</li> <li>NetworkChunk - how did I NOT know about this? \u2b50 - youtube.com - 8/2023</li> <li>NTFY - Command-Line Notifications - academy.networkchuck.com - 8/2023</li> <li>Open Source Push Notifications! Get notified of any event you can imagine. Triggers abound! \u2b50 - youtube.com - 8/2023</li> <li>How to install and self host an Ntfy server on Linux - linuxconfig.org - 7/2023</li> <li>Basic website monitoring using cronjobs and ntfy.sh - burkhardt.dev - 6/2023 </li> <li>Pingdom alternative in one line of curl through ntfy.sh - bearblog.dev - 6/2023 </li> <li>#OpenSourceDiscovery 78: ntfy.sh - opensourcedisc.substack.com - 6/2023 </li> <li>ntfy: des notifications instantan\u00e9es - blogmotion.fr - 5/2023</li> <li>\u684c\u9762\u901a\u77e5\uff1antfy - cnblogs.com - 5/2023 </li> <li>ntfy.sh - Open source push notifications via PUT/POST - lobste.rs - 5/2023 </li> <li>Install ntfy Inside Docker Container in Linux - lindevs.com - 4/2023 </li> <li>ntfy.sh - neo-sahara.com - 3/2023 </li> <li>Using Ntfy to send and receive push notifications - Samuel Rosa de Oliveria - Delphicon 2023 - youtube.com - 3/2023 </li> <li>ntfy: w\u0142asny darmowy system powiadomie\u0144 - sprawdzone.it - 3/2023 </li> <li>Deploying ntfy on railway - youtube.com - 3/2023</li> <li>Start-Job,Variables, and ntfy.sh - klingele.dev - 3/2023 </li> <li>enviar notificaciones autom\u00e1ticas usando ntfy.sh - osiux.com - 2/2023 </li> <li>Carnet IP\u52a8\u6001\u89e3\u6790\u4ee5\u53ca\u901a\u8fc7ntfy\u63a8\u9001IP\u4fe1\u606f - blog.wslll.cn - 2/2023 </li> <li>Open-Source-Brieftaube: ntfy verschickt Push-Meldungen auf Smartphone und PC \u2b50 - heise.de - 2/2023 </li> <li>Video: Simple Push Notifications ntfy \u2b50 - youtube.com - 2/2023</li> <li>Use ntfy.sh with Home Assistant - diecknet.de - 2/2023 </li> <li>On installe Ntfy sur Synology Docker - maison-et-domotique.co - 1/2023 </li> <li>January 2023 Developer Update - nodebb.org - 1/2023</li> <li>Comment envoyer des notifications push sur votre t\u00e9l\u00e9phone facilement et gratuitement? - 1/2023</li> <li>UnifiedPush: a decentralized, open-source push notification protocol \u2b50 - 12/2022</li> <li>ntfy setup instructions - benjamin-altpeter.de - 12/2022</li> <li>Ntfy Self-Hosted Push Notifications - lachlanlife.net - 12/2022 </li> <li>NTFY - syst\u00e8me de notification hyper simple et complet - youtube.com - 12/2022</li> <li>ntfy.sh - paramdeo.com - 11/2022</li> <li>Using ntfy to warn me when my computer is discharging - ulysseszh.github.io - 11/2022</li> <li>Enabling SSH Login Notifications using Ntfy - paramdeo.com - 11/2022</li> <li>ntfy - Push Notification Service - dizzytech.de - 11/2022 </li> <li>Console #132 \u2b50 - console.substack.com - 11/2022</li> <li>How to make my phone buzz* - evbogue.com - 11/2022</li> <li>MeshCentral - Ntfy Push Notifications  - youtube.com - 11/2022</li> <li>Changelog | Tracking layoffs, tech worker demand still high, ntfy, ... \u2b50 - changelog.com - 11/2022</li> <li>Pointer | Issue #367 - pointer.io - 11/2022</li> <li>Envie Push Notifications por POST (de gra\u00e7a e sem cadastro) - tabnews.com.br - 11/2022</li> <li>Push Notifications for KDE - volkerkrause.eu - 11/2022</li> <li>TLDR Newsletter Daily Update 2022-11-09 \u2b50 - tldr.tech - 11/2022</li> <li>Ntfy.sh \u2013 Send push notifications to your phone via PUT/POST \u2b50 - news.ycombinator.com - 11/2022</li> <li>Ntfy et Jeedom : un plugin - lunarok-domotique.com - 11/2022</li> <li>Crea tu propio servidor de notificaciones con Ntfy - blog.parravidales.es - 11/2022</li> <li>unRAID Notifications with ntfy.sh - lder.dev - 10/2022</li> <li>Zero-cost push notifications to your phone or desktop via PUT/POST  - lobste.rs - 10/2022</li> <li>A nifty push notification system: ntfy - jpmens.net - 10/2022 </li> <li>Alarmanlage der dritten Art (YouTube video) - youtube.com - 10/2022</li> <li>Neue Services: Ntfy, TikTok und RustDesk - adminforge.de - 9/2022</li> <li>Ntfy, le service de notifications qu\u2019il vous faut - cachem.fr - 9/2022</li> <li>NAS Synology et notifications avec ntfy - cachem.fr - 9/2022 </li> <li>Self hosted Mobile Push Notifications using NTFY | Thejesh GN - thejeshgn.com - 8/2022</li> <li>Fedora Magazine | 4 cool new projects to try in Copr - fedoramagazine.org - 8/2022</li> <li>Docker\ub85c \uc624\ud508\uc18c\uc2a4 \ud478\uc2dc\uc54c\ub78c \ud504\ub85c\uc81d\ud2b8 ntfy.sh \uc124\uce58 \ubc0f \uc0ac\uc6a9\ud558\uae30.(Feat. Uptimekuma) - svrforum.com - 8/2022</li> <li>Easy notifications from R - sometimesir.com - 6/2022</li> <li>ntfy is finally coming to iOS, and Matrix/UnifiedPush gateway support \u2b50 - reddit.com - 6/2022</li> <li>Install guide (with Docker) - chowdera.com - 5/2022</li> <li>\u65e0\u9700\u6ce8\u518c\u7684\u901a\u77e5\u670d\u52a1ntfy - blog.csdn.net - 5/2022</li> <li>Updated review post (Jan-Lukas Else) - jlelse.blog - 4/2022</li> <li>Using ntfy and Tasker together - lachlanlife.net - 4/2022 </li> <li>Reddit feature update post \u2b50 - reddit.com - 4/2022</li> <li>\u7121\u6599\u3067\u7c21\u5358\u306b\u901a\u77e5\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u3064\u3064\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u30bb\u30eb\u30d5\u30db\u30b9\u30c8\u3082\u53ef\u80fd\u306a\u300cntfy\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f - gigazine.net - 4/2022</li> <li>Pocketmags ntfy review - pocketmags.com - 3/2022</li> <li>Reddit web app release post \u2b50 - reddit.com- 3/2022</li> <li>Lemmy post (Jakob) - lemmy.eus - 1/2022</li> <li>Reddit UnifiedPush release post \u2b50 - reddit.com - 1/2022</li> <li>ntfy: send notifications from your computer to your phone - rs1.es - 1/2022</li> <li>Short ntfy review (Jan-Lukas Else) - jlelse.blog - 12/2021</li> <li>Free MacroDroid webhook alternative (FrameXX) - macrodroidforum.com - 12/2021</li> <li>ntfy otro sistema de notificaciones pub-sub simple basado en HTTP - ugeek.github.io - 11/2021</li> <li>Show HN: A tool to send push notifications to your phone, written in Go \u2b50 - news.ycombinator.com - 12/2021</li> <li>Reddit selfhostable post \u2b50 - reddit.com - 11/2021</li> </ul>"},{"location":"integrations/#alternative-ntfy-servers","title":"Alternative ntfy servers","text":"<p>Here's a list of public ntfy servers. As of right now, there is only one official server. The others are provided by the ntfy community. Thanks to everyone running a public server. You guys rock!</p> URL Country ntfy.sh (Official) \ud83c\uddfa\ud83c\uddf8 United States ntfy.tedomum.net \ud83c\uddeb\ud83c\uddf7 France ntfy.jae.fi \ud83c\uddeb\ud83c\uddee Finland ntfy.adminforge.de \ud83c\udde9\ud83c\uddea Germany ntfy.envs.net \ud83c\udde9\ud83c\uddea Germany ntfy.mzte.de \ud83c\udde9\ud83c\uddea Germany ntfy.hostux.net \ud83c\uddeb\ud83c\uddf7 France ntfy.fossman.de \ud83c\udde9\ud83c\uddea Germany <p>Please be aware that server operators can log your messages. The project also cannot guarantee the reliability and uptime of third party servers, so use of each server is at your own discretion.</p>"},{"location":"known-issues/","title":"Known issues","text":"<p>This is an incomplete list of known issues with the ntfy server, web app, Android app, and iOS app. You can find a complete list on GitHub, but I thought it may be helpful to have the prominent ones here to link to.</p>"},{"location":"known-issues/#ios-app-not-refreshing-see-267","title":"iOS app not refreshing (see #267)","text":"<p>For some (many?) users, the iOS app is not refreshing the view when new notifications come in. Until you manually swipe down, you do not see the newly arrived messages, even though the popup appeared before.</p> <p>This is caused by some weirdness between the Notification Service Extension (NSE), SwiftUI and Core Data. I am entirely clueless on how to fix it, sadly, as it is ephemeral and not clear to me what is causing it.</p> <p>Please send experienced iOS developers my way to help me figure this out.</p>"},{"location":"known-issues/#ios-app-not-receiving-notifications-anymore","title":"iOS app not receiving notifications (anymore)","text":"<p>If notifications do not show up at all anymore, there are a few causes for it (that I know of):</p> <p>Firebase+APNS are being weird and buggy:   If this is the case, usually it helps to remove the topic/subscription and re-add it. That will force Firebase to  re-subscribe to the Firebase topic.</p> <p>Self-hosted only: No <code>upstream-base-url</code> set, or <code>base-url</code> mismatch:  To make self-hosted servers work with the iOS app, I had to do some horrible things (see iOS instant notifications for details). Be sure that in your selfhosted server:</p> <ul> <li>Set <code>upstream-base-url: \"https://ntfy.sh\"</code> (not your own hostname!)</li> <li>Ensure that the URL you set in <code>base-url</code> matches exactly what you set the Default Server in iOS to </li> </ul>"},{"location":"known-issues/#ios-app-seeing-new-message-but-not-real-message-content","title":"iOS app seeing \"New message\", but not real message content","text":"<p>If you see <code>New message</code> notifications on iOS, your iPhone can likely not talk to your self-hosted server. Be sure that your iOS device and your ntfy server are either on the same network, or that your phone can actually reach the server.</p> <p>Turn on tracing/debugging on the server (via <code>log-level: trace</code> or <code>log-level: debug</code>, see troubleshooting), and read docs on iOS instant notifications.</p>"},{"location":"known-issues/#safari-does-not-play-sounds-for-web-push-notifications","title":"Safari does not play sounds for web push notifications","text":"<p>Safari does not support playing sounds for web push notifications, and treats them all as silent. This will be fixed with iOS 17 / Safari 17, which will be released later in 2023.</p>"},{"location":"known-issues/#pwa-on-ios-sometimes-crashes-with-an-indexeddb-error-see-787","title":"PWA on iOS sometimes crashes with an IndexedDB error (see #787)","text":"<p>When resuming the installed PWA from the background, it sometimes crashes with an error from IndexedDB/Dexie, due to a WebKit bug. A reload will fix it until a permanent fix is found.</p>"},{"location":"privacy/","title":"Privacy policy","text":"<p>I love free software, and I'm doing this because it's fun. I have no bad intentions, and I will never monetize or sell your information, and this service and software will always stay free and open.</p> <p>Neither the server nor the app record any personal information, or share any of the messages and topics with any outside service. All data is exclusively used to make the service function properly. The only external service I use is Firebase Cloud Messaging (FCM) service, which is required to provide instant Android notifications (see FAQ for details). To avoid FCM altogether, download the F-Droid version.</p> <p>For debugging purposes, the ntfy server may temporarily log request paths, remote IP addresses or even topics  or messages, though typically this is turned off.</p>"},{"location":"publish/","title":"Publishing","text":"<p>Publishing messages can be done via HTTP PUT/POST or via the ntfy CLI. Topics are created on the fly by  subscribing or publishing to them. Because there is no sign-up, the topic is essentially a password, so pick  something that's not easily guessable.</p> <p>Here's an example showing how to publish a simple message using a POST request:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl -d \"Backup successful \ud83d\ude00\" ntfy.sh/mytopic\n</code></pre> <pre><code>ntfy publish mytopic \"Backup successful \ud83d\ude00\"\n</code></pre> <pre><code>POST /mytopic HTTP/1.1\nHost: ntfy.sh\n\nBackup successful \ud83d\ude00\n</code></pre> <pre><code>fetch('https://ntfy.sh/mytopic', {\n  method: 'POST', // PUT works too\n  body: 'Backup successful \ud83d\ude00'\n})\n</code></pre> <pre><code>http.Post(\"https://ntfy.sh/mytopic\", \"text/plain\",\n    strings.NewReader(\"Backup successful \ud83d\ude00\"))\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mytopic\"\n  Body = \"Backup successful\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/mytopic\", \n    data=\"Backup successful \ud83d\ude00\".encode(encoding='utf-8'))\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt; 'Content-Type: text/plain',\n        'content' =&gt; 'Backup successful \ud83d\ude00'\n    ]\n]));\n</code></pre> <p>If you have the Android app installed on your phone, this will create a notification that looks like this:</p> <p> </p> Android notification <p>There are more features related to publishing messages: You can set a notification priority,  a title, and tag messages \ud83e\udd73 \ud83c\udf89. Here's an example that uses some of them at together:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n  -H \"Title: Unauthorized access detected\" \\\n  -H \"Priority: urgent\" \\\n  -H \"Tags: warning,skull\" \\\n  -d \"Remote access to phils-laptop detected. Act right away.\" \\\n  ntfy.sh/phil_alerts\n</code></pre> <pre><code>ntfy publish \\\n    --title \"Unauthorized access detected\" \\\n    --tags warning,skull \\\n    --priority urgent \\\n    mytopic \\\n    \"Remote access to phils-laptop detected. Act right away.\"\n</code></pre> <pre><code>POST /phil_alerts HTTP/1.1\nHost: ntfy.sh\nTitle: Unauthorized access detected\nPriority: urgent\nTags: warning,skull\n\nRemote access to phils-laptop detected. Act right away.\n</code></pre> <pre><code>fetch('https://ntfy.sh/phil_alerts', {\n    method: 'POST', // PUT works too\n    body: 'Remote access to phils-laptop detected. Act right away.',\n    headers: {\n        'Title': 'Unauthorized access detected',\n        'Priority': 'urgent',\n        'Tags': 'warning,skull'\n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/phil_alerts\",\n    strings.NewReader(\"Remote access to phils-laptop detected. Act right away.\"))\nreq.Header.Set(\"Title\", \"Unauthorized access detected\")\nreq.Header.Set(\"Priority\", \"urgent\")\nreq.Header.Set(\"Tags\", \"warning,skull\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/phil_alerts\"\n  Headers = @{\n    Title = \"Unauthorized access detected\"\n    Priority = \"urgent\"\n    Tags = \"warning,skull\"\n  }\n  Body = \"Remote access to phils-laptop detected. Act right away.\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/phil_alerts\",\n    data=\"Remote access to phils-laptop detected. Act right away.\",\n    headers={\n        \"Title\": \"Unauthorized access detected\",\n        \"Priority\": \"urgent\",\n        \"Tags\": \"warning,skull\"\n    })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/phil_alerts', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Title: Unauthorized access detected\\r\\n\" .\n            \"Priority: urgent\\r\\n\" .\n            \"Tags: warning,skull\",\n        'content' =&gt; 'Remote access to phils-laptop detected. Act right away.'\n    ]\n]));\n</code></pre> <p> </p> Urgent notification with tags and title <p>You can also do multi-line messages. Here's an example using a click action, an action button, an external image attachment and email publishing:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n  -H \"Click: https://home.nest.com/\" \\\n  -H \"Attach: https://nest.com/view/yAxkasd.jpg\" \\\n  -H \"Actions: http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" \\\n  -H \"Email: phil@example.com\" \\\n  -d \"There's someone at the door. \ud83d\udc36\n\nPlease check if it's a good boy or a hooman. \nDoggies have been known to ring the doorbell.\" \\\n  ntfy.sh/mydoorbell\n</code></pre> <pre><code>ntfy publish \\\n    --click=\"https://home.nest.com/\" \\\n    --attach=\"https://nest.com/view/yAxkasd.jpg\" \\\n    --actions=\"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" \\\n    --email=\"phil@example.com\" \\\n    mydoorbell \\\n    \"There's someone at the door. \ud83d\udc36\n\nPlease check if it's a good boy or a hooman. \nDoggies have been known to ring the doorbell.\"\n</code></pre> <pre><code>POST /mydoorbell HTTP/1.1\nHost: ntfy.sh\nClick: https://home.nest.com/\nAttach: https://nest.com/view/yAxkasd.jpg\nActions: http, Open door, https://api.nest.com/open/yAxkasd, clear=true\nEmail: phil@example.com\n\nThere's someone at the door. \ud83d\udc36\n\nPlease check if it's a good boy or a hooman. \nDoggies have been known to ring the doorbell.\n</code></pre> <pre><code>fetch('https://ntfy.sh/mydoorbell', {\n    method: 'POST', // PUT works too\n    headers: {\n        'Click': 'https://home.nest.com/',\n        'Attach': 'https://nest.com/view/yAxkasd.jpg',\n        'Actions': 'http, Open door, https://api.nest.com/open/yAxkasd, clear=true',\n        'Email': 'phil@example.com'\n    },\n    body: `There's someone at the door. \ud83d\udc36\n\nPlease check if it's a good boy or a hooman. \nDoggies have been known to ring the doorbell.`,\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mydoorbell\",\n    strings.NewReader(`There's someone at the door. \ud83d\udc36\n\nPlease check if it's a good boy or a hooman. \nDoggies have been known to ring the doorbell.`))\nreq.Header.Set(\"Click\", \"https://home.nest.com/\")\nreq.Header.Set(\"Attach\", \"https://nest.com/view/yAxkasd.jpg\")\nreq.Header.Set(\"Actions\", \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\")\nreq.Header.Set(\"Email\", \"phil@example.com\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mydoorbell\"\n  Headers = @{\n    Click = \"https://home.nest.com\"\n    Attach = \"https://nest.com/view/yAxksd.jpg\"\n    Actions = \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\"\n    Email = \"phil@example.com\"\n  }\n  Body = \"There's someone at the door. \ud83d\udc36`n\n  `n\n  Please check if it's a good boy or a hooman.`n\n  Doggies have been known to ring the doorbell.`n\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/mydoorbell\",\n    data=\"\"\"There's someone at the door. \ud83d\udc36\n\nPlease check if it's a good boy or a hooman.\nDoggies have been known to ring the doorbell.\"\"\".encode('utf-8'),\n    headers={\n        \"Click\": \"https://home.nest.com/\",\n        \"Attach\": \"https://nest.com/view/yAxkasd.jpg\",\n        \"Actions\": \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\",\n        \"Email\": \"phil@example.com\"\n    })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mydoorbell', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Click: https://home.nest.com/\\r\\n\" .\n            \"Attach: https://nest.com/view/yAxkasd.jpg\\r\\n\" .\n            \"Actions\": \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\\r\\n\" .\n            \"Email\": \"phil@example.com\\r\\n\",\n        'content' =&gt; 'There\\'s someone at the door. \ud83d\udc36\n\nPlease check if it\\'s a good boy or a hooman.\nDoggies have been known to ring the doorbell.'\n    ]\n]));\n</code></pre> <p> </p> Notification using a click action, a user action, with an external image attachment and forwarded via email"},{"location":"publish/#message-title","title":"Message title","text":"<p>Supported on: </p> <p>The notification title is typically set to the topic short URL (e.g. <code>ntfy.sh/mytopic</code>). To override the title,  you can set the <code>X-Title</code> header (or any of its aliases: <code>Title</code>, <code>ti</code>, or <code>t</code>).</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl -H \"X-Title: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial\ncurl -H \"Title: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial\ncurl -H \"t: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial\n</code></pre> <pre><code>ntfy publish \\\n    -t \"Dogs are better than cats\" \\\n    controversial \"Oh my ...\"\n</code></pre> <pre><code>POST /controversial HTTP/1.1\nHost: ntfy.sh\nTitle: Dogs are better than cats\n\nOh my ...\n</code></pre> <pre><code>fetch('https://ntfy.sh/controversial', {\n    method: 'POST',\n    body: 'Oh my ...',\n    headers: { 'Title': 'Dogs are better than cats' }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/controversial\", strings.NewReader(\"Oh my ...\"))\nreq.Header.Set(\"Title\", \"Dogs are better than cats\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/controversial\"\n  Headers = @{\n    Title = \"Dogs are better than cats\"\n  }\n  Body = \"Oh my ...\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/controversial\",\n    data=\"Oh my ...\",\n    headers={ \"Title\": \"Dogs are better than cats\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/controversial', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Title: Dogs are better than cats\",\n        'content' =&gt; 'Oh my ...'\n    ]\n]));\n</code></pre> <p> </p> Detail view of notification with title <p>Info</p> <p>ntfy supports UTF-8 in HTTP headers, but not every library or programming language does. If non-ASCII characters are causing issues for you in the title (i.e. you're seeing <code>?</code> symbols), you may also encode any header (including the title) as RFC 2047, e.g. <code>=?UTF-8?B?8J+HqfCfh6o=?=</code> (base64), or <code>=?UTF-8?Q?=C3=84pfel?=</code> (quoted-printable).</p>"},{"location":"publish/#message-priority","title":"Message priority","text":"<p>Supported on: </p> <p>All messages have a priority, which defines how urgently your phone notifies you. On Android, you can set custom notification sounds and vibration patterns on your phone to map to these priorities (see Android config).</p> <p>The following priorities exist:</p> Priority Icon ID Name Description Max priority <code>5</code> <code>max</code>/<code>urgent</code> Really long vibration bursts, default notification sound with a pop-over notification. High priority <code>4</code> <code>high</code> Long vibration burst, default notification sound with a pop-over notification. Default priority (none) <code>3</code> <code>default</code> Short default vibration and sound. Default notification behavior. Low priority <code>2</code> <code>low</code> No vibration or sound. Notification will not visibly show up until notification drawer is pulled down. Min priority <code>1</code> <code>min</code> No vibration or sound. The notification will be under the fold in \"Other notifications\". <p>You can set the priority with the header <code>X-Priority</code> (or any of its aliases: <code>Priority</code>, <code>prio</code>, or <code>p</code>).</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl -H \"X-Priority: 5\" -d \"An urgent message\" ntfy.sh/phil_alerts\ncurl -H \"Priority: low\" -d \"Low priority message\" ntfy.sh/phil_alerts\ncurl -H p:4 -d \"A high priority message\" ntfy.sh/phil_alerts\n</code></pre> <pre><code>ntfy publish \\ \n    -p 5 \\\n    phil_alerts An urgent message\n</code></pre> <pre><code>POST /phil_alerts HTTP/1.1\nHost: ntfy.sh\nPriority: 5\n\nAn urgent message\n</code></pre> <pre><code>fetch('https://ntfy.sh/phil_alerts', {\n    method: 'POST',\n    body: 'An urgent message',\n    headers: { 'Priority': '5' }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/phil_alerts\", strings.NewReader(\"An urgent message\"))\nreq.Header.Set(\"Priority\", \"5\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = 'POST'\n  URI = \"https://ntfy.sh/phil_alerts\"\n  Headers = @{\n    Priority = \"5\"\n  }\n  Body = \"An urgent message\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/phil_alerts\",\n    data=\"An urgent message\",\n    headers={ \"Priority\": \"5\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/phil_alerts', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Priority: 5\",\n        'content' =&gt; 'An urgent message'\n    ]\n]));\n</code></pre> <p> </p> Detail view of priority notifications"},{"location":"publish/#tags-emojis","title":"Tags &amp; emojis \ud83e\udd73 \ud83c\udf89","text":"<p>Supported on: </p> <p>You can tag messages with emojis and other relevant strings:</p> <ul> <li>Emojis: If a tag matches an emoji short code, it'll be converted to an emoji and prepended    to title or message.</li> <li>Other tags: If a tag doesn't match, it will be listed below the notification. </li> </ul> <p>This feature is useful for things like warnings (\u26a0\ufe0f, \ufe0f\ud83d\udea8, or \ud83d\udea9), but also to simply tag messages otherwise (e.g. script  names, hostnames, etc.). Use the emoji short code list to figure out what tags can be converted to emojis.  Here's an excerpt of emojis I've found very useful in alert messages:</p> TagEmoji <code>+1</code>\ud83d\udc4d <code>partying_face</code>\ud83e\udd73 <code>tada</code>\ud83c\udf89 <code>heavy_check_mark</code>\u2714\ufe0f <code>loudspeaker</code>\ud83d\udce2 ...... TagEmoji <code>-1</code>\ud83d\udc4e\ufe0f <code>warning</code>\u26a0\ufe0f <code>rotating_light</code>\ufe0f\ud83d\udea8 <code>triangular_flag_on_post</code>\ud83d\udea9 <code>skull</code>\ud83d\udc80 ...... TagEmoji <code>facepalm</code>\ud83e\udd26 <code>no_entry</code>\u26d4 <code>no_entry_sign</code>\ud83d\udeab <code>cd</code>\ud83d\udcbf <code>computer</code>\ud83d\udcbb ...... <p>You can set tags with the <code>X-Tags</code> header (or any of its aliases: <code>Tags</code>, <code>tag</code>, or <code>ta</code>). Specify multiple tags by separating them with a comma, e.g. <code>tag1,tag2,tag3</code>.</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl -H \"X-Tags: warning,mailsrv13,daily-backup\" -d \"Backup of mailsrv13 failed\" ntfy.sh/backups\ncurl -H \"Tags: horse,unicorn\" -d \"Unicorns are just horses with unique horns\" ntfy.sh/backups\ncurl -H ta:dog -d \"Dogs are awesome\" ntfy.sh/backups\n</code></pre> <pre><code>ntfy publish \\\n    --tags=warning,mailsrv13,daily-backup \\\n    backups \"Backup of mailsrv13 failed\"\n</code></pre> <pre><code>POST /backups HTTP/1.1\nHost: ntfy.sh\nTags: warning,mailsrv13,daily-backup\n\nBackup of mailsrv13 failed\n</code></pre> <pre><code>fetch('https://ntfy.sh/backups', {\n    method: 'POST',\n    body: 'Backup of mailsrv13 failed',\n    headers: { 'Tags': 'warning,mailsrv13,daily-backup' }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/backups\", strings.NewReader(\"Backup of mailsrv13 failed\"))\nreq.Header.Set(\"Tags\", \"warning,mailsrv13,daily-backup\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/backups\"\n  Headers = @{\n    Tags = \"warning,mailsrv13,daily-backup\"\n  }\n  Body = \"Backup of mailsrv13 failed\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/backups\",\n    data=\"Backup of mailsrv13 failed\",\n    headers={ \"Tags\": \"warning,mailsrv13,daily-backup\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/backups', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Tags: warning,mailsrv13,daily-backup\",\n        'content' =&gt; 'Backup of mailsrv13 failed'\n    ]\n]));\n</code></pre> <p> </p> Detail view of notifications with tags <p>Info</p> <p>ntfy supports UTF-8 in HTTP headers, but not every library or programming language does. If non-ASCII characters are causing issues for you in the title (i.e. you're seeing <code>?</code> symbols), you may also encode the tags header or individual tags as RFC 2047, e.g. <code>tag1,=?UTF-8?B?8J+HqfCfh6o=?=</code> (base64), or <code>=?UTF-8?Q?=C3=84pfel?=,tag2</code> (quoted-printable).</p>"},{"location":"publish/#markdown-formatting","title":"Markdown formatting","text":"<p>Supported on: </p> <p>You can format messages using Markdown \ud83e\udd29. That means you can use  bold text, italicized text, links, images, and more. Supported Markdown features (web app only for now):</p> <ul> <li>Emphasis such as bold (<code>**bold**</code>), italics (<code>*italics*</code>)</li> <li>Links (<code>[some tool](https://ntfy.sh)</code>)</li> <li>Images (<code>![some image](https://bing.com/logo.png)</code>)</li> <li>Code blocks (<code>```code blocks```</code>) and inline code (<code>`inline code`</code>)</li> <li>Headings (<code># headings</code>, <code>## headings</code>, etc.)</li> <li>Lists (<code>- lists</code>, <code>1. lists</code>, etc.)</li> <li>Blockquotes (<code>&gt; blockquotes</code>)</li> <li>Horizontal rules (<code>---</code>)</li> </ul> <p>By default, messages sent to ntfy are rendered as plain text. To enable Markdown, set the <code>X-Markdown</code> header (or any of its aliases: <code>Markdown</code>, or <code>md</code>) to <code>true</code> (or <code>1</code> or <code>yes</code>), or set the <code>Content-Type</code> header to <code>text/markdown</code>. As of today, Markdown is only supported in the web app. Here's an example of how to enable Markdown formatting:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -d \"Look ma, **bold text**, *italics*, ...\" \\\n    -H \"Markdown: yes\" \\\n    ntfy.sh/mytopic\n</code></pre> <pre><code>ntfy publish \\\n    --markdown \\\n    mytopic \\\n    \"Look ma, **bold text**, *italics*, ...\"\n</code></pre> <pre><code>POST /mytopic HTTP/1.1\nHost: ntfy.sh\nMarkdown: yes\n\nLook ma, **bold text**, *italics*, ...\n</code></pre> <pre><code>fetch('https://ntfy.sh/mytopic', {\n  method: 'POST', // PUT works too\n  body: 'Look ma, **bold text**, *italics*, ...',\n  headers: { 'Markdown': 'yes' }\n})\n</code></pre> <pre><code>http.Post(\"https://ntfy.sh/mytopic\", \"text/markdown\",\n    strings.NewReader(\"Look ma, **bold text**, *italics*, ...\"))\n\n// or\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mytopic\", \n    strings.NewReader(\"Look ma, **bold text**, *italics*, ...\"))\nreq.Header.Set(\"Markdown\", \"yes\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mytopic\"\n  Body = \"Look ma, **bold text**, *italics*, ...\"\n  Headers = @{\n    Markdown = \"yes\"\n  }\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/mytopic\", \n    data=\"Look ma, **bold text**, *italics*, ...\"\n    headers={ \"Markdown\": \"yes\" }))\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt; 'Content-Type: text/markdown', // !\n        'content' =&gt; 'Look ma, **bold text**, *italics*, ...'\n    ]\n]));\n</code></pre> <p>Here's what that looks like in the web app:</p> <p> </p> Markdown formatting in the web app"},{"location":"publish/#scheduled-delivery","title":"Scheduled delivery","text":"<p>Supported on: </p> <p>You can delay the delivery of messages and let ntfy send them at a later date. This can be used to send yourself  reminders or even to execute commands at a later date (if your subscriber acts on messages).</p> <p>Usage is pretty straight forward. You can set the delivery time using the <code>X-Delay</code> header (or any of its aliases: <code>Delay</code>,  <code>X-At</code>, <code>At</code>, <code>X-In</code> or <code>In</code>), either by specifying a Unix timestamp (e.g. <code>1639194738</code>), a duration (e.g. <code>30m</code>,  <code>3h</code>, <code>2 days</code>), or a natural language time string (e.g. <code>10am</code>, <code>8:30pm</code>, <code>tomorrow, 3pm</code>, <code>Tuesday, 7am</code>,  and more). </p> <p>As of today, the minimum delay you can set is 10 seconds and the maximum delay is 3 days. This can be configured with the <code>message-delay-limit</code> option).</p> <p>For the purposes of message caching, scheduled messages are kept in the cache until 12 hours  after they were delivered (or whatever the server-side cache duration is set to). For instance, if a message is scheduled to be delivered in 3 days, it'll remain in the cache for 3 days and 12 hours. Also note that naturally,  turning off server-side caching is not possible in combination with this feature.  </p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl -H \"At: tomorrow, 10am\" -d \"Good morning\" ntfy.sh/hello\ncurl -H \"In: 30min\" -d \"It's 30 minutes later now\" ntfy.sh/reminder\ncurl -H \"Delay: 1639194738\" -d \"Unix timestamps are awesome\" ntfy.sh/itsaunixsystem\n</code></pre> <pre><code>ntfy publish \\\n    --at=\"tomorrow, 10am\" \\\n    hello \"Good morning\"\n</code></pre> <pre><code>POST /hello HTTP/1.1\nHost: ntfy.sh\nAt: tomorrow, 10am\n\nGood morning\n</code></pre> <pre><code>fetch('https://ntfy.sh/hello', {\n    method: 'POST',\n    body: 'Good morning',\n    headers: { 'At': 'tomorrow, 10am' }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/hello\", strings.NewReader(\"Good morning\"))\nreq.Header.Set(\"At\", \"tomorrow, 10am\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/hello\"\n  Headers = @{\n    At = \"tomorrow, 10am\"\n  }\n  Body = \"Good morning\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/hello\",\n    data=\"Good morning\",\n    headers={ \"At\": \"tomorrow, 10am\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/backups', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"At: tomorrow, 10am\",\n        'content' =&gt; 'Good morning'\n    ]\n]));\n</code></pre> <p>Here are a few examples (assuming today's date is 12/10/2021, 9am, Eastern Time Zone):</p> <code>Delay/At/In</code> headerMessage will be delivered atExplanation <code>30m</code>12/10/2021, 9:30am30 minutes from now <code>2 hours</code>12/10/2021, 11:30am2 hours from now <code>1 day</code>12/11/2021, 9am24 hours from now <code>10am</code>12/10/2021, 10amToday at 10am (same day, because it's only 9am) <code>8am</code>12/11/2021, 8amTomorrow at 8am (because it's 9am already) <code>1639152000</code>12/10/2021, 11am (EST) Today at 11am (EST)"},{"location":"publish/#webhooks-publish-via-get","title":"Webhooks (publish via GET)","text":"<p>Supported on: </p> <p>In addition to using PUT/POST, you can also send to topics via simple HTTP GET requests. This makes it easy to use  a ntfy topic as a webhook, or if your client has limited HTTP support.</p> <p>To send messages via HTTP GET, simply call the <code>/publish</code> endpoint (or its aliases <code>/send</code> and <code>/trigger</code>). Without  any arguments, this will send the message <code>triggered</code> to the topic. However, you can provide all arguments that are  also supported as HTTP headers as URL-encoded arguments. Be sure to check the list of all  supported parameters and headers for details.</p> <p>For instance, assuming your topic is <code>mywebhook</code>, you can simply call <code>/mywebhook/trigger</code> to send a message  (aka trigger the webhook):</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl ntfy.sh/mywebhook/trigger\n</code></pre> <pre><code>ntfy trigger mywebhook\n</code></pre> <pre><code>GET /mywebhook/trigger HTTP/1.1\nHost: ntfy.sh\n</code></pre> <pre><code>fetch('https://ntfy.sh/mywebhook/trigger')\n</code></pre> <pre><code>http.Get(\"https://ntfy.sh/mywebhook/trigger\")\n</code></pre> <pre><code>Invoke-RestMethod \"ntfy.sh/mywebhook/trigger\"\n</code></pre> <pre><code>requests.get(\"https://ntfy.sh/mywebhook/trigger\")\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mywebhook/trigger');\n</code></pre> <p>To add a custom message, simply append the <code>message=</code> URL parameter. And of course you can set the  message priority, the message title, and tags as well.  For a full list of possible parameters, check the list of supported parameters and headers.</p> <p>Here's an example with a custom message, tags and a priority:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \"ntfy.sh/mywebhook/publish?message=Webhook+triggered&amp;priority=high&amp;tags=warning,skull\"\n</code></pre> <pre><code>ntfy publish \\\n    -p 5 --tags=warning,skull \\\n    mywebhook \"Webhook triggered\"\n</code></pre> <pre><code>GET /mywebhook/publish?message=Webhook+triggered&amp;priority=high&amp;tags=warning,skull HTTP/1.1\nHost: ntfy.sh\n</code></pre> <pre><code>fetch('https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&amp;priority=high&amp;tags=warning,skull')\n</code></pre> <pre><code>http.Get(\"https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&amp;priority=high&amp;tags=warning,skull\")\n</code></pre> <pre><code>Invoke-RestMethod \"ntfy.sh/mywebhook/publish?message=Webhook+triggered&amp;priority=high&amp;tags=warning,skull\"\n</code></pre> <pre><code>requests.get(\"https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&amp;priority=high&amp;tags=warning,skull\")\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&amp;priority=high&amp;tags=warning,skull');\n</code></pre>"},{"location":"publish/#message-templating","title":"Message templating","text":"<p>Supported on: </p> <p>Templating lets you format a JSON message body into human-friendly message and title text using Go templates (see tutorials here,  here, and here). This is specifically useful when combined with webhooks from services such as GitHub, Grafana, or other services that emit JSON webhooks.</p> <p>Instead of using a separate bridge program to parse the webhook body into the format ntfy expects, you can include a templated message and/or a templated title which will be populated based on the fields of the webhook body (so long as the webhook body is valid JSON).</p> <p>You can enable templating by setting the <code>X-Template</code> header (or its aliases <code>Template</code> or <code>tpl</code>) to <code>yes</code> or <code>1</code>, or (more appropriately for webhooks) by setting the <code>?template=yes</code> query parameter. Then, include templates in your <code>message</code> and/or <code>title</code>, using the following stanzas (see Go docs for detailed syntax):</p> <ul> <li>Variables,, e.g. <code>{{.alert.title}}</code> or <code>An error occurred: {{.error.desc}}</code></li> <li>Conditionals (if/else, e.g. <code>{{if eq .action \"opened\"}}..{{else}}..{{end}}</code>, see example)</li> <li>Loops (e.g. <code>{{range .errors}}..{{end}}</code>, see example)</li> </ul> <p>A good way to experiment with Go templates is the Go Template Playground. It is highly recommended to test your templates there first (example for Grafana alert).</p> <p>Info</p> <p>Please note that the Go templating language is quite terrible. My apologies for using it for this feature. It is the best option for Go-based programs like ntfy. Stay calm and don't harm yourself or others in despair. You can do it. I believe in you!</p> <p>Here's an example for a Grafana alert:</p> <p> </p> Grafana webhook, formatted using templates <p>This was sent using the following templates and payloads</p> Message templateTitle templateEncoded webhook URLGrafana-sent payload <pre><code>{{range .alerts}}\n  {{.annotations.summary}}\n\n  Values:\n  {{range $k,$v := .values}}\n    - {{$k}}={{$v}}\n  {{end}}\n{{end}}\n</code></pre> <pre><code>{{.title}}\n</code></pre> <pre><code># Additional URL encoding (see https://www.urlencoder.org/) is necessary for Grafana, \n# and may be required for other tools too\n\nhttps://ntfy.sh/mytopic?tpl=1&amp;t=%7B%7B.title%7D%7D&amp;m=%7B%7Brange%20.alerts%7D%7D%7B%7B.annotations.summary%7D%7D%5Cn%5CnValues%3A%5Cn%7B%7Brange%20%24k%2C%24v%20%3A%3D%20.values%7D%7D-%20%7B%7B%24k%7D%7D%3D%7B%7B%24v%7D%7D%5Cn%7B%7Bend%7D%7D%7B%7Bend%7D%7D\n</code></pre> <pre><code>{\"receiver\":\"ntfy\\\\.example\\\\.com/alerts\",\"status\":\"resolved\",\"alerts\":[{\"status\":\"resolved\",\"labels\":{\"alertname\":\"Load avg 15m too high\",\"grafana_folder\":\"Node alerts\",\"instance\":\"10.108.0.2:9100\",\"job\":\"node-exporter\"},\"annotations\":{\"summary\":\"15m load average too high\"},\"startsAt\":\"2024-03-15T02:28:00Z\",\"endsAt\":\"2024-03-15T02:42:00Z\",\"generatorURL\":\"localhost:3000/alerting/grafana/NW9oDw-4z/view\",\"fingerprint\":\"becbfb94bd81ef48\",\"silenceURL\":\"localhost:3000/alerting/silence/new?alertmanager=grafana&amp;matcher=alertname%3DLoad+avg+15m+too+high&amp;matcher=grafana_folder%3DNode+alerts&amp;matcher=instance%3D10.108.0.2%3A9100&amp;matcher=job%3Dnode-exporter\",\"dashboardURL\":\"\",\"panelURL\":\"\",\"values\":{\"B\":18.98211314475876,\"C\":0},\"valueString\":\"[ var='B' labels={__name__=node_load15, instance=10.108.0.2:9100, job=node-exporter} value=18.98211314475876 ], [ var='C' labels={__name__=node_load15, instance=10.108.0.2:9100, job=node-exporter} value=0 ]\"}],\"groupLabels\":{\"alertname\":\"Load avg 15m too high\",\"grafana_folder\":\"Node alerts\"},\"commonLabels\":{\"alertname\":\"Load avg 15m too high\",\"grafana_folder\":\"Node alerts\",\"instance\":\"10.108.0.2:9100\",\"job\":\"node-exporter\"},\"commonAnnotations\":{\"summary\":\"15m load average too high\"},\"externalURL\":\"localhost:3000/\",\"version\":\"1\",\"groupKey\":\"{}:{alertname=\\\"Load avg 15m too high\\\", grafana_folder=\\\"Node alerts\\\"}\",\"truncatedAlerts\":0,\"orgId\":1,\"title\":\"[RESOLVED] Load avg 15m too high Node alerts (10.108.0.2:9100 node-exporter)\",\"state\":\"ok\",\"message\":\"**Resolved**\\n\\nValue: B=18.98211314475876, C=0\\nLabels:\\n - alertname = Load avg 15m too high\\n - grafana_folder = Node alerts\\n - instance = 10.108.0.2:9100\\n - job = node-exporter\\nAnnotations:\\n - summary = 15m load average too high\\nSource: localhost:3000/alerting/grafana/NW9oDw-4z/view\\nSilence: localhost:3000/alerting/silence/new?alertmanager=grafana&amp;matcher=alertname%3DLoad+avg+15m+too+high&amp;matcher=grafana_folder%3DNode+alerts&amp;matcher=instance%3D10.108.0.2%3A9100&amp;matcher=job%3Dnode-exporter\\n\"}\n</code></pre> <p>Here's an easier example with a shorter JSON payload:</p> Command line (curl)HTTPJavaScriptGoPowerShellPythonPHP <pre><code># To use { and } in the URL without encoding, we need to turn of\n# curl's globbing using --globoff\n\ncurl \\\n    --globoff \\\n    -d '{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}' \\\n    'ntfy.sh/mytopic?tpl=yes&amp;t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&amp;m=Error+message:+{{.error.desc}}'\n</code></pre> <pre><code>POST /mytopic?tpl=yes&amp;t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&amp;m=Error+message:+{{.error.desc}} HTTP/1.1\nHost: ntfy.sh\n\n{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}\n</code></pre> <pre><code>fetch('https://ntfy.sh/mytopic?tpl=yes&amp;t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&amp;m=Error+message:+{{.error.desc}}', {\n    method: 'POST',\n    body: '{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}'\n})\n</code></pre> <pre><code>body := `{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}`\nuri := \"https://ntfy.sh/mytopic?tpl=yes&amp;t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&amp;m=Error+message:+{{.error.desc}}\"\nreq, _ := http.NewRequest(\"POST\", uri, strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n    Method = \"POST\"\n    URI = \"https://ntfy.sh/mytopic?tpl=yes&amp;t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&amp;m=Error+message:+{{.error.desc}}\"\n    Body = '{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}'\n    ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\n    \"https://ntfy.sh/mytopic?tpl=yes&amp;t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&amp;m=Error+message:+{{.error.desc}}\",\n    data='{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}'\n)\n</code></pre> <pre><code>file_get_contents(\"https://ntfy.sh/mytopic?tpl=yes&amp;t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&amp;m=Error+message:+{{.error.desc}}\", false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt; \"Content-Type: application/json\",\n        'content' =&gt; '{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}'\n    ]\n]));\n</code></pre> <p>This example uses the <code>message</code>/<code>m</code> and <code>title</code>/<code>t</code> query parameters, but obviously this also works with the corresponding <code>Message</code>/<code>Title</code> headers. It will send a notification with a title <code>phil-pc: A severe error has occurred</code> and a message <code>Error message: Disk has run out of space</code>.</p>"},{"location":"publish/#publish-as-json","title":"Publish as JSON","text":"<p>Supported on: </p> <p>For some integrations with other tools (e.g. Jellyfin, overseerr),  adding custom headers to HTTP requests may be tricky or impossible, so ntfy also allows publishing the entire message  as JSON in the request body.</p> <p>To publish as JSON, simple PUT/POST the JSON object directly to the ntfy root URL. The message format is described below the example.</p> <p>Info</p> <p>To publish as JSON, you must PUT/POST to the ntfy root URL, not to the topic URL. Be sure to check that you're POST-ing to <code>https://ntfy.sh/</code> (correct), and not to <code>https://ntfy.sh/mytopic</code> (incorrect). </p> <p>Here's an example using most supported parameters. Check the table below for a complete list. The <code>topic</code> parameter  is the only required one:</p> Command line (curl)HTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl ntfy.sh \\\n  -d '{\n    \"topic\": \"mytopic\",\n    \"message\": \"Disk space is low at 5.1 GB\",\n    \"title\": \"Low disk space alert\",\n    \"tags\": [\"warning\",\"cd\"],\n    \"priority\": 4,\n    \"attach\": \"https://filesrv.lan/space.jpg\",\n    \"filename\": \"diskspace.jpg\",\n    \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n    \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n  }'\n</code></pre> <pre><code>POST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"mytopic\",\n    \"message\": \"Disk space is low at 5.1 GB\",\n    \"title\": \"Low disk space alert\",\n    \"tags\": [\"warning\",\"cd\"],\n    \"priority\": 4,\n    \"attach\": \"https://filesrv.lan/space.jpg\",\n    \"filename\": \"diskspace.jpg\",\n    \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n    \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n}\n</code></pre> <pre><code>fetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        \"topic\": \"mytopic\",\n        \"message\": \"Disk space is low at 5.1 GB\",\n        \"title\": \"Low disk space alert\",\n        \"tags\": [\"warning\",\"cd\"],\n        \"priority\": 4,\n        \"attach\": \"https://filesrv.lan/space.jpg\",\n        \"filename\": \"diskspace.jpg\",\n        \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n        \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n    })\n})\n</code></pre> <pre><code>// You should probably use json.Marshal() instead and make a proper struct,\n// or even just use req.Header.Set() like in the other examples, but for the \n// sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"mytopic\",\n    \"message\": \"Disk space is low at 5.1 GB\",\n    \"title\": \"Low disk space alert\",\n    \"tags\": [\"warning\",\"cd\"],\n    \"priority\": 4,\n    \"attach\": \"https://filesrv.lan/space.jpg\",\n    \"filename\": \"diskspace.jpg\",\n    \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n    \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-JSON @{\n    Topic    = \"mytopic\"\n    Title    = \"Low disk space alert\"\n    Message  = \"Disk space is low at 5.1 GB\"\n    Priority = 4\n    Attach   = \"https://filesrv.lan/space.jpg\"\n    FileName = \"diskspace.jpg\"\n    Tags     = @(\"warning\", \"cd\")\n    Click    = \"https://homecamera.lan/xasds1h2xsSsa/\"\n    Actions  = @(\n      @{ \n        Action = \"view\"\n        Label  = \"Admin panel\"\n        URL    = \"https://filesrv.lan/admin\"\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"mytopic\",\n        \"message\": \"Disk space is low at 5.1 GB\",\n        \"title\": \"Low disk space alert\",\n        \"tags\": [\"warning\",\"cd\"],\n        \"priority\": 4,\n        \"attach\": \"https://filesrv.lan/space.jpg\",\n        \"filename\": \"diskspace.jpg\",\n        \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n        \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n    })\n)\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt; \"Content-Type: application/json\",\n        'content' =&gt; json_encode([\n            \"topic\": \"mytopic\",\n            \"message\": \"Disk space is low at 5.1 GB\",\n            \"title\": \"Low disk space alert\",\n            \"tags\": [\"warning\",\"cd\"],\n            \"priority\": 4,\n            \"attach\": \"https://filesrv.lan/space.jpg\",\n            \"filename\": \"diskspace.jpg\",\n            \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n            \"actions\": [[\"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" ]]\n        ])\n    ]\n]));\n</code></pre> <p>The JSON message format closely mirrors the format of the message you can consume when you subscribe via the API  (see JSON message format for details), but is not exactly identical. Here's an overview of all the supported fields:</p> Field Required Type Example Description <code>topic</code> \u2714\ufe0f string <code>topic1</code> Target topic name <code>message</code> - string <code>Some message</code> Message body; set to <code>triggered</code> if empty or not passed <code>title</code> - string <code>Some title</code> Message title <code>tags</code> - string array <code>[\"tag1\",\"tag2\"]</code> List of tags that may or not map to emojis <code>priority</code> - int (one of: 1, 2, 3, 4, or 5) <code>4</code> Message priority with 1=min, 3=default and 5=max <code>actions</code> - JSON array (see action buttons) Custom user action buttons for notifications <code>click</code> - URL <code>https://example.com</code> Website opened when notification is clicked <code>attach</code> - URL <code>https://example.com/file.jpg</code> URL of an attachment, see attach via URL <code>markdown</code> - bool <code>true</code> Set to true if the <code>message</code> is Markdown-formatted <code>icon</code> - string <code>https://example.com/icon.png</code> URL to use as notification icon <code>filename</code> - string <code>file.jpg</code> File name of the attachment <code>delay</code> - string <code>30min</code>, <code>9am</code> Timestamp or duration for delayed delivery <code>email</code> - e-mail address <code>phil@example.com</code> E-mail address for e-mail notifications <code>call</code> - phone number or 'yes' <code>+1222334444</code> or <code>yes</code> Phone number to use for voice call"},{"location":"publish/#action-buttons","title":"Action buttons","text":"<p>Supported on: </p> <p>You can add action buttons to notifications to allow yourself to react to a notification directly. This is incredibly useful and has countless applications. </p> <p>You can control your home appliances (open/close garage door, change temperature on thermostat, ...), react to common  monitoring alerts (clear logs when disk is full, ...), and many other things. The sky is the limit.</p> <p>As of today, the following actions are supported:</p> <ul> <li><code>view</code>: Opens a website or app when the action button is tapped</li> <li><code>broadcast</code>: Sends an Android broadcast intent   when the action button is tapped (only supported on Android)</li> <li><code>http</code>: Sends HTTP POST/GET/PUT request when the action button is tapped</li> </ul> <p>Here's an example of what a notification with actions can look like:</p> <p> </p> Notification with two user actions"},{"location":"publish/#defining-actions","title":"Defining actions","text":"<p>You can define up to three user actions in your notifications, using either of the following methods:</p> <ul> <li>In the <code>X-Actions</code> header, using a simple comma-separated format</li> <li>As a JSON array in the <code>actions</code> key, when publishing as JSON </li> </ul>"},{"location":"publish/#using-a-header","title":"Using a header","text":"<p>To define actions using the <code>X-Actions</code> header (or any of its aliases: <code>Actions</code>, <code>Action</code>), use the following format:</p> Header format (long)Header format (short) <pre><code>action=&lt;action1&gt;, label=&lt;label1&gt;, paramN=... [; action=&lt;action2&gt;, label=&lt;label2&gt;, ...]\n</code></pre> <pre><code>&lt;action1&gt;, &lt;label1&gt;, paramN=... [; &lt;action2&gt;, &lt;label2&gt;, ...]\n</code></pre> <p>Multiple actions are separated by a semicolon (<code>;</code>), and key/value pairs are separated by commas (<code>,</code>). Values may be  quoted with double quotes (<code>\"</code>) or single quotes (<code>'</code>) if the value itself contains commas or semicolons. </p> <p>The <code>action=</code> and <code>label=</code> prefix are optional in all actions, and the <code>url=</code> prefix is optional in the <code>view</code> and  <code>http</code> action. The only limitation of this format is that depending on your language/library, UTF-8 characters may not  work. If they don't, use the JSON array format instead.</p> <p>As an example, here's how you can create the above notification using this format. Refer to the <code>view</code> action and  <code>http</code> action section for details on the specific actions:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>body='{\"temperature\": 65}'\ncurl \\\n    -d \"You left the house. Turn down the A/C?\" \\\n    -H \"Actions: view, Open portal, https://home.nest.com/, clear=true; \\\n                 http, Turn down, https://api.nest.com/, body='$body'\" \\\n    ntfy.sh/myhome\n</code></pre> <pre><code>body='{\"temperature\": 65}'\nntfy publish \\\n    --actions=\"view, Open portal, https://home.nest.com/, clear=true; \\\n               http, Turn down, https://api.nest.com/, body='$body'\" \\\n    myhome \\\n    \"You left the house. Turn down the A/C?\"\n</code></pre> <pre><code>POST /myhome HTTP/1.1\nHost: ntfy.sh\nActions: view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\"temperature\": 65}'\n\nYou left the house. Turn down the A/C?\n</code></pre> <pre><code>fetch('https://ntfy.sh/myhome', {\n    method: 'POST',\n    body: 'You left the house. Turn down the A/C?',\n    headers: { \n        'Actions': 'view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body=\\'{\"temperature\": 65}\\'' \n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/myhome\", strings.NewReader(\"You left the house. Turn down the A/C?\"))\nreq.Header.Set(\"Actions\", \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/myhome\"\n  Headers = @{\n    Actions=\"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\"\n  }\n  Body = \"You left the house. Turn down the A/C?\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/myhome\",\n    data=\"You left the house. Turn down the A/C?\",\n    headers={ \"Actions\": \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/reddit_alerts', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Actions: view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\",\n        'content' =&gt; 'You left the house. Turn down the A/C?'\n    ]\n]));\n</code></pre> <p>Info</p> <p>ntfy supports UTF-8 in HTTP headers, but not every library or programming language does. If non-ASCII characters are causing issues for you in the title (i.e. you're seeing <code>?</code> symbols), you may also encode any header (including actions)  as RFC 2047, e.g. <code>=?UTF-8?B?8J+HqfCfh6o=?=</code> (base64), or <code>=?UTF-8?Q?=C3=84pfel?=</code> (quoted-printable).</p>"},{"location":"publish/#using-a-json-array","title":"Using a JSON array","text":"<p>Alternatively, the same actions can be defined as JSON array, if the notification is defined as part of the JSON body  (see publish as JSON):</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl ntfy.sh \\\n  -d '{\n    \"topic\": \"myhome\",\n    \"message\": \"You left the house. Turn down the A/C?\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open portal\",\n        \"url\": \"https://home.nest.com/\",\n        \"clear\": true\n      },\n      {\n        \"action\": \"http\",\n        \"label\": \"Turn down\",\n        \"url\": \"https://api.nest.com/\",\n        \"body\": \"{\\\"temperature\\\": 65}\"\n      }\n    ]\n  }'\n</code></pre> <pre><code>ntfy publish \\\n    --actions '[\n        {\n            \"action\": \"view\",\n            \"label\": \"Open portal\",\n            \"url\": \"https://home.nest.com/\",\n            \"clear\": true\n        },\n        {\n            \"action\": \"http\",\n            \"label\": \"Turn down\",\n            \"url\": \"https://api.nest.com/\",\n            \"body\": \"{\\\"temperature\\\": 65}\"\n        }\n    ]' \\\n    myhome \\\n    \"You left the house. Turn down the A/C?\"\n</code></pre> <pre><code>POST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"myhome\",\n    \"message\": \"You left the house. Turn down the A/C?\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open portal\",\n        \"url\": \"https://home.nest.com/\",\n        \"clear\": true\n      },\n      {\n        \"action\": \"http\",\n        \"label\": \"Turn down\",\n        \"url\": \"https://api.nest.com/\",\n        \"body\": \"{\\\"temperature\\\": 65}\"\n      }\n    ]\n}\n</code></pre> <pre><code>fetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        topic: \"myhome\",\n        message: \"You left the house. Turn down the A/C?\",\n        actions: [\n            {\n                action: \"view\",\n                label: \"Open portal\",\n                url: \"https://home.nest.com/\",\n                clear: true\n            },\n            {\n                action: \"http\",\n                label: \"Turn down\",\n                url: \"https://api.nest.com/\",\n                body: \"{\\\"temperature\\\": 65}\"\n            }\n        ]\n    })\n})\n</code></pre> <pre><code>// You should probably use json.Marshal() instead and make a proper struct,\n// but for the sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"myhome\",\n    \"message\": \"You left the house. Turn down the A/C?\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open portal\",\n        \"url\": \"https://home.nest.com/\",\n        \"clear\": true\n      },\n      {\n        \"action\": \"http\",\n        \"label\": \"Turn down\",\n        \"url\": \"https://api.nest.com/\",\n        \"body\": \"{\\\"temperature\\\": 65}\"\n      }\n    ]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-JSON @{\n    Topic   = \"myhome\"\n    Message = \"You left the house. Turn down the A/C?\"\n    Actions = @(\n      @{\n        Action = \"view\"\n        Label  = \"Open portal\"\n        URL    = \"https://home.nest.com/\"\n        Clear  = $true\n      },\n      @{\n        Action = \"http\"\n        Label  = \"Turn down\"\n        URL    = \"https://api.nest.com/\"\n        Body   = '{\"temperature\": 65}'\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"myhome\",\n        \"message\": \"You left the house. Turn down the A/C?\",\n        \"actions\": [\n            {\n                \"action\": \"view\",\n                \"label\": \"Open portal\",\n                \"url\": \"https://home.nest.com/\",\n                \"clear\": true\n            },\n            {\n                \"action\": \"http\",\n                \"label\": \"Turn down\",\n                \"url\": \"https://api.nest.com/\",\n                \"body\": \"{\\\"temperature\\\": 65}\"\n            }\n        ]\n    })\n)\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt; \"Content-Type: application/json\",\n        'content' =&gt; json_encode([\n            \"topic\": \"myhome\",\n            \"message\": \"You left the house. Turn down the A/C?\",\n            \"actions\": [\n                [\n                    \"action\": \"view\",\n                    \"label\": \"Open portal\",\n                    \"url\": \"https://home.nest.com/\",\n                    \"clear\": true\n                ],\n                [\n                    \"action\": \"http\",\n                    \"label\": \"Turn down\",\n                    \"url\": \"https://api.nest.com/\",\n                    \"headers\": [\n                        \"Authorization\": \"Bearer ...\"\n                    ],\n                    \"body\": \"{\\\"temperature\\\": 65}\"\n                ]\n            ]\n        ])\n    ]\n]));\n</code></pre> <p>The required/optional fields for each action depend on the type of the action itself. Please refer to  <code>view</code> action, <code>broadcast</code> action, and <code>http</code> action  for details.</p>"},{"location":"publish/#open-websiteapp","title":"Open website/app","text":"<p>Supported on: </p> <p>The <code>view</code> action opens a website or app when the action button is tapped, e.g. a browser, a Google Maps location, or even a deep link into Twitter or a show ntfy topic. How exactly the action is handled depends on how Android and your  desktop browser treat the links. Normally it'll just open a link in the browser. </p> <p>Examples:</p> <ul> <li><code>http://</code> or <code>https://</code> will open your browser (or an app if it registered for a URL)</li> <li><code>mailto:</code> links will open your mail app, e.g. <code>mailto:phil@example.com</code></li> <li><code>geo:</code> links will open Google Maps, e.g. <code>geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+CA</code></li> <li><code>ntfy://</code> links will open ntfy (see ntfy:// links), e.g. <code>ntfy://ntfy.sh/stats</code></li> <li><code>twitter://</code> links will open Twitter, e.g. <code>twitter://user?screen_name=..</code></li> <li>...</li> </ul> <p>Here's an example using the <code>X-Actions</code> header:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -d \"Somebody retweeted your tweet.\" \\\n    -H \"Actions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" \\\nntfy.sh/myhome\n</code></pre> <pre><code>ntfy publish \\\n    --actions=\"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" \\\n    myhome \\\n    \"Somebody retweeted your tweet.\"\n</code></pre> <pre><code>POST /myhome HTTP/1.1\nHost: ntfy.sh\nActions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\n\nSomebody retweeted your tweet.\n</code></pre> <pre><code>fetch('https://ntfy.sh/myhome', {\n    method: 'POST',\n    body: 'Somebody retweeted your tweet.',\n    headers: { \n        'Actions': 'view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392' \n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/myhome\", strings.NewReader(\"Somebody retweeted your tweet.\"))\nreq.Header.Set(\"Actions\", \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/myhome\"\n  Headers = @{\n    Actions = \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\"\n  }\n  Body = \"Somebody retweeted your tweet.\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/myhome\",\n    data=\"Somebody retweeted your tweet.\",\n    headers={ \"Actions\": \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/reddit_alerts', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Actions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\",\n        'content' =&gt; 'Somebody retweeted your tweet.'\n    ]\n]));\n</code></pre> <p>And the same example using JSON publishing:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl ntfy.sh \\\n  -d '{\n    \"topic\": \"myhome\",\n    \"message\": \"Somebody retweeted your tweet.\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open Twitter\",\n        \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n      }\n    ]\n  }'\n</code></pre> <pre><code>ntfy publish \\\n    --actions '[\n        {\n            \"action\": \"view\",\n            \"label\": \"Open Twitter\",\n            \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n        }\n    ]' \\\n    myhome \\\n    \"Somebody retweeted your tweet.\"\n</code></pre> <pre><code>POST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"myhome\",\n    \"message\": \"Somebody retweeted your tweet.\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open Twitter\",\n        \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n      }\n    ]\n}\n</code></pre> <pre><code>fetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        topic: \"myhome\",\n        message\": \"Somebody retweeted your tweet.\",\n        actions: [\n            {\n                action: \"view\",\n                label: \"Open Twitter\",\n                url: \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n            }\n        ]\n    })\n})\n</code></pre> <pre><code>// You should probably use json.Marshal() instead and make a proper struct,\n// but for the sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"myhome\",\n    \"message\": \"Somebody retweeted your tweet.\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open Twitter\",\n        \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n      }\n    ]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-JSON @{\n    Topic = \"myhome\"\n    Message = \"Somebody retweeted your tweet.\"\n    Actions = @(\n      @{\n        Action = \"view\"\n        Label  = \"Open Twitter\"\n        URL    = \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"myhome\",\n        \"message\": \"Somebody retweeted your tweet.\",\n        \"actions\": [\n            {\n                \"action\": \"view\",\n                \"label\": \"Open Twitter\",\n                \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n            }\n        ]\n    })\n)\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt; \"Content-Type: application/json\",\n        'content' =&gt; json_encode([\n            \"topic\": \"myhome\",\n            \"message\": \"Somebody retweeted your tweet.\",\n            \"actions\": [\n                [\n                    \"action\": \"view\",\n                    \"label\": \"Open Twitter\",\n                    \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n                ]\n            ]\n        ])\n    ]\n]));\n</code></pre> <p>The <code>view</code> action supports the following fields:</p> Field Required Type Default Example Description <code>action</code> \u2714\ufe0f string - <code>view</code> Action type (must be <code>view</code>) <code>label</code> \u2714\ufe0f string - <code>Turn on light</code> Label of the action button in the notification <code>url</code> \u2714\ufe0f URL - <code>https://example.com</code> URL to open when action is tapped <code>clear</code> -\ufe0f boolean <code>false</code> <code>true</code> Clear notification after action button is tapped"},{"location":"publish/#send-android-broadcast","title":"Send Android broadcast","text":"<p>Supported on: </p> <p>The <code>broadcast</code> action sends an Android broadcast intent when the action button is tapped. This allows integration into automation apps such as MacroDroid or Tasker, which basically means you can do everything your phone is capable of. Examples include taking pictures, launching/killing apps, change device settings, write/read files, etc.</p> <p>By default, the intent action <code>io.heckel.ntfy.USER_ACTION</code> is broadcast, though this can be changed with the <code>intent</code> parameter (see below). To send extras, use the <code>extras</code> parameter. Currently, only string extras are supported.</p> <p>Info</p> <p>If you have no idea what this is, check out the automation apps section, which shows how to integrate Tasker and MacroDroid with screenshots. The action button integration is identical, except that you have to use the intent action <code>io.heckel.ntfy.USER_ACTION</code> instead.</p> <p>Here's an example using the <code>X-Actions</code> header:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -d \"Your wife requested you send a picture of yourself.\" \\\n    -H \"Actions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\" \\\nntfy.sh/wifey\n</code></pre> <pre><code>ntfy publish \\\n    --actions=\"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" \\\n    wifey \\\n    \"Your wife requested you send a picture of yourself.\"\n</code></pre> <pre><code>POST /wifey HTTP/1.1\nHost: ntfy.sh\nActions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\n\nYour wife requested you send a picture of yourself.\n</code></pre> <pre><code>fetch('https://ntfy.sh/wifey', {\n    method: 'POST',\n    body: 'Your wife requested you send a picture of yourself.',\n    headers: { \n        'Actions': 'broadcast, Take picture, extras.cmd=pic, extras.camera=front' \n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/wifey\", strings.NewReader(\"Your wife requested you send a picture of yourself.\"))\nreq.Header.Set(\"Actions\", \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/wifey\"\n  Headers = @{\n    Actions = \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\"\n  }\n  Body = \"Your wife requested you send a picture of yourself.\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/wifey\",\n    data=\"Your wife requested you send a picture of yourself.\",\n    headers={ \"Actions\": \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/wifey', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Actions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\",\n        'content' =&gt; 'Your wife requested you send a picture of yourself.'\n    ]\n]));\n</code></pre> <p>And the same example using JSON publishing:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl ntfy.sh \\\n  -d '{\n    \"topic\": \"wifey\",\n    \"message\": \"Your wife requested you send a picture of yourself.\",\n    \"actions\": [\n      {\n        \"action\": \"broadcast\",\n        \"label\": \"Take picture\",\n        \"extras\": {\n            \"cmd\": \"pic\",\n            \"camera\": \"front\"\n        }\n      }\n    ]\n  }'\n</code></pre> <pre><code>ntfy publish \\\n    --actions '[\n        {\n            \"action\": \"broadcast\",\n            \"label\": \"Take picture\",\n            \"extras\": {\n                \"cmd\": \"pic\",\n                \"camera\": \"front\"\n            }\n        }\n    ]' \\\n    wifey \\\n    \"Your wife requested you send a picture of yourself.\"\n</code></pre> <pre><code>POST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"wifey\",\n    \"message\": \"Your wife requested you send a picture of yourself.\",\n    \"actions\": [\n      {\n        \"action\": \"broadcast\",\n        \"label\": \"Take picture\",\n        \"extras\": {\n            \"cmd\": \"pic\",\n            \"camera\": \"front\"\n        }\n      }\n    ]\n}\n</code></pre> <pre><code>fetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        topic: \"wifey\",\n        message\": \"Your wife requested you send a picture of yourself.\",\n        actions: [\n            {\n                \"action\": \"broadcast\",\n                \"label\": \"Take picture\",\n                \"extras\": {\n                    \"cmd\": \"pic\",\n                    \"camera\": \"front\"\n                }\n            }\n        ]\n    })\n})\n</code></pre> <pre><code>// You should probably use json.Marshal() instead and make a proper struct,\n// but for the sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"wifey\",\n    \"message\": \"Your wife requested you send a picture of yourself.\",\n    \"actions\": [\n      {\n        \"action\": \"broadcast\",\n        \"label\": \"Take picture\",\n        \"extras\": {\n            \"cmd\": \"pic\",\n            \"camera\": \"front\"\n        }\n      }\n    ]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code># Powershell requires the 'Depth' argument to equal 3 here to expand 'Extras',\n# otherwise it will read System.Collections.Hashtable in the returned JSON\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-Json -Depth 3 @{\n    Topic = \"wifey\"\n    Message = \"Your wife requested you send a picture of yourself.\"\n    Actions = @(\n      @{\n        Action = \"broadcast\"\n        Label = \"Take picture\"\n        Extras = @{\n          CMD =\"pic\"\n          Camera = \"front\"\n        }\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"wifey\",\n        \"message\": \"Your wife requested you send a picture of yourself.\",\n        \"actions\": [\n            {\n                \"action\": \"broadcast\",\n                \"label\": \"Take picture\",\n                \"extras\": {\n                    \"cmd\": \"pic\",\n                    \"camera\": \"front\"\n                }\n            }\n        ]\n    })\n)\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt; \"Content-Type: application/json\",\n        'content' =&gt; json_encode([\n            \"topic\": \"wifey\",\n            \"message\": \"Your wife requested you send a picture of yourself.\",\n            \"actions\": [\n                [\n                \"action\": \"broadcast\",\n                \"label\": \"Take picture\",\n                \"extras\": [\n                    \"cmd\": \"pic\",\n                    \"camera\": \"front\"\n                ]\n            ]\n        ])\n    ]\n]));\n</code></pre> <p>The <code>broadcast</code> action supports the following fields:</p> Field Required Type Default Example Description <code>action</code> \u2714\ufe0f string - <code>broadcast</code> Action type (must be <code>broadcast</code>) <code>label</code> \u2714\ufe0f string - <code>Turn on light</code> Label of the action button in the notification <code>intent</code> -\ufe0f string <code>io.heckel.ntfy.USER_ACTION</code> <code>com.example.AN_INTENT</code> Android intent name, default is <code>io.heckel.ntfy.USER_ACTION</code> <code>extras</code> -\ufe0f map of strings - see above Android intent extras. Currently, only string extras are supported. When publishing as JSON, extras are passed as a map. When the simple format is used, use <code>extras.&lt;param&gt;=&lt;value&gt;</code>. <code>clear</code> -\ufe0f boolean <code>false</code> <code>true</code> Clear notification after action button is tapped"},{"location":"publish/#send-http-request","title":"Send HTTP request","text":"<p>Supported on: </p> <p>The <code>http</code> action sends a HTTP request when the action button is tapped. You can use this to trigger REST APIs for whatever systems you have, e.g. opening the garage door, or turning on/off lights.</p> <p>By default, this action sends a POST request (not GET!), though this can be changed with the <code>method</code> parameter. The only required parameter is <code>url</code>. Headers can be passed along using the <code>headers</code> parameter.  </p> <p>Here's an example using the <code>X-Actions</code> header:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -d \"Garage door has been open for 15 minutes. Close it?\" \\\n    -H \"Actions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" \\\n    ntfy.sh/myhome\n</code></pre> <pre><code>ntfy publish \\\n    --actions=\"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" \\\n    myhome \\\n    \"Garage door has been open for 15 minutes. Close it?\"\n</code></pre> <pre><code>POST /myhome HTTP/1.1\nHost: ntfy.sh\nActions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\"action\": \"close\"}\n\nGarage door has been open for 15 minutes. Close it?\n</code></pre> <pre><code>fetch('https://ntfy.sh/myhome', {\n    method: 'POST',\n    body: 'Garage door has been open for 15 minutes. Close it?',\n    headers: { \n        'Actions': 'http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}' \n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/myhome\", strings.NewReader(\"Garage door has been open for 15 minutes. Close it?\"))\nreq.Header.Set(\"Actions\", \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/myhome\"\n  Headers = @{\n    Actions=\"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\"\n  }\n  Body = \"Garage door has been open for 15 minutes. Close it?\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/myhome\",\n    data=\"Garage door has been open for 15 minutes. Close it?\",\n    headers={ \"Actions\": \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/reddit_alerts', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            'Actions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}',\n        'content' =&gt; 'Garage door has been open for 15 minutes. Close it?'\n    ]\n]));\n</code></pre> <p>And the same example using JSON publishing:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl ntfy.sh \\\n  -d '{\n    \"topic\": \"myhome\",\n    \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n    \"actions\": [\n      {\n        \"action\": \"http\",\n        \"label\": \"Close door\",\n        \"url\": \"https://api.mygarage.lan/\",\n        \"method\": \"PUT\",\n        \"headers\": {\n            \"Authorization\": \"Bearer zAzsx1sk..\"\n        },\n        \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n      }\n    ]\n  }'\n</code></pre> <pre><code>ntfy publish \\\n    --actions '[\n        {\n          \"action\": \"http\",\n          \"label\": \"Close door\",\n          \"url\": \"https://api.mygarage.lan/\",\n          \"method\": \"PUT\",\n          \"headers\": {\n            \"Authorization\": \"Bearer zAzsx1sk..\"\n          },\n          \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n        }\n    ]' \\\n    myhome \\\n    \"Garage door has been open for 15 minutes. Close it?\"\n</code></pre> <pre><code>POST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"myhome\",\n    \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n    \"actions\": [\n      {\n        \"action\": \"http\",\n        \"label\": \"Close door\",\n        \"url\": \"https://api.mygarage.lan/\",\n        \"method\": \"PUT\",\n        \"headers\": {\n          \"Authorization\": \"Bearer zAzsx1sk..\"\n        },\n        \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n      }\n    ]\n}\n</code></pre> <pre><code>fetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        topic: \"myhome\",\n        message\": \"Garage door has been open for 15 minutes. Close it?\",\n        actions: [\n          {\n            \"action\": \"http\",\n            \"label\": \"Close door\",\n            \"url\": \"https://api.mygarage.lan/\",\n            \"method\": \"PUT\",\n            \"headers\": {\n              \"Authorization\": \"Bearer zAzsx1sk..\"\n            },\n            \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n          }\n        ]\n    })\n})\n</code></pre> <pre><code>// You should probably use json.Marshal() instead and make a proper struct,\n// but for the sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"myhome\",\n    \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n    \"actions\": [\n      {\n        \"action\": \"http\",\n        \"label\": \"Close door\",\n        \"method\": \"PUT\",\n        \"url\": \"https://api.mygarage.lan/\",\n        \"headers\": {\n          \"Authorization\": \"Bearer zAzsx1sk..\"\n        },\n        \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n      }\n    ]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code># Powershell requires the 'Depth' argument to equal 3 here to expand 'headers', \n# otherwise it will read System.Collections.Hashtable in the returned JSON\n\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-Json -Depth 3 @{\n    Topic   = \"myhome\"\n    Message = \"Garage door has been open for 15 minutes. Close it?\"\n    Actions = @(\n      @{\n        Action  = \"http\"\n        Label   = \"Close door\"\n        URL     = \"https://api.mygarage.lan/\"\n        Method  = \"PUT\"\n        Headers = @{\n          Authorization = \"Bearer zAzsx1sk..\"\n        }\n        Body    = ConvertTo-JSON @{Action = \"close\"}\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"myhome\",\n        \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n        \"actions\": [\n            {\n              \"action\": \"http\",\n              \"label\": \"Close door\",\n              \"url\": \"https://api.mygarage.lan/\",\n              \"method\": \"PUT\",\n              \"headers\": {\n                \"Authorization\": \"Bearer zAzsx1sk..\"\n              },\n              \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n            }\n        ]\n    })\n)\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt; \"Content-Type: application/json\",\n        'content' =&gt; json_encode([\n            \"topic\": \"myhome\",\n            \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n            \"actions\": [\n                [\n                    \"action\": \"http\",\n                    \"label\": \"Close door\",\n                    \"url\": \"https://api.mygarage.lan/\",\n                    \"method\": \"PUT\",\n                    \"headers\": [\n                        \"Authorization\": \"Bearer zAzsx1sk..\"\n                     ],\n                    \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n                ]\n            ]\n        ])\n    ]\n]));\n</code></pre> <p>The <code>http</code> action supports the following fields:</p> Field Required Type Default Example Description <code>action</code> \u2714\ufe0f string - <code>http</code> Action type (must be <code>http</code>) <code>label</code> \u2714\ufe0f string - <code>Open garage door</code> Label of the action button in the notification <code>url</code> \u2714\ufe0f string - <code>https://ntfy.sh/mytopic</code> URL to which the HTTP request will be sent <code>method</code> -\ufe0f GET/POST/PUT/... <code>POST</code> \u26a0\ufe0f <code>GET</code> HTTP method to use for request, default is POST \u26a0\ufe0f <code>headers</code> -\ufe0f map of strings - see above HTTP headers to pass in request. When publishing as JSON, headers are passed as a map. When the simple format is used, use <code>headers.&lt;header1&gt;=&lt;value&gt;</code>. <code>body</code> -\ufe0f string empty <code>some body, somebody?</code> HTTP body <code>clear</code> -\ufe0f boolean <code>false</code> <code>true</code> Clear notification after HTTP request succeeds. If the request fails, the notification is not cleared."},{"location":"publish/#click-action","title":"Click action","text":"<p>Supported on: </p> <p>You can define which URL to open when a notification is clicked. This may be useful if your notification is related  to a Zabbix alert or a transaction that you'd like to provide the deep-link for. Tapping the notification will open the web browser (or the app) and open the website.</p> <p>To define a click action for the notification, pass a URL as the value of the <code>X-Click</code> header (or its alias <code>Click</code>). If you pass a website URL (<code>http://</code> or <code>https://</code>) the web browser will open. If you pass another URI that can be handled by another app, the responsible app may open. </p> <p>Examples:</p> <ul> <li><code>http://</code> or <code>https://</code> will open your browser (or an app if it registered for a URL)</li> <li><code>mailto:</code> links will open your mail app, e.g. <code>mailto:phil@example.com</code></li> <li><code>geo:</code> links will open Google Maps, e.g. <code>geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+CA</code></li> <li><code>ntfy://</code> links will open ntfy (see ntfy:// links), e.g. <code>ntfy://ntfy.sh/stats</code></li> <li><code>twitter://</code> links will open Twitter, e.g. <code>twitter://user?screen_name=..</code></li> <li>...</li> </ul> <p>Here's an example that will open Reddit when the notification is clicked:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -d \"New messages on Reddit\" \\\n    -H \"Click: https://www.reddit.com/message/messages\" \\\n    ntfy.sh/reddit_alerts\n</code></pre> <pre><code>ntfy publish \\\n    --click=\"https://www.reddit.com/message/messages\" \\\n    reddit_alerts \"New messages on Reddit\"\n</code></pre> <pre><code>POST /reddit_alerts HTTP/1.1\nHost: ntfy.sh\nClick: https://www.reddit.com/message/messages \n\nNew messages on Reddit\n</code></pre> <pre><code>fetch('https://ntfy.sh/reddit_alerts', {\n    method: 'POST',\n    body: 'New messages on Reddit',\n    headers: { 'Click': 'https://www.reddit.com/message/messages' }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/reddit_alerts\", strings.NewReader(\"New messages on Reddit\"))\nreq.Header.Set(\"Click\", \"https://www.reddit.com/message/messages\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/reddit_alerts\"\n  Headers = @{ Click=\"https://www.reddit.com/message/messages\" }\n  Body = \"New messages on Reddit\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/reddit_alerts\",\n    data=\"New messages on Reddit\",\n    headers={ \"Click\": \"https://www.reddit.com/message/messages\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/reddit_alerts', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Click: https://www.reddit.com/message/messages\",\n        'content' =&gt; 'New messages on Reddit'\n    ]\n]));\n</code></pre>"},{"location":"publish/#attachments","title":"Attachments","text":"<p>Supported on: </p> <p>You can send images and other files to your phone as attachments to a notification. The attachments are then downloaded onto your phone (depending on size and setting automatically), and can be used from the Downloads folder.</p> <p>There are two different ways to send attachments: </p> <ul> <li>sending a local file via PUT, e.g. from <code>~/Flowers/flower.jpg</code> or <code>ringtone.mp3</code></li> <li>or by passing an external URL as an attachment, e.g. <code>https://f-droid.org/F-Droid.apk</code> </li> </ul>"},{"location":"publish/#attach-local-file","title":"Attach local file","text":"<p>To send a file from your computer as an attachment, you can send it as the PUT request body. If a message is greater  than the maximum message size (4,096 bytes) or consists of non UTF-8 characters, the ntfy server will automatically  detect the mime type and size, and send the message as an attachment file. To send smaller text-only messages or files  as attachments, you must pass a filename by passing the <code>X-Filename</code> header or query parameter (or any of its aliases  <code>Filename</code>, <code>File</code> or <code>f</code>). </p> <p>By default, and how ntfy.sh is configured, the max attachment size is 15 MB (with 100 MB total per visitor).  Attachments expire after 3 hours, which typically is plenty of time for the user to download it, or for the Android app to auto-download it. Please also check out the other limits below.</p> <p>Here's an example showing how to upload an image:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -T flower.jpg \\\n    -H \"Filename: flower.jpg\" \\\n    ntfy.sh/flowers\n</code></pre> <pre><code>ntfy publish \\\n    --file=flower.jpg \\\n    flowers\n</code></pre> <pre><code>PUT /flowers HTTP/1.1\nHost: ntfy.sh\nFilename: flower.jpg\nContent-Type: 52312\n\n(binary JPEG data)\n</code></pre> <pre><code>fetch('https://ntfy.sh/flowers', {\n    method: 'PUT',\n    body: document.getElementById(\"file\").files[0],\n    headers: { 'Filename': 'flower.jpg' }\n})\n</code></pre> <pre><code>file, _ := os.Open(\"flower.jpg\")\nreq, _ := http.NewRequest(\"PUT\", \"https://ntfy.sh/flowers\", file)\nreq.Header.Set(\"Filename\", \"flower.jpg\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  Uri = \"ntfy.sh/flowers\"\n  InFile = \"flower.jpg\"\n  Headers = @{\"Filename\" = \"flower.jpg\"}\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.put(\"https://ntfy.sh/flowers\",\n    data=open(\"flower.jpg\", 'rb'),\n    headers={ \"Filename\": \"flower.jpg\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/flowers', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'PUT',\n        'header' =&gt;\n            \"Content-Type: application/octet-stream\\r\\n\" . // Does not matter\n            \"Filename: flower.jpg\",\n        'content' =&gt; file_get_contents('flower.jpg') // Dangerous for large files \n    ]\n]));\n</code></pre> <p>Here's what that looks like on Android:</p> <p> </p> Image attachment sent from a local file"},{"location":"publish/#attach-file-from-a-url","title":"Attach file from a URL","text":"<p>Instead of sending a local file to your phone, you can use an external URL to specify where the attachment is hosted. This could be a Dropbox link, a file from social media, or any other publicly available URL. Since the files are  externally hosted, the expiration or size limits from above do not apply here.</p> <p>To attach an external file, simple pass the <code>X-Attach</code> header or query parameter (or any of its aliases <code>Attach</code> or <code>a</code>) to specify the attachment URL. It can be any type of file. </p> <p>ntfy will automatically try to derive the file name from the URL (e.g <code>https://example.com/flower.jpg</code> will yield a  filename <code>flower.jpg</code>). To override this filename, you may send the <code>X-Filename</code> header or query parameter (or any of its aliases <code>Filename</code>, <code>File</code> or <code>f</code>).</p> <p>Here's an example showing how to attach an APK file:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -X POST \\\n    -H \"Attach: https://f-droid.org/F-Droid.apk\" \\\n    ntfy.sh/mydownloads\n</code></pre> <pre><code>ntfy publish \\\n    --attach=\"https://f-droid.org/F-Droid.apk\" \\\n    mydownloads\n</code></pre> <pre><code>POST /mydownloads HTTP/1.1\nHost: ntfy.sh\nAttach: https://f-droid.org/F-Droid.apk\n</code></pre> <pre><code>fetch('https://ntfy.sh/mydownloads', {\n    method: 'POST',\n    headers: { 'Attach': 'https://f-droid.org/F-Droid.apk' }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mydownloads\", file)\nreq.Header.Set(\"Attach\", \"https://f-droid.org/F-Droid.apk\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mydownloads\"\n  Headers = @{ Attach=\"https://f-droid.org/F-Droid.apk\" }\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.put(\"https://ntfy.sh/mydownloads\",\n    headers={ \"Attach\": \"https://f-droid.org/F-Droid.apk\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mydownloads', false, stream_context_create([\n    'http' =&gt; [\n    'method' =&gt; 'PUT',\n    'header' =&gt;\n        \"Content-Type: text/plain\\r\\n\" . // Does not matter\n        \"Attach: https://f-droid.org/F-Droid.apk\",\n    ]\n]));\n</code></pre> <p> </p> File attachment sent from an external URL"},{"location":"publish/#icons","title":"Icons","text":"<p>Supported on: </p> <p>You can include an icon that will appear next to the text of the notification. Simply pass the <code>X-Icon</code> header or query parameter (or its alias <code>Icon</code>) to specify the URL that the icon is located at. The client will automatically download the icon (unless it is already cached locally, and less than 24 hours old), and show it in the notification. Icons are  cached locally in the client until the notification is deleted. Only JPEG and PNG images are supported at this time.</p> <p>Here's an example showing how to include an icon:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -H \"Icon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" \\\n    -H \"Title: Kodi: Resuming Playback\" \\\n    -H \"Tags: arrow_forward\" \\\n    -d \"The Wire, S01E01\" \\\n    ntfy.sh/tvshows\n</code></pre> <pre><code>ntfy publish \\\n    --icon=\"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" \\\n    --title=\"Kodi: Resuming Playback\" \\\n    --tags=\"arrow_forward\" \\\n    tvshows \\\n    \"The Wire, S01E01\"\n</code></pre> <pre><code>POST /tvshows HTTP/1.1\nHost: ntfy.sh\nIcon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\nTags: arrow_forward\nTitle: Kodi: Resuming Playback\n\nThe Wire, S01E01\n</code></pre> <pre><code>fetch('https://ntfy.sh/tvshows', {\n    method: 'POST',\n    headers: { \n        'Icon': 'https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png',\n        'Title': 'Kodi: Resuming Playback',\n        'Tags': 'arrow_forward'\n    },\n    body: \"The Wire, S01E01\"\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/tvshows\", strings.NewReader(\"The Wire, S01E01\"))\nreq.Header.Set(\"Icon\", \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\")\nreq.Header.Set(\"Tags\", \"arrow_forward\")\nreq.Header.Set(\"Title\", \"Kodi: Resuming Playback\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/tvshows\"\n  Headers = @{\n    Title = \"Kodi: Resuming Playback\"\n    Tags = \"arrow_forward\"\n    Icon = \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\"\n  }\n  Body = \"The Wire, S01E01\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/tvshows\",\n    data=\"The Wire, S01E01\",\n    headers={\n        \"Title\": \"Kodi: Resuming Playback\",\n        \"Tags\": \"arrow_forward\",\n        \"Icon\": \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\"\n    })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/tvshows', false, stream_context_create([\n    'http' =&gt; [\n    'method' =&gt; 'PUT',\n    'header' =&gt;\n        \"Content-Type: text/plain\\r\\n\" . // Does not matter\n        \"Title: Kodi: Resuming Playback\\r\\n\" .\n        \"Tags: arrow_forward\\r\\n\" .\n        \"Icon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\",\n    ],\n    'content' =&gt; \"The Wire, S01E01\"\n]));\n</code></pre> <p>Here's an example of how it will look on Android:</p> <p> </p> Custom icon from an external URL"},{"location":"publish/#e-mail-notifications","title":"E-mail notifications","text":"<p>Supported on: </p> <p>You can forward messages to e-mail by specifying an address in the header. This can be useful for messages that  you'd like to persist longer, or to blast-notify yourself on all possible channels. </p> <p>Usage is easy: Simply pass the <code>X-Email</code> header (or any of its aliases: <code>X-E-mail</code>, <code>Email</code>, <code>E-mail</code>, <code>Mail</code>, or <code>e</code>). Only one e-mail address is supported.</p> <p>Since ntfy does not provide auth (yet), the rate limiting is pretty strict (see limitations). In the  default configuration, you get 16 e-mails per visitor (IP address) and then after that one per hour. On top of  that, your IP address appears in the e-mail body. This is to prevent abuse.</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -H \"Email: phil@example.com\" \\\n    -H \"Tags: warning,skull,backup-host,ssh-login\" \\\n    -H \"Priority: high\" \\\n    -d \"Unknown login from 5.31.23.83 to backups.example.com\" \\\n    ntfy.sh/alerts\ncurl -H \"Email: phil@example.com\" -d \"You've Got Mail\" \ncurl -d \"You've Got Mail\" \"ntfy.sh/alerts?email=phil@example.com\"\n</code></pre> <pre><code>ntfy publish \\\n    --email=phil@example.com \\\n    --tags=warning,skull,backup-host,ssh-login \\\n    --priority=high \\\n    alerts \"Unknown login from 5.31.23.83 to backups.example.com\"\n</code></pre> <pre><code>POST /alerts HTTP/1.1\nHost: ntfy.sh\nEmail: phil@example.com\nTags: warning,skull,backup-host,ssh-login\nPriority: high\n\nUnknown login from 5.31.23.83 to backups.example.com\n</code></pre> <pre><code>fetch('https://ntfy.sh/alerts', {\n    method: 'POST',\n    body: \"Unknown login from 5.31.23.83 to backups.example.com\",\n    headers: { \n        'Email': 'phil@example.com',\n        'Tags': 'warning,skull,backup-host,ssh-login',\n        'Priority': 'high'\n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/alerts\", \n    strings.NewReader(\"Unknown login from 5.31.23.83 to backups.example.com\"))\nreq.Header.Set(\"Email\", \"phil@example.com\")\nreq.Header.Set(\"Tags\", \"warning,skull,backup-host,ssh-login\")\nreq.Header.Set(\"Priority\", \"high\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/alerts\"\n  Headers = @{\n    Title = \"Low disk space alert\"\n    Priority = \"high\"\n    Tags = \"warning,skull,backup-host,ssh-login\")\n    Email = \"phil@example.com\"\n  }\n  Body = \"Unknown login from 5.31.23.83 to backups.example.com\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/alerts\",\n    data=\"Unknown login from 5.31.23.83 to backups.example.com\",\n    headers={ \n        \"Email\": \"phil@example.com\",\n        \"Tags\": \"warning,skull,backup-host,ssh-login\",\n        \"Priority\": \"high\"\n    })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/alerts', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Email: phil@example.com\\r\\n\" .\n            \"Tags: warning,skull,backup-host,ssh-login\\r\\n\" .\n            \"Priority: high\",\n        'content' =&gt; 'Unknown login from 5.31.23.83 to backups.example.com'\n    ]\n]));\n</code></pre> <p>Here's what that looks like in Google Mail:</p> <p> </p> E-mail notification"},{"location":"publish/#e-mail-publishing","title":"E-mail publishing","text":"<p>Supported on: </p> <p>You can publish messages to a topic via e-mail, i.e. by sending an email to a specific address. For instance, you can publish a message to the topic <code>sometopic</code> by sending an e-mail to <code>ntfy-sometopic@ntfy.sh</code>. This is useful for e-mail  based integrations such as for statuspage.io (though these days most services also support webhooks and HTTP calls).</p> <p>Depending on the server configuration, the e-mail address format can have a prefix to  prevent spam on topics. For ntfy.sh, the prefix is configured to <code>ntfy-</code>, meaning that the general e-mail address  format is:</p> <pre><code>ntfy-$topic@ntfy.sh\n</code></pre> <p>If access control is enabled, and the target topic does not support anonymous writes, e-mail publishing won't work without providing an authorized access token or using SMTP AUTH PLAIN. </p> <p>If you use access tokens, that will change the format of the e-mail's recipient address to <pre><code>ntfy-$topic+$token@ntfy.sh\n</code></pre></p> <p>To use username/password, you can use SMTP PLAIN auth when authenticating to the ntfy server.</p> <p>As of today, e-mail publishing only supports adding a message title (the e-mail subject). Tags, priority, delay and other features are not supported (yet). Here's an example that will publish a message with the  title <code>You've Got Mail</code> to topic <code>sometopic</code> (see ntfy.sh/sometopic):</p> <p> </p> Publishing a message via e-mail"},{"location":"publish/#phone-calls","title":"Phone calls","text":"<p>Supported on: </p> <p>You can use ntfy to call a phone and read the message out loud using text-to-speech.  Similar to email notifications, this can be useful to blast-notify yourself on all possible channels, or to notify people that do not have  the ntfy app installed on their phone.</p> <p>Phone numbers have to be previously verified (via the web app), so this feature is  only available to authenticated users (no anonymous phone calls). To forward a message as a voice call, pass a phone number in the <code>X-Call</code> header (or its alias: <code>Call</code>), prefixed with a plus sign and the country code, e.g. <code>+12223334444</code>.  You may also simply pass <code>yes</code> as a value to pick the first of your verified phone numbers.  On ntfy.sh, this feature is only supported to ntfy Pro plans.</p> <p> </p> Phone number verification in the web app <p>As of today, the text-to-speed voice used will only support English. If there is demand for other languages, we'll be happy to add support for that. Please open an issue on GitHub.</p> <p>Info</p> <p>You are responsible for the message content, and you must abide by the Twilio Acceptable Use Policy. This particularly means that you must not use this feature to send unsolicited messages, or messages that are illegal or violate the rights of others. Please read the policy for details. Failure to do so may result in your account being suspended or terminated.</p> <p>Here's how you use it:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n    -u :tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n    -H \"Call: +12223334444\" \\\n    -d \"Your garage seems to be on fire. You should probably check that out.\" \\\n    ntfy.sh/alerts\n</code></pre> <pre><code>ntfy publish \\\n    --token=tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n    --call=+12223334444 \\\n    alerts \"Your garage seems to be on fire. You should probably check that out.\"\n</code></pre> <pre><code>POST /alerts HTTP/1.1\nHost: ntfy.sh\nAuthorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\nCall: +12223334444\n\nYour garage seems to be on fire. You should probably check that out.\n</code></pre> <pre><code>fetch('https://ntfy.sh/alerts', {\n    method: 'POST',\n    body: \"Your garage seems to be on fire. You should probably check that out.\",\n    headers: { \n        'Authorization': 'Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2',\n        'Call': '+12223334444'\n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/alerts\", \n    strings.NewReader(\"Your garage seems to be on fire. You should probably check that out.\"))\nreq.Header.Set(\"Call\", \"+12223334444\")\nreq.Header.Set(\"Authorization\", \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/alerts\"\n  Headers = @{\n    Authorization = \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\"\n    Call = \"+12223334444\"\n  }\n  Body = \"Your garage seems to be on fire. You should probably check that out.\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/alerts\",\n    data=\"Your garage seems to be on fire. You should probably check that out.\",\n    headers={ \n        \"Authorization\": \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\",\n        \"Call\": \"+12223334444\"\n    })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/alerts', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Authorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\\r\\n\" .\n            \"Call: +12223334444\",\n        'content' =&gt; 'Your garage seems to be on fire. You should probably check that out.'\n    ]\n]));\n</code></pre> <p>Here's what a phone call from ntfy sounds like:</p> <p> </p> <p>Audio transcript:</p> <p>You have a notification from ntfy on topic alerts.       Message: Your garage seems to be on fire. You should probably check that out. End message.  This message was sent by user phil. It will be repeated up to three times.</p>"},{"location":"publish/#authentication","title":"Authentication","text":"<p>Depending on whether the server is configured to support access control, some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can: </p> <ul> <li>Use username &amp; password via Basic auth, e.g. <code>Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk</code></li> <li>Use access tokens via Bearer/Basic auth, e.g. <code>Authorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2</code></li> <li>or use either with the <code>auth</code> query parameter, e.g. <code>?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw</code></li> </ul> <p>Warning</p> <p>When using Basic auth, base64 only encodes username and password. It is not encrypting it. For your  self-hosted server, be sure to use HTTPS to avoid eavesdropping and exposing your password. </p>"},{"location":"publish/#username-password","title":"Username + password","text":"<p>The simplest way to authenticate against a ntfy server is to use Basic auth. Here's an example with a user <code>testuser</code> and password <code>fakepassword</code>:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShell 7+PowerShell 5 and earlierPythonPHP <pre><code>curl \\\n  -u testuser:fakepassword \\\n  -d \"Look ma, with auth\" \\\n  https://ntfy.example.com/mysecrets\n</code></pre> <pre><code>ntfy publish \\\n  -u testuser:fakepassword \\\n  ntfy.example.com/mysecrets \\\n  \"Look ma, with auth\"\n</code></pre> <pre><code>POST /mysecrets HTTP/1.1\nHost: ntfy.example.com\nAuthorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\n\nLook ma, with auth\n</code></pre> <pre><code>fetch('https://ntfy.example.com/mysecrets', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth',\n    headers: {\n        'Authorization': 'Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk'\n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets\",\nstrings.NewReader(\"Look ma, with auth\"))\nreq.Header.Set(\"Authorization\", \"Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code># Get the credentials from the user\n$Credential = Get-Credential testuser\n\n# Alternatively, create a PSCredential object with the password from scratch\n$Credential = [PSCredential]::new(\"testuser\", (ConvertTo-SecureString \"password\" -AsPlainText -Force))\n\n# Note that the Authentication parameter requires PowerShell 7 or later\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Authentication = \"Basic\"\n  Credential = $Credential\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code># With PowerShell 5 or earlier, we need to create the base64 username:password string ourselves\n$CredentialString = \"$($Credential.Username):$($Credential.GetNetworkCredential().Password)\"\n$EncodedCredential = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($CredentialString))\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Headers = @{ Authorization = \"Basic $EncodedCredential\"}\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.example.com/mysecrets\",\ndata=\"Look ma, with auth\",\nheaders={\n    \"Authorization\": \"Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\"\n})\n</code></pre> <pre><code>file_get_contents('https://ntfy.example.com/mysecrets', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt;\n            'Content-Type: text/plain\\r\\n' .\n            'Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk',\n        'content' =&gt; 'Look ma, with auth'\n    ]\n]));\n</code></pre> <p>To generate the <code>Authorization</code> header, use standard base64 to encode the colon-separated <code>&lt;username&gt;:&lt;password&gt;</code>  and prepend the word <code>Basic</code>, i.e. <code>Authorization: Basic base64(&lt;username&gt;:&lt;password&gt;)</code>. Here's some pseudo-code that  hopefully explains it better:</p> <pre><code>username   = \"testuser\"\npassword   = \"fakepassword\"\nauthHeader = \"Basic \" + base64(username + \":\" + password) // -&gt; Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\n</code></pre> <p>The following command will generate the appropriate value for you on *nix systems:</p> <pre><code>echo \"Basic $(echo -n 'testuser:fakepassword' | base64)\"\n</code></pre>"},{"location":"publish/#access-tokens","title":"Access tokens","text":"<p>In addition to username/password auth, ntfy also provides authentication via access tokens. Access tokens are useful to avoid having to configure your password across multiple publishing/subscribing applications. For instance, you may want to use a dedicated token to publish from your backup host, and one from your home automation system.</p> <p>You can create access tokens using the <code>ntfy token</code> command, or in the web app in the \"Account\" section (when logged in). See access tokens for details.</p> <p>Once an access token is created, you can use it to authenticate against the ntfy server, e.g. when you publish or  subscribe to topics. Here's an example using Bearer auth, with the token <code>tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2</code>:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShell 7+PowerShell 5 and earlierPythonPHP <pre><code>curl \\\n  -H \"Authorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\" \\\n  -d \"Look ma, with auth\" \\\n  https://ntfy.example.com/mysecrets\n</code></pre> <pre><code>ntfy publish \\\n  --token tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n  ntfy.example.com/mysecrets \\\n  \"Look ma, with auth\"\n</code></pre> <pre><code>POST /mysecrets HTTP/1.1\nHost: ntfy.example.com\nAuthorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\n\nLook ma, with auth\n</code></pre> <pre><code>fetch('https://ntfy.example.com/mysecrets', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth',\n    headers: {\n        'Authorization': 'Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2'\n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets\",\nstrings.NewReader(\"Look ma, with auth\"))\nreq.Header.Set(\"Authorization\", \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code># With PowerShell 7 or greater, we can use the Authentication and Token parameters\n# The Token parameter must be in the form of a System.Security.SecureString\n\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Authentication = \"Bearer\"\n  Token = ConvertTo-SecureString \"tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\" -AsPlainText\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code># In PowerShell 5 and below, we can only send the Bearer token as a string in the Headers\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Headers = @{ Authorization = \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\" }\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.example.com/mysecrets\",\ndata=\"Look ma, with auth\",\nheaders={\n    \"Authorization\": \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\"\n})\n</code></pre> <pre><code>file_get_contents('https://ntfy.example.com/mysecrets', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt;\n            'Content-Type: text/plain\\r\\n' .\n            'Authorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2',\n        'content' =&gt; 'Look ma, with auth'\n    ]\n]));\n</code></pre> <p>Alternatively, you can use Basic Auth to send the  access token. When sending an empty username, the basic auth password is treated by the ntfy server as an  access token. This is primarily useful to make <code>curl</code> calls easier, e.g. <code>curl -u:tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 ...</code>:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n  -u :tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n  -d \"Look ma, with auth\" \\\n  https://ntfy.example.com/mysecrets\n</code></pre> <pre><code>ntfy publish \\\n  --token tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n  ntfy.example.com/mysecrets \\\n  \"Look ma, with auth\"\n</code></pre> <pre><code>POST /mysecrets HTTP/1.1\nHost: ntfy.example.com\nAuthorization: Basic OnRrX0FnUWRxN21WQm9GRDM3elFWTjI5Umh1TXpOSXoy\n\nLook ma, with auth\n</code></pre> <pre><code>fetch('https://ntfy.example.com/mysecrets', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth',\n    headers: {\n        'Authorization': 'Basic OnRrX0FnUWRxN21WQm9GRDM3elFWTjI5Umh1TXpOSXoy'\n    }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets\",\nstrings.NewReader(\"Look ma, with auth\"))\nreq.Header.Set(\"Authorization\", \"Basic OnRrX0FnUWRxN21WQm9GRDM3elFWTjI5Umh1TXpOSXoy\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code># Note that PSCredentials *must* have a username, so we fall back to placing the authorization in the Headers as with PowerShell 5\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Headers = @{\n    Authorization = \"Basic OnRrX0FnUWRxN21WQm9GRDM3elFWTjI5Umh1TXpOSXoy\"\n  }\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.example.com/mysecrets\",\ndata=\"Look ma, with auth\",\nheaders={\n    \"Authorization\": \"Basic OnRrX0FnUWRxN21WQm9GRDM3elFWTjI5Umh1TXpOSXoy\"\n})\n</code></pre> <pre><code>file_get_contents('https://ntfy.example.com/mysecrets', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt;\n            'Content-Type: text/plain\\r\\n' .\n            'Authorization: Basic OnRrX0FnUWRxN21WQm9GRDM3elFWTjI5Umh1TXpOSXoy',\n        'content' =&gt; 'Look ma, with auth'\n    ]\n]));\n</code></pre>"},{"location":"publish/#query-param","title":"Query param","text":"<p>Here's an example using the <code>auth</code> query parameter:</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl \\\n  -d \"Look ma, with auth\" \\\n  \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\"\n</code></pre> <pre><code>ntfy publish \\\n  -u testuser:fakepassword \\\n  ntfy.example.com/mysecrets \\\n  \"Look ma, with auth\"\n</code></pre> <pre><code>POST /mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw HTTP/1.1\nHost: ntfy.example.com\n\nLook ma, with auth\n</code></pre> <pre><code>fetch('https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth'\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\",\n    strings.NewReader(\"Look ma, with auth\"))\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\"\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\",\ndata=\"Look ma, with auth\"\n</code></pre> <pre><code>file_get_contents('https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST', // PUT also works\n        'header' =&gt; 'Content-Type: text/plain',\n        'content' =&gt; 'Look ma, with auth'\n    ]\n]));\n</code></pre> <p>To generate the value of the <code>auth</code> parameter, encode the value of the <code>Authorization</code> header (see above) using  raw base64 encoding (like base64, but strip any trailing <code>=</code>). Here's some pseudo-code that hopefully  explains it better:</p> <pre><code>username   = \"testuser\"\npassword   = \"fakepassword\"\nauthHeader = \"Basic \" + base64(username + \":\" + password) // -&gt; Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\nauthParam  = base64_raw(authHeader) // -&gt; QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw (no trailing =)\n\n// If your language does not have a function to encode raw base64, simply use normal base64\n// and REMOVE TRAILING \"=\" characters. \n</code></pre> <p>The following command will generate the appropriate value for you on *nix systems:</p> <pre><code>echo -n \"Basic `echo -n 'testuser:fakepassword' | base64`\" | base64 | tr -d '='\n</code></pre> <p>For access tokens, you can use this instead:</p> <pre><code>echo -n \"Bearer faketoken\" | base64 | tr -d '='\n</code></pre>"},{"location":"publish/#advanced-features","title":"Advanced features","text":""},{"location":"publish/#message-caching","title":"Message caching","text":"<p>Info</p> <p>If <code>Cache: no</code> is used, messages will only be delivered to connected subscribers, and won't be re-delivered if a  client re-connects. If a subscriber has (temporary) network issues or is reconnecting momentarily,  messages might be missed.</p> <p>By default, the ntfy server caches messages on disk for 12 hours (see message caching), so all messages you publish are stored server-side for a little while. The reason for this is to overcome temporary  client-side network disruptions, but arguably this feature also may raise privacy concerns.</p> <p>To avoid messages being cached server-side entirely, you can set <code>X-Cache</code> header (or its alias: <code>Cache</code>) to <code>no</code>.  This will make sure that your message is not cached on the server, even if server-side caching is enabled. Messages are still delivered to connected subscribers, but <code>since=</code> and  <code>poll=1</code> won't return the message anymore.</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl -H \"X-Cache: no\" -d \"This message won't be stored server-side\" ntfy.sh/mytopic\ncurl -H \"Cache: no\" -d \"This message won't be stored server-side\" ntfy.sh/mytopic\n</code></pre> <pre><code>ntfy publish \\\n    --no-cache \\\n    mytopic \"This message won't be stored server-side\"\n</code></pre> <pre><code>POST /mytopic HTTP/1.1\nHost: ntfy.sh\nCache: no\n\nThis message won't be stored server-side\n</code></pre> <pre><code>fetch('https://ntfy.sh/mytopic', {\n    method: 'POST',\n    body: 'This message won't be stored server-side',\n    headers: { 'Cache': 'no' }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mytopic\", strings.NewReader(\"This message won't be stored server-side\"))\nreq.Header.Set(\"Cache\", \"no\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mytopic\"\n  Headers = @{ Cache=\"no\" }\n  Body = \"This message won't be stored server-side\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/mytopic\",\n    data=\"This message won't be stored server-side\",\n    headers={ \"Cache\": \"no\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Cache: no\",\n        'content' =&gt; 'This message won't be stored server-side'\n    ]\n]));\n</code></pre>"},{"location":"publish/#disable-firebase","title":"Disable Firebase","text":"<p>Info</p> <p>If <code>Firebase: no</code> is used and instant delivery isn't enabled in the Android  app (Google Play variant only), message delivery will be significantly delayed (up to 15 minutes). To overcome  this delay, simply enable instant delivery.</p> <p>The ntfy server can be configured to use Firebase Cloud Messaging (FCM) (see Firebase config) for message delivery on Android (to minimize the app's battery footprint).  The ntfy.sh server is configured this way, meaning that all messages published to ntfy.sh are also published to corresponding FCM topics.</p> <p>If you'd like to avoid forwarding messages to Firebase, you can set the <code>X-Firebase</code> header (or its alias: <code>Firebase</code>) to <code>no</code>. This will instruct the server not to forward messages to Firebase.</p> Command line (curl)ntfy CLIHTTPJavaScriptGoPowerShellPythonPHP <pre><code>curl -H \"X-Firebase: no\" -d \"This message won't be forwarded to FCM\" ntfy.sh/mytopic\ncurl -H \"Firebase: no\" -d \"This message won't be forwarded to FCM\" ntfy.sh/mytopic\n</code></pre> <pre><code>ntfy publish \\\n    --no-firebase \\\n    mytopic \"This message won't be forwarded to FCM\"\n</code></pre> <pre><code>POST /mytopic HTTP/1.1\nHost: ntfy.sh\nFirebase: no\n\nThis message won't be forwarded to FCM\n</code></pre> <pre><code>fetch('https://ntfy.sh/mytopic', {\n    method: 'POST',\n    body: 'This message won't be forwarded to FCM',\n    headers: { 'Firebase': 'no' }\n})\n</code></pre> <pre><code>req, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mytopic\", strings.NewReader(\"This message won't be forwarded to FCM\"))\nreq.Header.Set(\"Firebase\", \"no\")\nhttp.DefaultClient.Do(req)\n</code></pre> <pre><code>$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mytopic\"\n  Headers = @{ Firebase=\"no\" }\n  Body = \"This message won't be forwarded to FCM\"\n}\nInvoke-RestMethod @Request\n</code></pre> <pre><code>requests.post(\"https://ntfy.sh/mytopic\",\n    data=\"This message won't be forwarded to FCM\",\n    headers={ \"Firebase\": \"no\" })\n</code></pre> <pre><code>file_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' =&gt; [\n        'method' =&gt; 'POST',\n        'header' =&gt;\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Firebase: no\",\n        'content' =&gt; 'This message won't be stored server-side'\n    ]\n]));\n</code></pre>"},{"location":"publish/#unifiedpush","title":"UnifiedPush","text":"<p>Info</p> <p>This setting is not relevant to users, only to app developers and people interested in UnifiedPush. </p> <p>UnifiedPush is a standard for receiving push notifications without using the Google-owned Firebase Cloud Messaging (FCM) service. It puts push notifications in the control of the user. ntfy can act as a UnifiedPush distributor, forwarding messages to apps that support it.</p> <p>When publishing messages to a topic, apps using ntfy as a UnifiedPush distributor can set the <code>X-UnifiedPush</code> header or query parameter (or any of its aliases <code>unifiedpush</code> or <code>up</code>) to <code>1</code> to disable Firebase. As of today, this option is mostly equivalent to <code>Firebase: no</code>, but was introduced to allow future flexibility. The flag additionally  enables auto-detection of the message encoding. If the message is binary, it'll be encoded as base64.</p>"},{"location":"publish/#matrix-gateway","title":"Matrix Gateway","text":"<p>The ntfy server implements a Matrix Push Gateway (in combination with UnifiedPush as the Provider Push Protocol). This makes it easier to integrate with self-hosted Matrix servers (such as synapse), since  you don't have to set up a separate push proxy (such as common-proxies).</p> <p>In short, ntfy accepts Matrix messages on the <code>/_matrix/push/v1/notify</code> endpoint (see Push Gateway API),  and forwards them to the ntfy topic defined in the <code>pushkey</code> of the message. The message will then be forwarded to the ntfy Android app, and passed on to the Matrix client there.</p> <p>There is a nice diagram in the Push Gateway docs. In this diagram, the ntfy server plays the role of the Push Gateway, as well as the Push Provider. UnifiedPush is the Provider Push Protocol.</p> <p>Info</p> <p>This is not a generic Matrix Push Gateway. It only works in combination with UnifiedPush and ntfy.</p>"},{"location":"publish/#public-topics","title":"Public topics","text":"<p>Obviously all topics on ntfy.sh are public, but there are a few designated topics that are used in examples, and topics that you can use to try out what authentication and access control looks like.</p> Topic User Permissions Description announcements <code>*</code> (unauthenticated) Read-only for everyone Release announcements and such stats <code>*</code> (unauthenticated) Read-only for everyone Daily statistics about ntfy.sh usage"},{"location":"publish/#limitations","title":"Limitations","text":"<p>There are a few limitations to the API to prevent abuse and to keep the server healthy. Almost all of these settings  are configurable via the server side rate limiting settings. Most of these limits you won't run into, but just in case, let's list them all:</p> Limit Description Message length Each message can be up to 4,096 bytes long. Longer messages are treated as attachments. Requests By default, the server is configured to allow 60 requests per visitor at once, and then refills the your allowed requests bucket at a rate of one request per 5 seconds. Daily messages By default, the number of messages is governed by the request limits. This can be overridden. On ntfy.sh, the daily message limit is 250. E-mails By default, the server is configured to allow sending 16 e-mails per visitor at once, and then refills the your allowed e-mail bucket at a rate of one per hour. On ntfy.sh, the daily limit is 5. Phone calls By default, the server does not allow any phone calls, except for users with a tier that has a call limit. Subscription limit By default, the server allows each visitor to keep 30 connections to the server open. Attachment size limit By default, the server allows attachments up to 15 MB in size, up to 100 MB in total per visitor and up to 5 GB across all visitors. On ntfy.sh, the attachment size limit is 2 MB, and the per-visitor total is 20 MB. Attachment expiry By default, the server deletes attachments after 3 hours and thereby frees up space from the total visitor attachment limit. Attachment bandwidth By default, the server allows 500 MB of GET/PUT/POST traffic for attachments per visitor in a 24 hour period. Traffic exceeding that is rejected. On ntfy.sh, the daily bandwidth limit is 200 MB. Total number of topics By default, the server is configured to allow 15,000 topics. The ntfy.sh server has higher limits though. <p>These limits can be changed on a per-user basis using tiers. If payments are enabled, a user tier can be changed by purchasing a higher tier. ntfy.sh offers multiple paid tiers, which allows for much hier limits than the ones listed above. </p>"},{"location":"publish/#list-of-all-parameters","title":"List of all parameters","text":"<p>The following is a list of all parameters that can be passed when publishing a message. Parameter names are case-insensitive when used in HTTP headers, and must be lowercase when used as query parameters in the URL. They are listed in the  table in their canonical form.</p> <p>Info</p> <p>ntfy supports UTF-8 in HTTP headers, but not every library or programming language does. If non-ASCII characters are causing issues for you in the title (i.e. you're seeing <code>?</code> symbols), you may also encode any header as RFC 2047, e.g. <code>=?UTF-8?B?8J+HqfCfh6o=?=</code> (base64), or <code>=?UTF-8?Q?=C3=84pfel?=</code> (quoted-printable).</p> Parameter Aliases Description <code>X-Message</code> <code>Message</code>, <code>m</code> Main body of the message as shown in the notification <code>X-Title</code> <code>Title</code>, <code>t</code> Message title <code>X-Priority</code> <code>Priority</code>, <code>prio</code>, <code>p</code> Message priority <code>X-Tags</code> <code>Tags</code>, <code>Tag</code>, <code>ta</code> Tags and emojis <code>X-Delay</code> <code>Delay</code>, <code>X-At</code>, <code>At</code>, <code>X-In</code>, <code>In</code> Timestamp or duration for delayed delivery <code>X-Actions</code> <code>Actions</code>, <code>Action</code> JSON array or short format of user actions <code>X-Click</code> <code>Click</code> URL to open when notification is clicked <code>X-Attach</code> <code>Attach</code>, <code>a</code> URL to send as an attachment, as an alternative to PUT/POST-ing an attachment <code>X-Markdown</code> <code>Markdown</code>, <code>md</code> Enable Markdown formatting in the notification body <code>X-Icon</code> <code>Icon</code> URL to use as notification icon <code>X-Filename</code> <code>Filename</code>, <code>file</code>, <code>f</code> Optional attachment filename, as it appears in the client <code>X-Email</code> <code>X-E-Mail</code>, <code>Email</code>, <code>E-Mail</code>, <code>mail</code>, <code>e</code> E-mail address for e-mail notifications <code>X-Call</code> <code>Call</code> Phone number for phone calls <code>X-Cache</code> <code>Cache</code> Allows disabling message caching <code>X-Firebase</code> <code>Firebase</code> Allows disabling sending to Firebase <code>X-UnifiedPush</code> <code>UnifiedPush</code>, <code>up</code> UnifiedPush publish option, only to be used by UnifiedPush apps <code>X-Poll-ID</code> <code>Poll-ID</code> Internal parameter, used for iOS push notifications <code>Authorization</code> - If supported by the server, you can login to access protected topics <code>Content-Type</code> - If set to <code>text/markdown</code>, Markdown formatting is enabled"},{"location":"releases/","title":"Release notes","text":"<p>Binaries for all releases can be found on the GitHub releases pages for the ntfy server and the ntfy Android app.</p>"},{"location":"releases/#ntfy-server-v2110","title":"ntfy server v2.11.0","text":"<p>Released May 13, 2024</p> <p>This is a tiny release that fixes a database index issue that caused performance issues on ntfy.sh. It also fixes a bug in the rate visitor logic that caused rate visitors to be assigned to seemingly random topics. Nothing major this time.</p> <p>\u2764\ufe0f Quick reminder that if you like ntfy, please consider sponsoring us via GitHub Sponsors and Liberapay, or buying a paid plan via the web app. ntfy will always remain open source.</p> <p>Bug fixes + maintenance:</p> <ul> <li>Re-add database index <code>idx_topic</code> to the <code>messages</code> table to fix performance issues on ntfy.sh (no ticket, big thanks to @tcaputi for finding this issue)</li> <li>Do not set rate visitor for non-eligible topics (no ticket)</li> <li>Do not cache <code>config.js</code> (#1098, thanks to @wunter8)</li> </ul>"},{"location":"releases/#ntfy-server-v2100","title":"ntfy server v2.10.0","text":"<p>Released Mar 27, 2024</p> <p>This release adds support for message templating in the ntfy server, which allows you to include a message and/or title template that will be filled with values from a JSON body (e.g. <code>curl -gd '{\"alert\":\"Disk space low\"}' \"ntfy.sh/mytopic?tpl=1&amp;m={{.alert}}\"</code>). This is great for services that let you specify a webhook URL but do not let you change the webhook body (such as GitHub, or Grafana).</p> <p>Features:</p> <ul> <li>Message templating: You can now include a message and/or title template that will be filled with values from a JSON body (#724, thanks to @wunter8 for implementing)</li> </ul>"},{"location":"releases/#ntfy-server-v290","title":"ntfy server v2.9.0","text":"<p>Released Mar 7, 2024</p> <p>A small release after a long pause (lots of day job work). This release adds for larger messages and longer message delays in scheduled delivery messages. The web app also now supports pasting images from the clipboard. Other than that, only a few bug fixes and documentation updates, and a teeny tiny breaking change \ud83d\ude2c.</p> <p>Info</p> <p>\u26a0\ufe0f Breaking change: The <code>Rate-Topics</code> header was removed due to a DoS issue. This only affects installations with <code>visitor-subscriber-rate-limiting: true</code>, which is not the default and likely very rarely used. Normally I'd never remove a feature, but this is a security issue, and likely affects almost nobody.</p> <p>Features:</p> <ul> <li>Support for larger message delays with <code>message-delay-limit</code> (see message limits, #1050/#1019, thanks to @MrChadMWood for reporting)</li> <li>Support for larger message body sizes with <code>message-size-limit</code> (use at your own risk, see message limits, #836/#1050, thanks to @zhzy0077 for implementing this, and to @nkjshlsqja7331 for reporting)</li> <li>Web app: You can now paste images into the message bar or publish dialog (#963/#572, thanks to @cmj2002 for implementing, and @rounakdatta for reporting)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>\u26a0\ufe0f Remove <code>Rate-Topics</code> header due to DoS security issue if <code>visitor-subscriber-rate-limiting: true</code> (#1048)</li> </ul> <p>Documentation:</p> <ul> <li>Remove <code>mkdocs-simple-hooks</code> (#1016, thanks to @Tom-Hubrecht)</li> <li>Update Watchtower example (#1014, thanks to @lennart-m)</li> <li>Fix dead links (#1022, thanks to @DerRockWolf)</li> <li>PowerShell file upload example (#1004, thanks to @YMan84)</li> </ul>"},{"location":"releases/#ntfy-ios-app-v13","title":"ntfy iOS app v1.3","text":"<p>Released Nov 26, 2023</p> <p>This release (hopefully) fixes the issues with the iOS UI not updating properly when new notifications arrive, as well as notifications not being received (anymore) after previously working. Both issues have been annoying and known bugs for a long time, and I hope that they are finally fixed. </p> <p>Many thanks to @tcaputi for fixing the issues, and to the anonymous donor for sponsoring these fixes.</p> <p>Bug fixes:</p> <ul> <li>UI not updating properly (#267/#402, thanks to @tcaputi)</li> </ul>"},{"location":"releases/#ntfy-server-v280","title":"ntfy server v2.8.0","text":"<p>Released November 19, 2023</p> <p>This release brings a handful of random bug fixes: two unrelated access control list fixes, a fix around web app crashes for languages with underscores in the language code (e.g. <code>zh_Hant</code>, <code>zh_Hans</code>, <code>pt_BR</code>, ...), a workaround for the <code>Priority</code> header (often used in Cloudflare setups), and support among others support for HTML-only emails (finally), web app crash fixes </p> <p>Bug fixes + maintenance:</p> <ul> <li>Support for HTML-only emails (#690/#693, thanks to @teastrainer and @CrazyWolf13 for reporting)</li> <li>Fix ACL issue with topic patterns containing underscores (#840, thanks to @Joe-0237 for reporting)</li> <li>Fix ACL issue with order of read/write rules (#914/#917, thanks to @sandman7920)</li> <li>Re-add <code>tzdata</code> to Docker images for amd64 image (#894, #307)</li> <li>Add special logic to ignore <code>Priority</code> header if it resembles an RFC 9218 value (#851/#895, thanks to @gusdleon, see also #351, #353, #461)</li> <li>PWA: hide install prompt on macOS 14 Safari (#899, thanks to @nihalgonsalves)</li> <li>Fix web app crash in Edge for languages with underline in locale (#922/#912/#852, thanks to @imkero)</li> </ul> <p>Additional languages:</p> <ul> <li>Finnish (thanks to @Seppo)</li> </ul>"},{"location":"releases/#ntfy-server-v270","title":"ntfy server v2.7.0","text":"<p>Released August 17, 2023</p> <p>This release ships Markdown support for the web app (not in the Android app yet), and adds support for  right-to-left languages (RTL) in the web app. It also fixes a few issues around date/time formatting,  internationalization support, a CLI auth bug.</p> <p>Furthermore, it fixes a security issue around access tokens getting erroneously deleted for other users in a specific scenario. This was a denial-of-service-type security issue, since it effectively allowed a single user to deny access to all other users of a ntfy instance. Please note that while tokens were erroneously deleted, nobody but the token owner ever had access to it. Please refer to the ticket for details. Please upgrade your ntfy instance if you run a multi-user system.</p> <p>Features:</p> <ul> <li>Add support for Markdown formatting in web app (#310, thanks to @nihalgonsalves)</li> <li>Add support for right-to-left languages (RTL) in the web app (#663, thanks to @nimbleghost)</li> </ul> <p>Security: \u26a0\ufe0f</p> <ul> <li>Fixes issue with access tokens getting deleted (#838)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Fix issues with date/time with different locales (#700, thanks to @nimbleghost)</li> <li>Re-init i18n on each service worker message to avoid missing translations (#817, thanks to @nihalgonsalves)</li> <li>You can now unset the default user:pass/token in <code>client.yml</code> for an individual subscription to remove the Authorization header (#829, thanks to @tomeon for reporting and to @wunter8 for fixing)</li> </ul> <p>Documentation:</p> <ul> <li>Update docs for Apache config (#819, thanks to @nisbet-hubbard)</li> </ul>"},{"location":"releases/#ntfy-server-v262","title":"ntfy server v2.6.2","text":"<p>Released June 30, 2023</p> <p>With this release, the ntfy web app now contains a progressive web app (PWA) with Web Push support, which means you'll be able to install the ntfy web app on your desktop or phone similar  to a native app (even on iOS! \ud83e\udd73). Installing the PWA gives ntfy web its own launcher, a standalone window,  push notifications, and an app badge with the unread notification count. Note that for self-hosted servers,  Web Push must be configured.</p> <p>On top of that, this release also brings dark mode \ud83e\udddb\ud83c\udf19 to the web app.</p> <p>\ud83d\ude4f A huge thanks for this release goes to @nimbleghost, for basically implementing the  Web Push / PWA and dark mode feature by himself. I'm really grateful for your contributions.</p> <p>\u2764\ufe0f If you like ntfy, please consider sponsoring us via GitHub Sponsors and Liberapay, or buying a paid plan via the web app (20% off if you use promo code <code>MYTOPIC</code>). ntfy will always remain open source.</p> <p>Features:</p> <ul> <li>The web app now supports Web Push, and is installable as a progressive web app (PWA) on Chrome, Edge, Android, and iOS (#751, thanks to @nimbleghost)</li> <li>Support for dark mode in the web app (#206, thanks to @nimbleghost)</li> </ul> <p>Bug fixes:</p> <ul> <li>Support encoding any header as RFC 2047 (#737, thanks to @cfouche3005 for reporting)</li> <li>Do not forward poll requests for UnifiedPush messages (no ticket, thanks to NoName for reporting)</li> <li>Fix <code>ntfy pub %</code> segfaulting (#760, thanks to @clesmian for reporting)</li> <li>Newly created access tokens are now lowercase only to fully support <code>&lt;topic&gt;+&lt;token&gt;@&lt;domain&gt;</code> email syntax (#773, thanks to gingervitiz for reporting)</li> <li>The .1 release fixes a few visual issues with dark mode, and other web app updates (#791, #793, #792, thanks to @nimbleghost) </li> <li>The .2 release fixes issues with the service worker in Firefox and adds automatic service worker updates (#795, thanks to @nimbleghost)</li> </ul> <p>Maintenance:</p> <ul> <li>Improved GitHub Actions flow (#745, thanks to @nimbleghost)</li> <li>Web: Add JS formatter \"prettier\" (#746, thanks to @nimbleghost)</li> <li>Web: Add eslint with eslint-config-airbnb (#748, thanks to @nimbleghost)</li> <li>Web: Switch to Vite (#749, thanks to @nimbleghost)</li> </ul> <p>Changes in tarball/zip naming:  Due to a change in GoReleaser, some of the binary release  archives now have slightly different names. My apologies if this causes issues in the downstream projects that use ntfy:</p> <ul> <li><code>ntfy_v${VERSION}_windows_x86_64.zip</code> -&gt; <code>ntfy_v${VERSION}_windows_amd64.zip</code></li> <li><code>ntfy_v${VERSION}_linux_x86_64.tar.gz</code> -&gt; <code>ntfy_v${VERSION}_linux_amd64.tar.gz</code></li> <li><code>ntfy_v${VERSION}_macOS_all.tar.gz</code> -&gt; <code>ntfy_v${VERSION}_darwin_all.tar.gz</code></li> </ul>"},{"location":"releases/#ntfy-server-v250","title":"ntfy server v2.5.0","text":"<p>Released May 18, 2023</p> <p>This release brings a number of new features, including support for text-to-speech style phone calls,  an admin API to manage users and ACL (currently in beta, and hence undocumented), and support for authorized access to  upstream servers via the <code>upstream-access-token</code> config option.</p> <p>\u2764\ufe0f If you like ntfy, please consider sponsoring me via GitHub Sponsors and Liberapay, or by buying a paid plan via the web app (20% off if you use promo code <code>MYTOPIC</code>). ntfy will always remain open source.</p> <p>Features:</p> <ul> <li>Support for text-to-speech style phone calls using the <code>X-Call</code> header (no ticket)</li> <li>Admin API to manage users and ACL, <code>v1/users</code> + <code>v1/users/access</code> (intentionally undocumented as of now, #722, thanks to @CreativeWarlock for sponsoring this ticket)</li> <li>Added <code>upstream-access-token</code> config option to allow authorized access to upstream servers (no ticket)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Removed old ntfy website from ntfy entirely (no ticket)</li> <li>Make emoji lookup for emails more efficient (#725, thanks to @adamantike)</li> <li>Fix potential subscriber ID clash (#712, thanks to @peterbourgon for reporting, and @dropdevrahul for fixing)</li> <li>Support for <code>quoted-printable</code> in incoming emails (#719, thanks to @Aerion)</li> <li>Attachments with filenames that are downloaded using a browser will now download with the proper filename (#726, thanks to @un99known99 for reporting, and @wunter8 for fixing)</li> <li>Fix web app i18n issue in account preferences (#730, thanks to @codebude for reporting)</li> </ul>"},{"location":"releases/#ntfy-server-v240","title":"ntfy server v2.4.0","text":"<p>Released Apr 26, 2023</p> <p>This release adds a tiny <code>v1/stats</code> endpoint to expose how many messages have been published, and adds support to encode the <code>X-Title</code>, <code>X-Message</code> and <code>X-Tags</code> header as RFC 2047. It's a pretty small release, and mainly enables the release of the new ntfy.sh website.</p> <p>\u2764\ufe0f If you like ntfy, please consider sponsoring me via GitHub Sponsors and Liberapay, or by buying a paid plan via the web app. ntfy will always remain open source.</p> <p>Features:</p> <ul> <li>ntfy CLI (<code>ntfy publish</code> and <code>ntfy subscribe</code> only) can now be installed via Homebrew (thanks to @Moulick)</li> <li>Added <code>v1/stats</code> endpoint to expose messages stats (no ticket)</li> <li>Support RFC 2047 encoded headers (no ticket, honorable mention to mqttwarn and @amotl)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Hide country flags on Windows (#606, thanks to @cmeis for reporting, and to @pokej6 for fixing it)</li> <li><code>ntfy sub</code> now uses default auth credentials as defined in <code>client.yml</code> (#698, thanks to @CrimsonFez for reporting, and to @wunter8 for fixing it)</li> </ul> <p>Documentation:</p> <ul> <li>Updated PowerShell examples (#697, thanks to @Natfan)</li> </ul> <p>Additional languages:</p> <ul> <li>Swedish (thanks to @hellbown)</li> </ul>"},{"location":"releases/#ntfy-server-v231","title":"ntfy server v2.3.1","text":"<p>Released March 30, 2023</p> <p>This release disables server-initiated polling of iOS devices entirely, thereby eliminating the thundering herd problem on ntfy.sh that we observe every 20 minutes. The polling was never strictly necessary, and has actually caused duplicate delivery issues as well, so disabling it should not have any negative effects. iOS users, please reach out via Discord or Matrix if there are issues.</p> <p>Bug fixes + maintenance:</p> <ul> <li>Disable iOS polling entirely (#677/#509)</li> </ul>"},{"location":"releases/#ntfy-server-v230","title":"ntfy server v2.3.0","text":"<p>Released March 29, 2023</p> <p>This release primarily fixes an issue with delayed messages, and it adds support for Go's profiler (if enabled), which will allow investigating usage spikes in more detail. There will likely be a follow-up release this week to fix the actual spikes caused by iOS devices.</p> <p>Features:</p> <ul> <li>ntfy now supports Go's <code>pprof</code> profiler, if enabled (relates to #677)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Fix delayed message sending from authenticated users (#679)</li> <li>Fixed plural for Polish and other translations (#678, thanks to @bmoczulski)</li> </ul>"},{"location":"releases/#ntfy-server-v220","title":"ntfy server v2.2.0","text":"<p>Released March 17, 2023</p> <p>With this release, ntfy is now able to expose metrics via a <code>/metrics</code> endpoint for Prometheus, if enabled. The endpoint exposes about 20 different counters and gauges, from the number of published messages and emails, to active subscribers, visitors and topics. If you'd like more metrics, pop in the Discord/Matrix or file an issue on GitHub. </p> <p>On top of this, you can now use access tokens in the ntfy CLI (defined in the <code>client.yml</code> file), fixed a bug in <code>ntfy subscribe</code>, removed the dependency on Google Fonts, and more.</p> <p>\ud83d\udd25 Reminder: Purchase one of three ntfy Pro plans for 50% off for a limited time (if you use promo code <code>MYTOPIC</code>).  ntfy Pro gives you higher rate limits and lets you reserve topic names. Buy through web app.</p> <p>\u2764\ufe0f If you don't need ntfy Pro, please consider sponsoring ntfy via GitHub Sponsors and Liberapay. ntfy will stay open source forever.</p> <p>Features:</p> <ul> <li>Monitoring: ntfy now exposes a <code>/metrics</code> endpoint for Prometheus if configured (#210, thanks to @rogeliodh for reporting)</li> <li>You can now use tokens in <code>client.yml</code> for publishing and subscribing (#653, thanks to @wunter8)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li><code>ntfy sub --poll --from-config</code> will now include authentication headers from client.yml (if applicable) (#658, thanks to @wunter8)</li> <li>Docs: Removed dependency on Google Fonts in docs (#554, thanks to @bt90 for reporting, and @ozskywalker for implementing)</li> <li>Increase allowed auth failure attempts per IP address to 30 (no ticket)</li> <li>Web app: Increase maximum incremental backoff retry interval to 2 minutes (no ticket)</li> </ul> <p>Documentation:</p> <ul> <li>Make query parameter description more clear (#630, thanks to @bbaa-bbaa for reporting, and to @wunter8 for a fix)</li> </ul>"},{"location":"releases/#ntfy-server-v212","title":"ntfy server v2.1.2","text":"<p>Released March 4, 2023</p> <p>This is a hotfix release, mostly to combat the ridiculous amount of Matrix requests with invalid/dead pushkeys, and the corresponding HTTP 507 responses the ntfy.sh server is sending out. We're up to &gt;600k HTTP 507 responses per day \ud83e\udd26. This  release solves this issue by rejecting Matrix pushkeys, if nobody has subscribed to the corresponding topic for 12 hours.</p> <p>The release furthermore reverts the default rate limiting behavior for UnifiedPush to be publisher-based, and introduces a flag to enable subscriber-based rate limiting for high volume servers.</p> <p>Features:</p> <ul> <li>Support SMTP servers without auth (#645, thanks to @Sharknoon for reporting)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Token auth doesn't work if default user credentials are defined in <code>client.yml</code> (#650, thanks to @Xinayder)</li> <li>Add <code>visitor-subscriber-rate-limiting</code> flag to allow enabling subscriber-based rate limiting (off by default now, #649/#655, thanks to @barathrm for reporting, and to @karmanyaahm and @p1gp1g for help with the design)</li> <li>Reject Matrix pushkey after 12 hours of inactivity on a topic, if <code>visitor-subscriber-rate-limiting</code> is enabled (#643, thanks to @karmanyaahm and @p1gp1g for help with the design)  </li> </ul> <p>Additional languages:</p> <ul> <li>Danish (thanks to @Andersbiha)</li> </ul>"},{"location":"releases/#ntfy-server-v211","title":"ntfy server v2.1.1","text":"<p>Released March 1, 2023</p> <p>This is a tiny release with a few bug fixes, but it's big for me personally. After almost three months of work,  today I am finally launching the paid plans on ntfy.sh \ud83e\udd73 \ud83c\udf89. </p> <p>You are now able to purchase one of three plans that'll give you higher rate limits (messages, emails, attachment sizes, ...),  as well as the ability to reserve topic names for your personal use, while at the same time supporting me and the ntfy open source project \u2764\ufe0f. You can check out the pricing, and purchase plans through the web app (use promo code <code>MYTOPIC</code> for a 50% discount, limited time only).</p> <p>And as I've said many times: Do not worry. ntfy will always stay open source, and that includes all features. There are no closed-source features. So if you'd like to run your own server, you can!</p> <p>Bug fixes + maintenance:</p> <ul> <li>Fix panic when using Firebase without users (#641, thanks to u/heavybell for reporting)</li> <li>Remove health check from <code>Dockerfile</code> and document it (#635, thanks to @Andersbiha) </li> <li>Upgrade dialog: Disable submit button for free tier (no ticket)</li> <li>Allow multiple <code>log-level-overrides</code> on the same field (no ticket)</li> <li>Actually remove <code>ntfy publish --env-topic</code> flag (as per deprecations, no ticket)</li> <li>Added <code>billing-contact</code> config option (no ticket)</li> </ul>"},{"location":"releases/#ntfy-server-v210","title":"ntfy server v2.1.0","text":"<p>Released February 25, 2023</p> <p>This release changes the way UnifiedPush (UP) topics are rate limited from publisher-based rate limiting to subscriber-based rate limiting. This allows UP application servers to send higher volumes, since the subscribers carry the rate limits. However, it also means that UP clients have to subscribe to a topic first before they are allowed to publish. If they do no, clients will receive an HTTP 507 response from the server.</p> <p>We also fixed another issue with UnifiedPush: Some Mastodon servers were sending unsupported <code>Authorization</code> headers,  which ntfy rejected with an HTTP 401. We now ignore unsupported header values. </p> <p>As of this release, ntfy also supports sending emails to protected topics, and it ships code to support annual billing cycles (not live yet).</p> <p>As part of this release, I also enabled sign-up and login (free accounts only), and I also started reducing the rate  limits for anonymous &amp; free users a bit. With the next release and the launch of the paid plan, I'll reduce the limits a bit more. For 90% of users, you should not feel the difference.</p> <p>Features:</p> <ul> <li>UnifiedPush: Subscriber-based rate limiting for <code>up*</code> topics (#584/#609/#633, thanks to @karmanyaahm)</li> <li>Support for publishing to protected topics via email with access tokens (#612, thanks to @tamcore)</li> <li>Support for base64-encoded and nested multipart emails (#610, thanks to @Robert-litts)</li> <li>Payments: Add support for annual billing intervals (no ticket)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Web: Do not disable \"Reserve topic\" checkbox for admins (no ticket, thanks to @xenrox for reporting)</li> <li>UnifiedPush: Treat non-Basic/Bearer <code>Authorization</code> header like header was not sent (#629, thanks to @Boebbele and @S1m for reporting)</li> </ul> <p>Documentation:</p> <ul> <li>Added example for Traccar (#631, thanks to tamcore)</li> </ul> <p>Additional languages:</p> <ul> <li>Arabic (thanks to @ButterflyOfFire)</li> </ul>"},{"location":"releases/#ntfy-server-v201","title":"ntfy server v2.0.1","text":"<p>Released February 17, 2023</p> <p>This is a quick bugfix release to address a panic that happens when <code>attachment-cache-dir</code> is not set.</p> <p>Bug fixes + maintenance:</p> <ul> <li>Avoid panic in manager when <code>attachment-cache-dir</code> is not set (#617, thanks to @ksurl)  </li> <li>Ensure that calls to standard logger <code>log.Println</code> also output JSON (no ticket)</li> </ul>"},{"location":"releases/#ntfy-server-v200","title":"ntfy server v2.0.0","text":"<p>Released February 16, 2023</p> <p>This is the biggest ntfy server release I've ever done \ud83e\udd73 . Lots of new and exciting features. </p> <p>Brand-new features:</p> <ul> <li> <p>User signup/login &amp; account sync: If enabled, users can now register to create a user account, and then login to    the web app. Once logged in, topic subscriptions and user settings are stored server-side in the user account (as    opposed to only in the browser storage). So far, this is implemented only in the web app only. Once it's in the Android/iOS   app, you can easily keep your account in sync. Relevant config options are <code>enable-signup</code> and    <code>enable-login</code>.  </p> </li> <li> <p>Topic reservations \ud83c\udf89: If enabled, users can now reserve topics and restrict access to other users.   Once this is fully rolled out, you may reserve <code>ntfy.sh/philbackups</code> and define access so that only you can publish/subscribe   to the topic. Reservations let you claim ownership of a topic, and you can define access permissions for others as   <code>deny-all</code> (only you have full access), <code>read-only</code> (you can publish/subscribe, others can subscribe), <code>write-only</code> (you    can publish/subscribe, others can publish), <code>read-write</code> (everyone can publish/subscribe, but you remain the owner).   Topic reservations can be configured in the web app if <code>enable-reservations</code> is enabled, and    only if the user has a tier that supports reservations.  </p> </li> <li> <p>Access tokens: It is now possible to create user access tokens for a user account. Access tokens are useful   to avoid having to paste your password to various applications or scripts. For instance, you may want to use a    dedicated token to publish from your backup host, and one from your home automation system. Tokens can be configured   in the web app, or via the <code>ntfy token</code> command. See creating tokens,   and publishing using tokens.  </p> </li> <li> <p>Structured logging: I've redone a lot of the logging to make it more structured, and to make it easier to debug and   troubleshoot. Logs can now be written to a file, and as JSON (if configured). Each log event carries context fields   that you can filter and search on using tools like <code>jq</code>. On top of that, you can override the log level if certain fields   match. For instance, you can say <code>user_name=phil -&gt; debug</code> to log everything related to a certain user with debug level.   See logging &amp; debugging.</p> </li> <li>Tiers: You can now define and associate usage tiers to users. Tiers can be used to grant users higher limits, such as   daily message limits, attachment size, or make it possible for users to reserve topics. You could, for instance, have   a tier <code>Standard</code> that allows 500 messages/day, 15 MB attachments and 5 allowed topic reservations, and another   tier <code>Friends &amp; Family</code> with much higher limits. For ntfy.sh, I'll mostly use these tiers to facilitate paid plans (see below).   Tiers can be configured via the <code>ntfy tier ...</code> command. See tiers.</li> <li>Paid tiers: Starting very soon, I will be offering paid tiers for ntfy.sh on top of the free service. You'll be   able to subscribe to tiers with higher rate limits (more daily messages, bigger attachments) and topic reservations.   Paid tiers are facilitated by integrating Stripe as a payment provider. See payments   for details.</li> </ul> <p>ntfy is forever open source!  Yes, I will be offering some paid plans. But you don't need to panic! I won't be taking any features away, and everything  will remain forever open source, so you can self-host if you like. Similar to the donations via GitHub Sponsors and Liberapay, paid plans will help pay for the service and keep me motivated to keep going. It'll only make ntfy better.</p> <p>Other tickets:</p> <ul> <li>User account signup, login, topic reservations, access tokens, tiers etc. (#522)</li> <li><code>OPTIONS</code> method calls are not serviced when the UI is disabled (#598, thanks to @enticedwanderer for reporting)</li> </ul> <p>Special thanks:</p> <p>A big Thank-you goes to everyone who tested the user account and payments work. I very much appreciate all the feedback, suggestions, and bug reports. Thank you, @nwithan8, @deadcade, @xenrox, @cmeis, @wunter8 and the others who I forgot.</p>"},{"location":"releases/#ntfy-server-v1310","title":"ntfy server v1.31.0","text":"<p>Released February 14, 2023</p> <p>This is a tiny release before the really big release, and also the last before the big v2.0.0. The most interesting  things in this release are the new preliminary health endpoint to allow monitoring in K8s (and others), and the removal of <code>upx</code> binary packing (which was causing erroneous virus flagging). Aside from that, the <code>go-smtp</code> library did a  breaking-change upgrade, which required some work to get working again.</p> <p>Features:</p> <ul> <li>Preliminary <code>/v1/health</code> API endpoint for service monitoring (no ticket)</li> <li>Add basic health check to <code>Dockerfile</code> (#555, thanks to @bt90)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Fix <code>chown</code> issues with RHEL-like based systems (#566/#565, thanks to @danieldemus)</li> <li>Removed <code>upx</code> (binary packing) for all builds due to false virus warnings (#576, thanks to @shawnhwei for reporting)</li> <li>Upgraded <code>go-smtp</code> library and tests to v0.16.0 (#569)</li> </ul> <p>Documentation:</p> <ul> <li>Add HTTP/2 and TLSv1.3 support to nginx docs (#553, thanks to @bt90)</li> <li>Small wording change for <code>client.yml</code> (#562, thanks to @fleopaulD)</li> <li>Fix K8s install docs (#582, thanks to @Remedan)</li> <li>Updated Jellyseer docs (#604, thanks to @Y0ngg4n)</li> <li>Updated iOS developer docs (#605, thanks to @SticksDev)</li> </ul> <p>Additional languages:</p> <ul> <li>Portuguese (thanks to @ssantos)</li> </ul>"},{"location":"releases/#ntfy-server-v1301","title":"ntfy server v1.30.1","text":"<p>Released December 23, 2022 \ud83c\udf85</p> <p>This is a special holiday edition version of ntfy, with all sorts of holiday fun and games, and hidden quests. Nahh, just kidding. This release is an intermediate release mainly to eliminate warnings in the logs, so I can roll out the TLSv1.3, HTTP/2 and Unix mode changes on ntfy.sh (see #552).</p> <p>Features:</p> <ul> <li>Web: Generate random topic name button (#453, thanks to @yardenshoham)</li> <li>Add Gitpod config (#540, thanks to @yardenshoham) </li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Remove <code>--env-topic</code> option from <code>ntfy publish</code> as per deprecation (no ticket)</li> <li>Prepared statements for message cache writes (#542, thanks to @nicois)</li> <li>Do not warn about invalid IP address when behind proxy in unix socket mode (relates to #552)</li> <li>Upgrade nginx/ntfy config on ntfy.sh to work with TLSv1.3, HTTP/2 (#552, thanks to @bt90)</li> </ul>"},{"location":"releases/#ntfy-android-app-v1160","title":"ntfy Android app v1.16.0","text":"<p>Released December 11, 2022</p> <p>This is a feature and platform/dependency upgrade release. You can now have per-subscription notification settings (including sounds, DND, etc.), and you can make notifications continue ringing until they are dismissed. There's also support for thematic/adaptive launcher icon for Android 13.</p> <p>There are a few more Android 13 specific things, as well as many bug fixes: No more crashes from large images, no more opening the wrong subscription, and we also fixed the icon color issue.</p> <p>Features:</p> <ul> <li>Custom per-subscription notification settings incl. sounds, DND, etc. (#6, thanks to @doits)</li> <li>Insistent notifications that ring until dismissed (#417, thanks to @danmed for reporting)</li> <li>Add thematic/adaptive launcher icon (#513, thanks to @daedric7 for reporting)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Upgrade Android dependencies and build toolchain to SDK 33 (no ticket)</li> <li>Simplify F-Droid build: Disable tasks for Google Services (#516, thanks to @markosopcic)</li> <li>Android 13: Ask for permission to post notifications (#508)</li> <li>Android 13: Do not allow swiping away the foreground notification (#521, thanks to @alexhorner for reporting)</li> <li>Android 5 (SDK 21): Fix crash on unsubscribing (#528, thanks to Roger M.)</li> <li>Remove timestamp when copying message text (#471, thanks to @wunter8)</li> <li>Fix auto-delete if some icons do not exist anymore (#506)</li> <li>Fix notification icon color (#480, thanks to @s-h-a-r-d for reporting)</li> <li>Fix topics do not re-subscribe to Firebase after restoring from backup (#511)</li> <li>Fix crashes from large images (#474, thanks to @daedric7 for reporting)</li> <li>Fix notification click opens wrong subscription (#261, thanks to @SMAW for reporting)</li> <li>Fix Firebase-only \"link expired\" issue (#529)</li> <li>Remove \"Install .apk\" feature in Google Play variant due to policy change (#531)</li> <li>Add donate button (no ticket)</li> </ul> <p>Additional translations:</p> <ul> <li>Korean (thanks to @YJSofta0f97461d82447ac)</li> <li>Portuguese (thanks to @victormagalhaess)</li> </ul>"},{"location":"releases/#ntfy-server-v1291","title":"ntfy server v1.29.1","text":"<p>Released November 17, 2022</p> <p>This is mostly a bugfix release to address the high load on ntfy.sh. There are now two new options that allow synchronous batch-writing of messages to the cache. This avoids database locking, and subsequent pileups of waiting requests.</p> <p>Bug fixes:</p> <ul> <li>High-load servers: Allow asynchronous batch-writing of messages to cache via <code>cache-batch-*</code> options (#498/#502)</li> <li>Sender column in cache.db shows invalid IP (#503)</li> </ul> <p>Documentation:</p> <ul> <li>GitHub Actions example (#492, thanks to @ksurl)</li> <li>UnifiedPush ACL clarification (#497, thanks to @bt90) </li> <li>Install instructions for Kustomize (#463, thanks to @l-maciej)</li> </ul> <p>Other things:</p> <ul> <li>Put ntfy.sh docs on GitHub pages to reduce AWS outbound traffic cost (#491)</li> <li>The ntfy.sh server hardware was upgraded to a bigger box. If you'd like to help out carrying the server cost, sponsorships and donations \ud83d\udcb8 would be very much appreciated</li> </ul>"},{"location":"releases/#ntfy-server-v1290","title":"ntfy server v1.29.0","text":"<p>Released November 12, 2022</p> <p>This release adds the ability to add rate limit exemptions for IP ranges instead of just specific IP addresses. It also fixes  a few bugs in the web app and the CLI and adds lots of new examples and install instructions.</p> <p>Thanks to some love on HN, we got so many new ntfy users trying out ntfy and joining the chat rooms. Welcome to the ntfy community to all of you!  We also got a ton of new sponsors and donations \ud83d\udcb8, which is amazing. I'd like to thank all of you for believing in the project, and for helping me pay the server cost. The HN spike increased the AWS cost quite a bit.</p> <p>Features:</p> <ul> <li>Allow IP CIDRs in <code>visitor-request-limit-exempt-hosts</code> (#423, thanks to @karmanyaahm)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Subscriptions can now have a display name (#370, thanks to @tfheen for reporting)</li> <li>Bump Go version to Go 18.x (#422)</li> <li>Web: Strip trailing slash when subscribing (#428, thanks to @raining1123 for reporting, and @wunter8 for fixing)</li> <li>Web: Strip trailing slash after server URL in publish dialog (#441, thanks to @wunter8)</li> <li>Allow empty passwords in <code>client.yml</code> (#374, thanks to @cyqsimon for reporting, and @wunter8 for fixing)</li> <li><code>ntfy pub</code> will now use default username and password from <code>client.yml</code> (#431, thanks to @wunter8 for fixing)</li> <li>Make <code>ntfy sub</code> work with <code>NTFY_USER</code> env variable (#447, thanks to SuperSandro2000)</li> <li>Web: Disallow GET/HEAD requests with body in actions (#468, thanks to @ollien)</li> </ul> <p>Documentation:</p> <ul> <li>Updated developer docs, bump nodejs and go version (#414, thanks to @YJSoft for reporting)</li> <li>Officially document <code>?auth=..</code> query parameter (#433, thanks to @wunter8)</li> <li>Added Rundeck example (#427, thanks to @demogorgonz)</li> <li>Fix Debian installation instructions (#237, thanks to @Joeharrison94 for reporting)</li> <li>Updated example with official Gatus integration (thanks to @TwiN)</li> <li>Added Kubernetes install instructions (#452, thanks to @gmemstr)</li> <li>Added additional NixOS links for self-hosting (#462, thanks to @wamserma)</li> <li>Added additional more secure nginx config example (#451, thanks to SuperSandro2000)</li> <li>Minor fixes in the config table (#470, thanks to snh)</li> <li>Fix broken link (#476, thanks to @shuuji3)</li> </ul> <p>Additional translations:</p> <ul> <li>Korean (thanks to @YJSofta0f97461d82447ac)</li> </ul> <p>Sponsorships::</p> <p>Thank you to the amazing folks who decided to sponsor ntfy. Thank you for  helping carry the cost of the public server and developer licenses, and more importantly: Thank you for believing in ntfy!  You guys rock! </p> <p>A list of all the sponsors can be found in the README.</p>"},{"location":"releases/#ntfy-android-app-v1140","title":"ntfy Android app v1.14.0","text":"<p>Released September 27, 2022</p> <p>This release adds the ability to set a custom icon to each notification, as well as a display name to subscriptions. We also moved the action buttons in the detail view to a more logical place, fixed a bunch of bugs, and added four more languages. Hurray!</p> <p>Features:</p> <ul> <li>Subscriptions can now have a display name (#313, thanks to @wunter8)</li> <li>Display name for UnifiedPush subscriptions (#355, thanks to @wunter8)</li> <li>Polling is now done with <code>since=&lt;id&gt;</code> API, which makes deduping easier (#165)</li> <li>Turned JSON stream deprecation banner into \"Use WebSockets\" banner (no ticket)</li> <li>Move action buttons in notification cards (#236, thanks to @wunter8)</li> <li>Icons can be set for each individual notification (#126, thanks to @wunter8)</li> </ul> <p>Bug fixes:</p> <ul> <li>Long-click selecting of notifications doesn't scroll to the top anymore (#235, thanks to @wunter8)</li> <li>Add attachment and click URL extras to MESSAGE_RECEIVED broadcast (#329, thanks to @wunter8)</li> <li>Accessibility: Clear/choose service URL button in base URL dropdown now has a label (#292, thanks to @mhameed for reporting)</li> </ul> <p>Additional translations:</p> <ul> <li>Italian (thanks to @Genio2003)</li> <li>Dutch (thanks to @SchoNie)</li> <li>Ukranian (thanks to @v.kopitsa)</li> <li>Polish (thanks to @Namax0r)</li> </ul> <p>Thank you to @wunter8 for proactively picking up some Android tickets, and fixing them! You rock!</p>"},{"location":"releases/#ntfy-server-v1280","title":"ntfy server v1.28.0","text":"<p>Released September 27, 2022</p> <p>This release primarily adds icon support for the Android app, and adds a display name to subscriptions in the web app. Aside from that, we fixed a few random bugs, most importantly the <code>Priority</code> header bug that allows the use behind Cloudflare. We also added a ton of documentation. Most prominently, an integrations + projects page.</p> <p>As of now, I also have started accepting donations and sponsorships \ud83d\udcb8.  I would be very humbled if you consider donating.</p> <p>Features:</p> <ul> <li>Subscription display name for the web app (#348)</li> <li>Allow setting socket permissions via <code>--listen-unix-mode</code> (#356, thanks to @koro666)</li> <li>Icons can be set for each individual notification (#126, thanks to @wunter8)</li> <li>CLI: Allow default username/password in <code>client.yml</code> (#372, thanks to @wunter8)</li> <li>Build support for other Unix systems (#393, thanks to @la-ninpre)</li> </ul> <p>Bug fixes:</p> <ul> <li><code>ntfy user</code> commands don't work with <code>auth_file</code> but works with <code>auth-file</code> (#344, thanks to @Histalek for reporting)</li> <li>Ignore new draft HTTP <code>Priority</code> header  (#351, thanks to @ksurl for reporting)</li> <li>Delete expired attachments based on mod time instead of DB entry to avoid races (no ticket)</li> <li>Better logging for Matrix push key errors (#384, thanks to @christophehenry)</li> <li>Web: Switched \"Pop\" and \"Pop Swoosh\" sounds (#352, thanks to @coma-toast for reporting)</li> </ul> <p>Documentation:</p> <ul> <li>Added integrations + projects page (so many integrations, whoa!)</li> <li>Added example for UptimeRobot</li> <li>Fix some PowerShell publish docs (#345, thanks to @noahpeltier)</li> <li>Clarified Docker install instructions (#361, thanks to @barart for reporting)</li> <li>Mismatched quotation marks (#392], thanks to @connorlanigan)</li> </ul> <p>Additional translations:</p> <ul> <li>Ukranian (thanks to @v.kopitsa)</li> <li>Polish (thanks to @Namax0r)</li> </ul>"},{"location":"releases/#ntfy-server-v1272","title":"ntfy server v1.27.2","text":"<p>Released June 23, 2022</p> <p>This release brings two new CLI options to wait for a command to finish, or for a PID to exit. It also adds more detail to trace debug output. Aside from other bugs, it fixes a performance issue that occurred in large installations every  minute or so, due to competing stats gathering (personal installations will likely be unaffected by this). </p> <p>Features:</p> <ul> <li>Add <code>cache-startup-queries</code> option to allow custom SQLite performance tuning (no ticket)</li> <li>ntfy CLI can now wait for a command or PID before publishing (#263, thanks to the original ntfy for the idea)</li> <li>Trace: Log entire HTTP request to simplify debugging (no ticket)</li> <li>Allow setting user password via <code>NTFY_PASSWORD</code> env variable (#327, thanks to @Kenix3)</li> </ul> <p>Bug fixes:</p> <ul> <li>Fix slow requests due to excessive locking (#338)</li> <li>Return HTTP 500 for <code>GET /_matrix/push/v1/notify</code> when <code>base-url</code> is not configured (no ticket)</li> <li>Disallow setting <code>upstream-base-url</code> to the same value as <code>base-url</code> (#334, thanks to @oester for reporting)</li> <li>Fix <code>since=&lt;id&gt;</code> implementation for multiple topics (#336, thanks to @karmanyaahm for reporting)</li> <li>Simple parsing in <code>Actions</code> header now supports settings Android <code>intent=</code> key (#341, thanks to @wunter8)</li> </ul> <p>Deprecations:</p> <ul> <li>The <code>ntfy publish --env-topic</code> option is deprecated as of now (see deprecations for details)</li> </ul>"},{"location":"releases/#ntfy-server-v1260","title":"ntfy server v1.26.0","text":"<p>Released June 16, 2022</p> <p>This release adds a Matrix Push Gateway directly into ntfy, to make self-hosting a Matrix server easier. The Windows CLI is now available via Scoop, and ntfy is now natively supported in Uptime Kuma. </p> <p>Features:</p> <ul> <li>ntfy now is a Matrix Push Gateway (in combination with UnifiedPush as the Provider Push Protocol, #319/#326, thanks to @MayeulC for reporting)</li> <li>Windows CLI is now available via Scoop (ScoopInstaller#3594, #311, #269, thanks to @kzshantonu)</li> <li>Uptime Kuma now allows publishing to ntfy (uptime-kuma#1674, thanks to @philippdormann)</li> <li>Display ntfy version in <code>ntfy serve</code> command  (#314, thanks to @poblabs)</li> </ul> <p>Bug fixes:</p> <ul> <li>Web app: Show \"notifications not supported\" alert on HTTP (#323, thanks to @milksteakjellybeans for reporting)</li> <li>Use last address in <code>X-Forwarded-For</code> header as visitor address (#328)</li> </ul> <p>Documentation</p> <ul> <li>Added example for Uptime Kuma integration (#315, thanks to @philippdormann)</li> <li>Fix Docker install instructions  (#320, thanks to @milksteakjellybeans for reporting)</li> <li>Add clarifying comments to base-url (#322, thanks to @milksteakjellybeans for reporting)</li> <li>Update FAQ for iOS app (#321, thanks to @milksteakjellybeans for reporting)</li> </ul>"},{"location":"releases/#ntfy-ios-app-v12","title":"ntfy iOS app v1.2","text":"<p>Released June 16, 2022</p> <p>This release adds support for authentication/authorization for self-hosted servers. It also allows you to set your server as the default server for new topics.</p> <p>Features:</p> <ul> <li>Support for auth and user management (#277)</li> <li>Ability to add default server (#295)</li> </ul> <p>Bug fixes:</p> <ul> <li>Add validation for selfhosted server URL (#290)</li> </ul>"},{"location":"releases/#ntfy-server-v1252","title":"ntfy server v1.25.2","text":"<p>Released June 2, 2022</p> <p>This release adds the ability to set a log level to facilitate easier debugging of live systems. It also solves a  production problem with a few over-users that resulted in Firebase quota problems (only applying to the over-users).  We now block visitors from using Firebase if they trigger a quota exceeded response.</p> <p>On top of that, we updated the Firebase SDK and are now building the release in GitHub Actions. We've also got two more translations: Chinese/Simplified and Dutch.</p> <p>Features:</p> <ul> <li>Advanced logging, with different log levels and hot reloading of the log level (#284)</li> </ul> <p>Bugs:</p> <ul> <li>Respect Firebase \"quota exceeded\" response for topics, block Firebase publishing for user for 10min (#289)</li> <li>Fix documentation header blue header due to mkdocs-material theme update (no ticket) </li> </ul> <p>Maintenance:</p> <ul> <li>Upgrade Firebase Admin SDK to 4.x (#274)</li> <li>CI: Build from pipeline instead of locally (#36)</li> </ul> <p>Documentation:</p> <ul> <li>\u26a0\ufe0f Privacy policy updated to reflect additional debug/tracing feature (no ticket)</li> <li>Examples for Home Assistant (#282, thanks to @poblabs)</li> <li>Install instructions for NixOS/Nix (#282, thanks to @arjan-s)</li> <li>Clarify <code>poll_request</code> wording for iOS push notifications (#300, thanks to @prabirshrestha for reporting)</li> <li>Example for using ntfy with docker-compose.yml without root privileges (#304, thanks to @ksurl)</li> </ul> <p>Additional translations:</p> <ul> <li>Chinese/Simplified (thanks to @yufei.im)</li> <li>Dutch (thanks to @SchoNie)</li> </ul>"},{"location":"releases/#ntfy-ios-app-v11","title":"ntfy iOS app v1.1","text":"<p>Released May 31, 2022</p> <p>In this release of the iOS app, we add message priorities (mapped to iOS interruption levels), tags and emojis, action buttons to open websites or perform HTTP requests (in the notification and the detail view), a custom click action when the notification is tapped, and various other fixes.</p> <p>It also adds support for self-hosted servers (albeit not supporting auth yet). The self-hosted server needs to be configured to forward poll requests to upstream ntfy.sh for push notifications to work (see iOS push notifications for details).</p> <p>Features:</p> <ul> <li>Message priority support (no ticket)</li> <li>Tags/emojis support (no ticket)</li> <li>Action buttons support (no ticket)</li> <li>Click action support (no ticket)</li> <li>Open topic when notification clicked (no ticket)</li> <li>Notification now makes a sound and vibrates (no ticket)</li> <li>Cancel notifications when navigating to topic (no ticket)</li> <li>iOS 14.0 support (no ticket, PR#1, thanks to @callum-99)</li> </ul> <p>Bug fixes:</p> <ul> <li>iOS UI not always updating properly (#267)</li> </ul>"},{"location":"releases/#ntfy-server-v1240","title":"ntfy server v1.24.0","text":"<p>Released May 28, 2022</p> <p>This release of the ntfy server brings supporting features for the ntfy iOS app. Most importantly, it enables support for self-hosted servers in combination with the iOS app. This is to overcome the restrictive Apple development environment.</p> <p>Features:</p> <ul> <li>Regularly send Firebase keepalive messages to ~poll topic to support self-hosted servers (no ticket)</li> <li>Add subscribe filter to query exact messages by ID (no ticket)</li> <li>Support for <code>poll_request</code> messages to support iOS push notifications for self-hosted servers (no ticket)</li> </ul> <p>Bug fixes:</p> <ul> <li>Support emails without <code>Content-Type</code> (#265, thanks to @dmbonsall)</li> </ul> <p>Additional translations:</p> <ul> <li>Italian (thanks to @Genio2003)</li> </ul>"},{"location":"releases/#ntfy-ios-app-v10","title":"ntfy iOS app v1.0","text":"<p>Released May 25, 2022</p> <p>This is the first version of the ntfy iOS app. It supports only ntfy.sh (no selfhosted servers) and only messages + title (no priority, tags, attachments, ...). I'll rapidly add (hopefully) most of the other ntfy features, and then I'll focus on self-hosted servers.</p> <p>The app is now available in the App Store.</p> <p>Tickets:</p> <ul> <li>iOS app (#4, see also: TestFlight summary)</li> </ul> <p>Thanks:</p> <ul> <li>Thank you to all the testers who tried out the app. You guys gave me the confidence that it's ready to release (albeit with   some known issues which will be addressed in follow-up releases).</li> </ul>"},{"location":"releases/#ntfy-server-v1230","title":"ntfy server v1.23.0","text":"<p>Released May 21, 2022</p> <p>This release ships a CLI for Windows and macOS, as well as the ability to disable the web app entirely. On top of that,  it adds support for APNs, the iOS messaging service. This is needed for the (soon to be released) iOS app.</p> <p>Features:</p> <ul> <li>Windows and macOS builds for the ntfy CLI (#112)</li> <li>Ability to disable the web app entirely (#238/#249, thanks to @Curid)</li> <li>Add APNs config to Firebase messages to support iOS app (#247, thanks to @Copephobia)</li> </ul> <p>Bug fixes:</p> <ul> <li>Support underscores in server.yml config options (#255, thanks to @ajdelgado)</li> <li>Force MAKEFLAGS to --jobs=1 in <code>Makefile</code> (#257, thanks to @oddlama)</li> </ul> <p>Documentation:</p> <ul> <li>Typo in install instructions (#252/#251, thanks to @oddlama)</li> <li>Fix typo in private server example (#262, thanks to @MayeulC)</li> <li>Examples for jellyseerr/overseerr (#264, thanks to @Fallenbagel)</li> </ul> <p>Additional translations:</p> <ul> <li>Portuguese/Brazil (thanks to @tiagotriques and @pireshenrique22)</li> </ul> <p>Thank you to the many translators, who helped translate the new strings so quickly. I am humbled and amazed by your help.  </p>"},{"location":"releases/#ntfy-android-app-v1130","title":"ntfy Android app v1.13.0","text":"<p>Released May 11, 2022</p> <p>This release brings a slightly altered design for the detail view, featuring a card layout to make notifications more easily distinguishable from one another. It also ships per-topic settings that allow overriding minimum priority, auto delete threshold and custom icons. Aside from that, we've got tons of bug fixes as usual.</p> <p>Features:</p> <ul> <li>Per-subscription settings, custom subscription icons (#155, thanks to @mztiq for reporting)</li> <li>Cards in notification detail view (#175, thanks to @cmeis for reporting)</li> </ul> <p>Bug fixes:</p> <ul> <li>Accurate naming of \"mute notifications\" from \"pause notifications\" (#224, thanks to @shadow00 for reporting)</li> <li>Make messages with links selectable (#226, thanks to @StoyanDimitrov for reporting)</li> <li>Restoring topics or settings from backup doesn't work (#223, thanks to @shadow00 for reporting)</li> <li>Fix app icon on old Android versions (#128, thanks to @shadow00 for reporting)</li> <li>Fix races in UnifiedPush registration (#230, thanks to @Jakob for reporting)</li> <li>Prevent view action from crashing the app (#233)</li> <li>Prevent long topic names and icons from overlapping (#240, thanks to @cmeis for reporting)</li> </ul> <p>Additional translations:</p> <ul> <li>Dutch (incomplete, thanks to @diony)</li> </ul> <p>Thank you:</p> <p>Thanks to @cmeis, @StoyanDimitrov, @Fallenbagel for testing, and to @Joeharrison94 for the input. And thank you very much to all the translators for catching up so quickly.</p>"},{"location":"releases/#ntfy-server-v1220","title":"ntfy server v1.22.0","text":"<p>Released May 7, 2022</p> <p>This release makes the web app more accessible to people with disabilities, and introduces a \"mark as read\" icon in the web app. It also fixes a curious bug with WebSockets and Apache and makes the notification sounds in the web app a little quieter.</p> <p>We've also improved the documentation a little and added translations for three more languages.</p> <p>Features:</p> <ul> <li>Make web app more accessible (#217)</li> <li>Better parsing of the user actions, allowing quotes (no ticket)</li> <li>Add \"mark as read\" icon button to notification (#243, thanks to @wunter8)</li> </ul> <p>Bug fixes:</p> <ul> <li><code>Upgrade</code> header check is now case in-sensitive (#228, thanks to @wunter8 for finding it)</li> <li>Made web app sounds quieter (#222)</li> <li>Add \"private browsing\"-specific error message for Firefox/Safari (#208, thanks to @julianfoad for reporting)</li> </ul> <p>Documentation:</p> <ul> <li>Improved caddy configuration (no ticket, thanks to @Stnby)</li> <li>Additional multi-line examples on the publish page (#234, thanks to @aTable)</li> <li>Fixed PowerShell auth example to use UTF-8 (#242, thanks to @SMAW)</li> </ul> <p>Additional translations:</p> <ul> <li>Czech (thanks to @waclaw66)</li> <li>French (thanks to @nathanaelhoun)</li> <li>Hungarian (thanks to @agocsdaniel)</li> </ul> <p>Thanks for testing:</p> <p>Thanks to @wunter8 for testing.</p>"},{"location":"releases/#ntfy-android-app-v1120","title":"ntfy Android app v1.12.0","text":"<p>Released Apr 25, 2022</p> <p>The main feature in this Android release is Action Buttons, a feature that allows users to add actions to the notifications. Actions can be to view a website or app, send a broadcast, or send a HTTP request. </p> <p>We also added support for ntfy:// deep links, added three more  languages and fixed a ton of bugs. </p> <p>Features:</p> <ul> <li>Custom notification action buttons (#134,   thanks to @mrherman for reporting)</li> <li>Support for ntfy:// deep links (#20, thanks   to @Copephobia for reporting)</li> <li>Fastlane metadata can now be translated too (#198,   thanks to @StoyanDimitrov for reporting)</li> <li>Channel settings option to configure DND override, sounds, etc. (#91)</li> </ul> <p>Bug fixes:</p> <ul> <li>Validate URLs when changing default server and server in user management (#193,   thanks to @StoyanDimitrov for reporting)</li> <li>Error in sending test notification in different languages (#209,   thanks to @StoyanDimitrov for reporting)</li> <li>\"[x] Instant delivery in doze mode\" checkbox does not work properly (#211)</li> <li>Disallow \"http\" GET/HEAD actions with body (#221, thanks to   @cmeis for reporting)</li> <li>Action \"view\" with \"clear=true\" does not work on some phones (#220, thanks to   @cmeis for reporting)</li> <li>Do not group foreground service notification with others (#219, thanks to   @s-h-a-r-d for reporting)</li> </ul> <p>Additional translations:</p> <ul> <li>Czech (thanks to @waclaw66)</li> <li>French (thanks to @nathanaelhoun)</li> <li>Japanese (thanks to @shak)</li> <li>Russian (thanks to @flamey and @ilya.mikheev.coder)</li> </ul> <p>Thanks for testing:</p> <p>Thanks to @s-h-a-r-d (aka @Shard), @cmeis, @poblabs, and everyone I forgot for testing.</p>"},{"location":"releases/#ntfy-server-v1212","title":"ntfy server v1.21.2","text":"<p>Released Apr 24, 2022</p> <p>In this release, the web app got translation support and was translated into 9 languages already \ud83c\udde7\ud83c\uddec \ud83c\udde9\ud83c\uddea \ud83c\uddfa\ud83c\uddf8 \ud83c\udf0e.  It also re-adds support for ARMv6, and adds server-side support for Action Buttons. Action Buttons is a feature that will be released in the Android app soon. It allows users to add actions to the notifications.  Limited support is available in the web app.</p> <p>Features:</p> <ul> <li>Custom notification action buttons (#134,   thanks to @mrherman for reporting)</li> <li>Added ARMv6 build (#200, thanks to @jcrubioa for reporting)</li> <li>Web app internationalization support \ud83c\udde7\ud83c\uddec \ud83c\udde9\ud83c\uddea \ud83c\uddfa\ud83c\uddf8 \ud83c\udf0e (#189)</li> </ul> <p>Bug fixes:</p> <ul> <li>Web app: English language strings fixes, additional descriptions for settings (#203, thanks to @StoyanDimitrov)</li> <li>Web app: Show error message snackbar when sending test notification fails (#205, thanks to @cmeis)</li> <li>Web app: basic URL validation in user management (#204, thanks to @cmeis)</li> <li>Disallow \"http\" GET/HEAD actions with body (#221, thanks to   @cmeis for reporting)</li> </ul> <p>Translations (web app):</p> <ul> <li>Bulgarian (thanks to @StoyanDimitrov)</li> <li>German (thanks to @cmeis)</li> <li>Indonesian (thanks to @linerly)</li> <li>Japanese (thanks to @shak)</li> <li>Norwegian Bokm\u00e5l (thanks to @comradekingu)</li> <li>Russian (thanks to @flamey and @ilya.mikheev.coder)</li> <li>Spanish (thanks to @rogeliodh)</li> <li>Turkish (thanks to @ersen)</li> </ul> <p>Integrations:</p> <p>Apprise support was fully released in v0.9.8.2 of Apprise. Thanks to @particledecay and @caronc for their fantastic work.  You can try it yourself like this (detailed usage in the Apprise wiki):</p> <pre><code>pip3 install apprise\napprise -b \"Hi there\" ntfys://mytopic\n</code></pre>"},{"location":"releases/#ntfy-android-app-v1110","title":"ntfy Android app v1.11.0","text":"<p>Released Apr 7, 2022</p> <p>Features:</p> <ul> <li>Download attachments to cache folder (#181)</li> <li>Regularly delete attachments for deleted notifications (#142)</li> <li>Translations to different languages (#188, thanks to   @StoyanDimitrov for initiating things)</li> </ul> <p>Bug fixes:</p> <ul> <li>IllegalStateException: Failed to build unique file (#177, thanks to @Fallenbagel for reporting)</li> <li>SQLiteConstraintException: Crash during UP registration (#185)</li> <li>Refresh preferences screen after settings import (#183, thanks to @cmeis for reporting)</li> <li>Add priority strings to strings.xml to make it translatable (#192, thanks to @StoyanDimitrov)</li> </ul> <p>Translations:</p> <ul> <li>English language improvements (thanks to @comradekingu)</li> <li>Bulgarian (thanks to @StoyanDimitrov)</li> <li>Chinese/Simplified (thanks to @poi and @PeterCxy)</li> <li>Dutch (incomplete, thanks to @diony)</li> <li>French (thanks to @Kusoneko and @mlcsthor)</li> <li>German (thanks to @cmeis)</li> <li>Italian (thanks to @theTranslator)</li> <li>Indonesian (thanks to @linerly)</li> <li>Norwegian Bokm\u00e5l (incomplete, thanks to @comradekingu)</li> <li>Portuguese/Brazil (thanks to @LW)</li> <li>Spanish (thanks to @rogeliodh)</li> <li>Turkish (thanks to @ersen)</li> </ul> <p>Thanks:</p> <ul> <li>Many thanks to @cmeis, @Fallenbagel, @Joeharrison94,   and @rogeliodh for input on the new attachment logic, and for testing the release</li> </ul>"},{"location":"releases/#ntfy-server-v1200","title":"ntfy server v1.20.0","text":"<p>Released Apr 6, 2022</p> <p>Features::</p> <ul> <li>Added message bar and publish dialog (#196) </li> </ul> <p>Bug fixes:</p> <ul> <li>Added <code>EXPOSE 80/tcp</code> to Dockerfile to support auto-discovery in Traefik (#195, thanks to @s-h-a-r-d)</li> </ul> <p>Documentation:</p> <ul> <li>Added docker-compose example to install instructions (#194, thanks to @s-h-a-r-d)</li> </ul> <p>Integrations:</p> <ul> <li>Apprise has added integration into ntfy (#99, apprise#524,   thanks to @particledecay and @caronc for their fantastic work)</li> </ul>"},{"location":"releases/#ntfy-server-v1190","title":"ntfy server v1.19.0","text":"<p>Released Mar 30, 2022</p> <p>Bug fixes:</p> <ul> <li>Do not pack binary with <code>upx</code> for armv7/arm64 due to <code>illegal instruction</code> errors (#191, thanks to @iexos)</li> <li>Do not allow comma in topic name in publish via GET endpoint (no ticket)</li> <li>Add \"Access-Control-Allow-Origin: *\" for attachments (no ticket, thanks to @FrameXX)</li> <li>Make pruning run again in web app (#186)</li> <li>Added missing params <code>delay</code> and <code>email</code> to publish as JSON body (no ticket)</li> </ul> <p>Documentation:</p> <ul> <li>Improved e-mail publishing documentation</li> </ul>"},{"location":"releases/#ntfy-server-v1181","title":"ntfy server v1.18.1","text":"<p>Released Mar 21, 2022  This release ships no features or bug fixes. It's merely a documentation update.</p> <p>Documentation:</p> <ul> <li>Overhaul of developer documentation</li> <li>PowerShell examples for publish documentation (#138, thanks to @Joeharrison94)</li> <li>Additional examples for NodeRED, Gatus, Sonarr, Radarr, ... (thanks to @nickexyz)</li> <li>Fixes in developer instructions (thanks to @Fallenbagel for reporting)</li> </ul>"},{"location":"releases/#ntfy-android-app-v1100","title":"ntfy Android app v1.10.0","text":"<p>Released Mar 21, 2022</p> <p>Features:</p> <ul> <li>Support for UnifiedPush 2.0 specification (bytes messages, #130)</li> <li>Export/import settings and subscriptions (#115, thanks @cmeis for reporting)</li> <li>Open \"Click\" link when tapping notification (#110, thanks @cmeis for reporting)</li> <li>JSON stream deprecation banner (#164)</li> </ul> <p>Bug fixes:</p> <ul> <li>Display locale-specific times, with AM/PM or 24h format (#140, thanks @hl2guide for reporting)</li> </ul>"},{"location":"releases/#ntfy-server-v1180","title":"ntfy server v1.18.0","text":"<p>Released Mar 16, 2022</p> <p>Features:</p> <ul> <li>Publish messages as JSON (#133,    thanks @cmeis for reporting, thanks to @Joeharrison94 and    @Fallenbagel for testing)</li> </ul> <p>Bug fixes:</p> <ul> <li>rpm: do not overwrite server.yaml on package upgrade (#166, thanks @waclaw66 for reporting)</li> <li>Typo in ntfy.sh/announcements topic (#170, thanks to @sandebert)</li> <li>Readme image URL fixes (#156, thanks to @ChaseCares)</li> </ul> <p>Deprecations:</p> <ul> <li>Removed the ability to run server as <code>ntfy</code> (as opposed to <code>ntfy serve</code>) as per deprecation</li> </ul>"},{"location":"releases/#ntfy-server-v1171","title":"ntfy server v1.17.1","text":"<p>Released Mar 12, 2022</p> <p>Bug fixes:</p> <ul> <li>Replace <code>crypto.subtle</code> with <code>hashCode</code> to errors with Brave/FF-Windows (#157, thanks for reporting @arminus)</li> </ul>"},{"location":"releases/#ntfy-server-v1170","title":"ntfy server v1.17.0","text":"<p>Released Mar 11, 2022</p> <p>Features &amp; bug fixes:</p> <ul> <li>Replace web app with a React/MUI-based web app from the 21st century (#111)</li> <li>Web UI broken with auth (#132, thanks for reporting @arminus)</li> <li>Send static web resources as <code>Content-Encoding: gzip</code>, i.e. docs and web app (no ticket)</li> <li>Add support for auth via <code>?auth=...</code> query param, used by WebSocket in web app (no ticket) </li> </ul>"},{"location":"releases/#ntfy-server-v1160","title":"ntfy server v1.16.0","text":"<p>Released Feb 27, 2022</p> <p>Features &amp; Bug fixes:</p> <ul> <li>Add auth support for subscribing with CLI (#147/#148, thanks @lrabane)</li> <li>Add support for ?since= (#151, thanks for reporting @nachotp) <p>Documentation:</p> <ul> <li>Add watchtower/shoutrr examples (#150, thanks @rogeliodh)</li> <li>Add release notes</li> </ul> <p>Technical notes:</p> <ul> <li>As of this release, message IDs will be 12 characters long (as opposed to 10 characters). This is to be able to    distinguish them from Unix timestamps for #151.</li> </ul>"},{"location":"releases/#ntfy-android-app-v191","title":"ntfy Android app v1.9.1","text":"<p>Released Feb 16, 2022</p> <p>Features:</p> <ul> <li>Share to topic feature (#131, thanks u/emptymatrix for reporting)</li> <li>Ability to pick a default server (#127, thanks to @poblabs for reporting and testing)</li> <li>Automatically delete notifications (#71, thanks @arjan-s for reporting)</li> <li>Dark theme: Improvements around style and contrast (#119, thanks @kzshantonu for reporting)</li> </ul> <p>Bug fixes:</p> <ul> <li>Do not attempt to download attachments if they are already expired (#135)</li> <li>Fixed crash in AddFragment as seen per stack trace in Play Console (no ticket)</li> </ul> <p>Other thanks:</p> <ul> <li>Thanks to @rogeliodh, @cmeis and @poblabs for testing</li> </ul>"},{"location":"releases/#ntfy-server-v1150","title":"ntfy server v1.15.0","text":"<p>Released Feb 14, 2022</p> <p>Features &amp; bug fixes:</p> <ul> <li>Compress binaries with <code>upx</code> (#137)</li> <li>Add <code>visitor-request-limit-exempt-hosts</code> to exempt friendly hosts from rate limits (#144)</li> <li>Double default requests per second limit from 1 per 10s to 1 per 5s (no ticket)</li> <li>Convert <code>\\n</code> to new line for <code>X-Message</code> header as prep for sharing feature (see #136)</li> <li>Reduce bcrypt cost to 10 to make auth timing more reasonable on slow servers (no ticket)</li> <li>Docs update to include public test topics (no ticket)</li> </ul>"},{"location":"releases/#ntfy-server-v1141","title":"ntfy server v1.14.1","text":"<p>Released Feb 9, 2022</p> <p>Bug fixes:</p> <ul> <li>Fix ARMv8 Docker build (#113, thanks to @djmaze)</li> <li>No other significant changes</li> </ul>"},{"location":"releases/#ntfy-android-app-v181","title":"ntfy Android app v1.8.1","text":"<p>Released Feb 6, 2022</p> <p>Features:</p> <ul> <li>Support auth / access control (#19, thanks to @cmeis, @drsprite/@poblabs,    @gedw99, @karmanyaahm, @Mek101, @gc-ss, @julianfoad, @nmoseman, Jakob, PeterCxy, Techlosopher)</li> <li>Export/upload log now allows censored/uncensored logs (no ticket)</li> <li>Removed wake lock (except for notification dispatching, no ticket)</li> <li>Swipe to remove notifications (#117)</li> </ul> <p>Bug fixes:</p> <ul> <li>Fix download issues on SDK 29 \"Movement not allowed\" (#116, thanks Jakob)</li> <li>Fix for Android 12 crashes (#124, thanks @eskilop)</li> <li>Fix WebSocket retry logic bug with multiple servers (no ticket)</li> <li>Fix race in refresh logic leading to duplicate connections (no ticket)</li> <li>Fix scrolling issue in subscribe to topic dialog (#131, thanks @arminus)</li> <li>Fix base URL text field color in dark mode, and size with large fonts (no ticket)</li> <li>Fix action bar color in dark mode (make black, no ticket)</li> </ul> <p>Notes:</p> <ul> <li>Foundational work for per-subscription settings</li> </ul>"},{"location":"releases/#ntfy-server-v1140","title":"ntfy server v1.14.0","text":"<p>Released Feb 3, 2022</p> <p>Features:</p> <ul> <li>Server-side for authentication &amp; authorization (#19, thanks for testing @cmeis, and for input from @gedw99, @karmanyaahm, @Mek101, @gc-ss, @julianfoad, @nmoseman, Jakob, PeterCxy, Techlosopher)</li> <li>Support <code>NTFY_TOPIC</code> env variable in <code>ntfy publish</code> (#103)</li> </ul> <p>Bug fixes:</p> <ul> <li>Binary UnifiedPush messages should not be converted to attachments (part 1, #101)</li> </ul> <p>Docs:</p> <ul> <li>Clarification regarding attachments (#118, thanks @xnumad)</li> </ul>"},{"location":"releases/#ntfy-android-app-v171","title":"ntfy Android app v1.7.1","text":"<p>Released Jan 21, 2022</p> <p>New features:</p> <ul> <li>Battery improvements: wakelock disabled by default (#76)</li> <li>Dark mode: Allow changing app appearance (#102)</li> <li>Report logs: Copy/export logs to help troubleshooting (#94)</li> <li>WebSockets (experimental): Use WebSockets to subscribe to topics (#96, #100, #97)</li> <li>Show battery optimization banner (#105)</li> </ul> <p>Bug fixes:</p> <ul> <li>(Partial) support for binary UnifiedPush messages (#101)</li> </ul> <p>Notes:</p> <ul> <li>The foreground wakelock is now disabled by default</li> <li>The service restarter is now scheduled every 3h instead of every 6h</li> </ul>"},{"location":"releases/#ntfy-server-v1130","title":"ntfy server v1.13.0","text":"<p>Released Jan 16, 2022</p> <p>Features:</p> <ul> <li>Websockets endpoint</li> <li>Listen on Unix socket, see config option <code>listen-unix</code></li> </ul>"},{"location":"releases/#ntfy-android-app-v160","title":"ntfy Android app v1.6.0","text":"<p>Released Jan 14, 2022</p> <p>New features:</p> <ul> <li>Attachments: Send files to the phone (#25, #15)</li> <li>Click action: Add a click action URL to notifications (#85)</li> <li>Battery optimization: Allow disabling persistent wake-lock (#76, thanks @MatMaul)</li> <li>Recognize imported user CA certificate for self-hosted servers (#87, thanks @keith24)</li> <li>Remove mentions of \"instant delivery\" from F-Droid to make it less confusing (no ticket)</li> </ul> <p>Bug fixes:</p> <ul> <li>Subscription \"muted until\" was not always respected (#90)</li> <li>Fix two stack traces reported by Play console vitals (no ticket)</li> <li>Truncate FCM messages &gt;4,000 bytes, prefer instant messages (#84)</li> </ul>"},{"location":"releases/#ntfy-server-v1121","title":"ntfy server v1.12.1","text":"<p>Released Jan 14, 2022</p> <p>Bug fixes:</p> <ul> <li>Fix security issue with attachment peaking (#93)</li> </ul>"},{"location":"releases/#ntfy-server-v1120","title":"ntfy server v1.12.0","text":"<p>Released Jan 13, 2022</p> <p>Features:</p> <ul> <li>Attachments (#25, #15)</li> <li>Click action (#85)</li> <li>Increase FCM priority for high/max priority messages (#70)</li> </ul> <p>Bug fixes:</p> <ul> <li>Make postinst script work properly for rpm-based systems (#83, thanks @cmeis)</li> <li>Truncate FCM messages longer than 4000 bytes (#84)</li> <li>Fix <code>listen-https</code> port (no ticket)</li> </ul>"},{"location":"releases/#ntfy-android-app-v152","title":"ntfy Android app v1.5.2","text":"<p>Released Jan 3, 2022</p> <p>New features:</p> <ul> <li>Allow using ntfy as UnifiedPush distributor (#9)</li> <li>Support for longer message up to 4096 bytes (#77)</li> <li>Minimum priority: show notifications only if priority X or higher (#79)</li> <li>Allowing disabling broadcasts in global settings (#80)</li> </ul> <p>Bug fixes:</p> <ul> <li>Allow int/long extras for SEND_MESSAGE intent (#57)</li> <li>Various battery improvement fixes (#76)</li> </ul>"},{"location":"releases/#ntfy-server-v1112","title":"ntfy server v1.11.2","text":"<p>Released Jan 1, 2022</p> <p>Features &amp; bug fixes:</p> <ul> <li>Increase message limit to 4096 bytes (4k) #77</li> <li>Docs for UnifiedPush #9</li> <li>Increase keepalive interval to 55s #76</li> <li>Increase Firebase keepalive to 3 hours #76</li> </ul>"},{"location":"releases/#ntfy-server-v1100","title":"ntfy server v1.10.0","text":"<p>Released Dec 28, 2021</p> <p>Features &amp; bug fixes:</p> <ul> <li>Publish messages via e-mail #66</li> <li>Server-side work to support unifiedpush.org #64</li> <li>Fixing the Santa bug #65</li> </ul>"},{"location":"releases/#older-releases","title":"Older releases","text":"<p>For older releases, check out the GitHub releases pages for the ntfy server and the ntfy Android app.</p>"},{"location":"releases/#not-released-yet","title":"Not released yet","text":""},{"location":"releases/#ntfy-server-v2120-unreleased","title":"ntfy server v2.12.0 (UNRELEASED)","text":"<p>Features:</p> <ul> <li>Add username/password auth to email publishing (#1164, thanks to @bishtawi)</li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>Add <code>Date</code> header to outgoing emails to avoid rejection (#1141, thanks to pcouy)</li> </ul> <p>Documentation:</p> <ul> <li>Various docs updates (#1161, thanks to @OneWeekNotice)</li> <li>Typo in config docs (#1177, thanks to @hoho4190)</li> <li>Typo in CLI docs (#1172, thanks to @anirvan)</li> <li>Correction about MacroDroid (#1137, thanks to @ShlomoCode)</li> <li>Note about fail2ban in Docker (#1175), thanks to @Measurity)</li> </ul>"},{"location":"releases/#ntfy-android-app-v1161-unreleased","title":"ntfy Android app v1.16.1 (UNRELEASED)","text":"<p>Features:</p> <ul> <li>You can now disable UnifiedPush so ntfy does not act as a UnifiedPush distributor (#646, thanks to @ollien for reporting and to @wunter8 for implementing) </li> </ul> <p>Bug fixes + maintenance:</p> <ul> <li>UnifiedPush subscriptions now include the <code>Rate-Topics</code> header to facilitate subscriber-based billing (#652, thanks to @wunter8)</li> <li>Subscriptions without icons no longer appear to use another subscription's icon (#634, thanks to @topcaser for reporting and to @wunter8 for fixing)</li> <li>Bumped all dependencies to the latest versions (no ticket)</li> </ul> <p>Additional languages:</p> <ul> <li>Swedish (thanks to @hellbown)</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This page lists a few suggestions of what to do when things don't work as expected. This is not a complete list.  If this page does not help, feel free to drop by the Discord or Matrix and ask there. We're happy to help.</p>"},{"location":"troubleshooting/#ntfy-server","title":"ntfy server","text":"<p>If you host your own ntfy server, and you're having issues with any component, it is always helpful to enable debugging/tracing in the server. You can find detailed instructions in the Logging &amp; Debugging section, but it ultimately boils down to setting <code>log-level: debug</code> or <code>log-level: trace</code> in the <code>server.yml</code> file:</p> server.yml (debug)server.yml (trace) <pre><code>log-level: debug\n</code></pre> <pre><code>log-level: trace\n</code></pre> <p>If you're using environment variables, set <code>NTFY_LOG_LEVEL=debug</code> (or <code>trace</code>) instead. You can also pass <code>--debug</code> or <code>--trace</code> to the <code>ntfy serve</code> command, e.g. <code>ntfy serve --trace</code>. If you're using systemd (i.e. <code>systemctl</code>) to run ntfy, you can look at the logs using <code>journalctl -u ntfy -f</code>. The logs will look something like this:</p> Example logs (debug)Example logs (trace) <pre><code>$ ntfy serve --debug\n2023/03/20 14:45:38 INFO Listening on :2586[http] :1025[smtp], ntfy 2.1.2, log level is DEBUG (tag=startup)\n2023/03/20 14:45:38 DEBUG Waiting until 2023-03-21 00:00:00 +0000 UTC to reset visitor stats (tag=resetter)\n2023/03/20 14:45:39 DEBUG Rate limiters reset for visitor (visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=0, visitor_messages_limit=500, visitor_messages_remaining=500, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=60, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG HTTP request started (http_method=POST, http_path=/mytopic, tag=http, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=0, visitor_messages_limit=500, visitor_messages_remaining=500, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=60, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG Received message (http_method=POST, http_path=/mytopic, message_body_size=2, message_delayed=false, message_email=, message_event=message, message_firebase=true, message_id=EZu6i2WZjH0v, message_sender=127.0.0.1, message_time=1679337939, message_unifiedpush=false, tag=publish, topic=mytopic, topic_last_access=2023-03-20T14:45:38.319-04:00, topic_subscribers=0, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0002132248, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG Adding message to cache (http_method=POST, http_path=/mytopic, message_body_size=2, message_event=message, message_id=EZu6i2WZjH0v, message_sender=127.0.0.1, message_time=1679337939, tag=publish, topic=mytopic, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.000259165, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG HTTP request finished (http_method=POST, http_path=/mytopic, tag=http, time_taken_ms=2, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0004147334, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG Wrote 1 message(s) in 8.285712ms (tag=message_cache)\n...    \n</code></pre> <pre><code>$ ntfy serve --trace\n2023/03/20 14:40:42 INFO Listening on :2586[http] :1025[smtp], ntfy 2.1.2, log level is TRACE (tag=startup)\n2023/03/20 14:40:42 DEBUG Waiting until 2023-03-21 00:00:00 +0000 UTC to reset visitor stats (tag=resetter)\n2023/03/20 14:40:59 DEBUG Rate limiters reset for visitor (visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=0, visitor_messages_limit=500, visitor_messages_remaining=500, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=60, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 TRACE HTTP request started (http_method=POST, http_path=/mytopic, http_request=POST /mytopic HTTP/1.1\nUser-Agent: curl/7.81.0\nAccept: */*\nContent-Length: 2\nContent-Type: application/x-www-form-urlencoded\n\nhi, tag=http, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=0, visitor_messages_limit=500, visitor_messages_remaining=500, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=60, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 TRACE Received message (http_method=POST, http_path=/mytopic, message_body={\n  \"id\": \"Khaup1RVclU3\",\n  \"time\": 1679337659,\n  \"expires\": 1679380859,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"hi\"\n}, message_body_size=2, message_delayed=false, message_email=, message_event=message, message_firebase=true, message_id=Khaup1RVclU3, message_sender=127.0.0.1, message_time=1679337659, message_unifiedpush=false, tag=publish, topic=mytopic, topic_last_access=2023-03-20T14:40:59.893-04:00, topic_subscribers=0, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0001785048, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 DEBUG Adding message to cache (http_method=POST, http_path=/mytopic, message_body_size=2, message_event=message, message_id=Khaup1RVclU3, message_sender=127.0.0.1, message_time=1679337659, tag=publish, topic=mytopic, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0002044368, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 DEBUG HTTP request finished (http_method=POST, http_path=/mytopic, tag=http, time_taken_ms=1, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.000220502, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 TRACE No stream or WebSocket subscribers, not forwarding (message_body_size=2, message_event=message, message_id=Khaup1RVclU3, message_sender=127.0.0.1, message_time=1679337659, tag=publish, topic=mytopic, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0002369212, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:41:00 DEBUG Wrote 1 message(s) in 9.529196ms (tag=message_cache)\n...\n</code></pre>"},{"location":"troubleshooting/#android-app","title":"Android app","text":"<p>On Android, you can turn on logging in the settings under Settings \u2192 Record logs. This will store up to 1,000 log entries, which you can then copy or upload. </p> <p> </p> Recording logs on Android <p>When you copy or upload the logs, you can censor them to make it easier to share them with others. ntfy will replace all topics and hostnames with fruits. Here's an example:</p> <pre><code>This is a log of the ntfy Android app. The log shows up to 1,000 entries.\nServer URLs (aside from ntfy.sh) and topics have been replaced with fruits \ud83c\udf4c\ud83e\udd5d\ud83c\udf4b\ud83e\udd65\ud83e\udd51\ud83c\udf4a\ud83c\udf4e\ud83c\udf51.\n\nDevice info:\n--\nntfy: 1.16.0 (play)\nOS: 4.19.157-perf+\nAndroid: 13 (SDK 33)\n...\n\nLogs\n--\n\n1679339199507 2023-03-20 15:06:39.507 D NtfyMainActivity Battery: ignoring optimizations = true (we want this to be true); instant subscriptions = true; remind time reached = true; banner = false\n1679339199507 2023-03-20 15:06:39.507 D NtfySubscriberMgr Enqueuing work to refresh subscriber service\n1679339199589 2023-03-20 15:06:39.589 D NtfySubscriberMgr ServiceStartWorker: Starting foreground service with action START (work ID: a7eeeae9-9356-40df-afbd-236e5ed10a0b)\n1679339199602 2023-03-20 15:06:39.602 D NtfySubscriberService onStartCommand executed with startId: 262\n1679339199602 2023-03-20 15:06:39.602 D NtfySubscriberService using an intent with action START\n1679339199629 2023-03-20 15:06:39.629 D NtfySubscriberService Refreshing subscriptions\n1679339199629 2023-03-20 15:06:39.629 D NtfySubscriberService - Desired connections: [ConnectionId(baseUrl=https://ntfy.sh, topicsToSubscriptionIds={avocado=23801492, lemon=49013182, banana=1309176509201171073, peach=573300885184666424, pineapple=-5956897229801209316, durian=81453333, starfruit=30489279, fruit12=82532869}), ConnectionId(baseUrl=https://orange.example.com, topicsToSubscriptionIds={apple=4971265, dragonfruit=66809328})]\n1679339199629 2023-03-20 15:06:39.629 D NtfySubscriberService - Active connections: [ConnectionId(baseUrl=https://orange.example.com, topicsToSubscriptionIds={apple=4971265, dragonfruit=66809328}), ConnectionId(baseUrl=https://ntfy.sh, topicsToSubscriptionIds={avocado=23801492, lemon=49013182, banana=1309176509201171073, peach=573300885184666424, pineapple=-5956897229801209316, durian=81453333, starfruit=30489279, fruit12=82532869})]\n...\n</code></pre> <p>To get live logs, or to get more advanced access to an Android phone, you can use adb. After you install and enable adb debugging, you can get detailed logs like so:</p> <pre><code># Connect to phone (enable Wireless debugging first)\nadb connect 192.168.1.137:39539\n\n# Print all logs; you may have to pass the -s option\nadb logcat\nadb -s 192.168.1.137:39539 logcat\n\n# Only list ntfy logs\nadb logcat --pid=$(adb shell pidof -s io.heckel.ntfy)\nadb -s 192.168.1.137:39539 logcat --pid=$(adb -s 192.168.1.137:39539 shell pidof -s io.heckel.ntfy)\n</code></pre>"},{"location":"troubleshooting/#web-app","title":"Web app","text":"<p>The web app logs everything to the developer console, which you can open by pressing the F12 key on your  keyboard.</p> <p> </p> Web app logs in the developer console"},{"location":"troubleshooting/#ios-app","title":"iOS app","text":"<p>Sorry, there is no way to debug or get the logs from the iOS app (yet), outside of running the app in Xcode.</p>"},{"location":"subscribe/api/","title":"Subscribe via API","text":"<p>You can create and subscribe to a topic in the web UI, via the phone app, via the ntfy CLI, or in your own app or script by subscribing the API. This page describes how to subscribe via API. You may also want to  check out the page that describes how to publish messages.</p> <p>You can consume the subscription API as either a simple HTTP stream (JSON, SSE or raw), or  via WebSockets. Both are incredibly simple to use.</p>"},{"location":"subscribe/api/#http-stream","title":"HTTP stream","text":"<p>The HTTP stream-based API relies on a simple GET request with a streaming HTTP response, i.e you open a GET request and the connection stays open forever, sending messages back as they come in. There are three different API endpoints, which  only differ in the response format:</p> <ul> <li>JSON stream: <code>&lt;topic&gt;/json</code> returns a JSON stream, with one JSON message object per line</li> <li>SSE stream: <code>&lt;topic&gt;/sse</code> returns messages as Server-Sent Events (SSE), which   can be used with EventSource</li> <li>Raw stream: <code>&lt;topic&gt;/raw</code> returns messages as raw text, with one line per message</li> </ul>"},{"location":"subscribe/api/#subscribe-as-json-stream","title":"Subscribe as JSON stream","text":"<p>Here are a few examples of how to consume the JSON endpoint (<code>&lt;topic&gt;/json</code>). For almost all languages, this is the  recommended way to subscribe to a topic. The notable exception is JavaScript, for which the  SSE/EventSource stream is much easier to work with.</p> Command line (curl)ntfy CLIHTTPGoPythonPHP <pre><code>$ curl -s ntfy.sh/disk-alerts/json\n{\"id\":\"SLiKI64DOt\",\"time\":1635528757,\"event\":\"open\",\"topic\":\"mytopic\"}\n{\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"}\n{\"id\":\"DGUDShMCsc\",\"time\":1635528787,\"event\":\"keepalive\",\"topic\":\"mytopic\"}\n...\n</code></pre> <pre><code>$ ntfy subcribe disk-alerts\n{\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"}\n...\n</code></pre> <pre><code>GET /disk-alerts/json HTTP/1.1\nHost: ntfy.sh\n\nHTTP/1.1 200 OK\nContent-Type: application/x-ndjson; charset=utf-8\nTransfer-Encoding: chunked\n\n{\"id\":\"SLiKI64DOt\",\"time\":1635528757,\"event\":\"open\",\"topic\":\"mytopic\"}\n{\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"}\n{\"id\":\"DGUDShMCsc\",\"time\":1635528787,\"event\":\"keepalive\",\"topic\":\"mytopic\"}\n...\n</code></pre> <pre><code>resp, err := http.Get(\"https://ntfy.sh/disk-alerts/json\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer resp.Body.Close()\nscanner := bufio.NewScanner(resp.Body)\nfor scanner.Scan() {\n    println(scanner.Text())\n}\n</code></pre> <pre><code>resp = requests.get(\"https://ntfy.sh/disk-alerts/json\", stream=True)\nfor line in resp.iter_lines():\n  if line:\n    print(line)\n</code></pre> <pre><code>$fp = fopen('https://ntfy.sh/disk-alerts/json', 'r');\nif (!$fp) die('cannot open stream');\nwhile (!feof($fp)) {\n    echo fgets($fp, 2048);\n    flush();\n}\nfclose($fp);\n</code></pre>"},{"location":"subscribe/api/#subscribe-as-sse-stream","title":"Subscribe as SSE stream","text":"<p>Using EventSource in JavaScript, you can consume notifications via a Server-Sent Events (SSE) stream. It's incredibly  easy to use. Here's what it looks like. You may also want to check out the full example on GitHub.</p> Command line (curl)HTTPJavaScript <pre><code>$ curl -s ntfy.sh/mytopic/sse\nevent: open\ndata: {\"id\":\"weSj9RtNkj\",\"time\":1635528898,\"event\":\"open\",\"topic\":\"mytopic\"}\n\ndata: {\"id\":\"p0M5y6gcCY\",\"time\":1635528909,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Hi!\"}\n\nevent: keepalive\ndata: {\"id\":\"VNxNIg5fpt\",\"time\":1635528928,\"event\":\"keepalive\",\"topic\":\"test\"}\n...\n</code></pre> <pre><code>GET /mytopic/sse HTTP/1.1\nHost: ntfy.sh\n\nHTTP/1.1 200 OK\nContent-Type: text/event-stream; charset=utf-8\nTransfer-Encoding: chunked\n\nevent: open\ndata: {\"id\":\"weSj9RtNkj\",\"time\":1635528898,\"event\":\"open\",\"topic\":\"mytopic\"}\n\ndata: {\"id\":\"p0M5y6gcCY\",\"time\":1635528909,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Hi!\"}\n\nevent: keepalive\ndata: {\"id\":\"VNxNIg5fpt\",\"time\":1635528928,\"event\":\"keepalive\",\"topic\":\"test\"}\n...\n</code></pre> <pre><code>const eventSource = new EventSource('https://ntfy.sh/mytopic/sse');\neventSource.onmessage = (e) =&gt; {\n  console.log(e.data);\n};\n</code></pre>"},{"location":"subscribe/api/#subscribe-as-raw-stream","title":"Subscribe as raw stream","text":"<p>The <code>/raw</code> endpoint will output one line per message, and will only include the message body. It's useful for extremely simple scripts, and doesn't include all the data. Additional fields such as priority,  tags or message title are not included in this output  format. Keepalive messages are sent as empty lines.</p> Command line (curl)HTTPGoPythonPHP <pre><code>$ curl -s ntfy.sh/disk-alerts/raw\n\nDisk full\n...\n</code></pre> <pre><code>GET /disk-alerts/raw HTTP/1.1\nHost: ntfy.sh\n\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nTransfer-Encoding: chunked\n\nDisk full\n...\n</code></pre> <pre><code>resp, err := http.Get(\"https://ntfy.sh/disk-alerts/raw\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer resp.Body.Close()\nscanner := bufio.NewScanner(resp.Body)\nfor scanner.Scan() {\n    println(scanner.Text())\n}\n</code></pre> <pre><code>resp = requests.get(\"https://ntfy.sh/disk-alerts/raw\", stream=True)\nfor line in resp.iter_lines():\n  if line:\n    print(line)\n</code></pre> <pre><code>$fp = fopen('https://ntfy.sh/disk-alerts/raw', 'r');\nif (!$fp) die('cannot open stream');\nwhile (!feof($fp)) {\n    echo fgets($fp, 2048);\n    flush();\n}\nfclose($fp);\n</code></pre>"},{"location":"subscribe/api/#websockets","title":"WebSockets","text":"<p>You may also subscribe to topics via WebSockets, which is also widely  supported in many languages. Most notably, WebSockets are natively supported in JavaScript. You may also want to  check out the full example on GitHub. On the command line, I recommend websocat, a fantastic tool similar to <code>socat</code>  or <code>curl</code>, but specifically for WebSockets.</p> <p>The WebSockets endpoint is available at <code>&lt;topic&gt;/ws</code> and returns messages as JSON objects similar to the  JSON stream endpoint. </p> Command line (websocat)HTTPGoJavaScript <pre><code>$ websocat wss://ntfy.sh/mytopic/ws\n{\"id\":\"qRHUCCvjj8\",\"time\":1642307388,\"event\":\"open\",\"topic\":\"mytopic\"}\n{\"id\":\"eOWoUBJ14x\",\"time\":1642307754,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"hi there\"}\n</code></pre> <pre><code>GET /disk-alerts/ws HTTP/1.1\nHost: ntfy.sh\nUpgrade: websocket\nConnection: Upgrade\n\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\n...\n</code></pre> <pre><code>import \"github.com/gorilla/websocket\"\nws, _, _ := websocket.DefaultDialer.Dial(\"wss://ntfy.sh/mytopic/ws\", nil)\nmessageType, data, err := ws.ReadMessage()\n...\n</code></pre> <pre><code>const socket = new WebSocket('wss://ntfy.sh/mytopic/ws');\nsocket.addEventListener('message', function (event) {\n    console.log(event.data);\n});\n</code></pre>"},{"location":"subscribe/api/#advanced-features","title":"Advanced features","text":""},{"location":"subscribe/api/#poll-for-messages","title":"Poll for messages","text":"<p>You can also just poll for messages if you don't like the long-standing connection using the <code>poll=1</code> query parameter. The connection will end after all available messages have been read. This parameter can be combined with <code>since=</code> (defaults to <code>since=all</code>).</p> <pre><code>curl -s \"ntfy.sh/mytopic/json?poll=1\"\n</code></pre>"},{"location":"subscribe/api/#fetch-cached-messages","title":"Fetch cached messages","text":"<p>Messages may be cached for a couple of hours (see message caching) to account for network interruptions of subscribers. If the server has configured message caching, you can read back what you missed by using  the <code>since=</code> query parameter. It takes a duration (e.g. <code>10m</code> or <code>30s</code>), a Unix timestamp (e.g. <code>1635528757</code>), a message ID (e.g. <code>nFS3knfcQ1xe</code>), or <code>all</code> (all cached messages).</p> <pre><code>curl -s \"ntfy.sh/mytopic/json?since=10m\"\ncurl -s \"ntfy.sh/mytopic/json?since=1645970742\"\ncurl -s \"ntfy.sh/mytopic/json?since=nFS3knfcQ1xe\"\n</code></pre>"},{"location":"subscribe/api/#fetch-scheduled-messages","title":"Fetch scheduled messages","text":"<p>Messages that are scheduled to be delivered at a later date are not typically  returned when subscribing via the API, which makes sense, because after all, the messages have technically not been  delivered yet. To also return scheduled messages from the API, you can use the <code>scheduled=1</code> (alias: <code>sched=1</code>)  parameter (makes most sense with the <code>poll=1</code> parameter):</p> <pre><code>curl -s \"ntfy.sh/mytopic/json?poll=1&amp;sched=1\"\n</code></pre>"},{"location":"subscribe/api/#filter-messages","title":"Filter messages","text":"<p>You can filter which messages are returned based on the well-known message fields <code>id</code>, <code>message</code>, <code>title</code>, <code>priority</code> and <code>tags</code>. Here's an example that only returns messages of high or urgent priority that contains the both tags  \"zfs-error\" and \"error\". Note that the <code>priority</code> filter is a logical OR and the <code>tags</code> filter is a logical AND. </p> <pre><code>$ curl \"ntfy.sh/alerts/json?priority=high&amp;tags=zfs-error\"\n{\"id\":\"0TIkJpBcxR\",\"time\":1640122627,\"event\":\"open\",\"topic\":\"alerts\"}\n{\"id\":\"X3Uzz9O1sM\",\"time\":1640122674,\"event\":\"message\",\"topic\":\"alerts\",\"priority\":4,\n  \"tags\":[\"error\", \"zfs-error\"], \"message\":\"ZFS pool corruption detected\"}\n</code></pre> <p>Available filters (all case-insensitive):</p> Filter variable Alias Example Description <code>id</code> <code>X-ID</code> <code>ntfy.sh/mytopic/json?poll=1&amp;id=pbkiz8SD7ZxG</code> Only return messages that match this exact message ID <code>message</code> <code>X-Message</code>, <code>m</code> <code>ntfy.sh/mytopic/json?message=lalala</code> Only return messages that match this exact message string <code>title</code> <code>X-Title</code>, <code>t</code> <code>ntfy.sh/mytopic/json?title=some+title</code> Only return messages that match this exact title string <code>priority</code> <code>X-Priority</code>, <code>prio</code>, <code>p</code> <code>ntfy.sh/mytopic/json?p=high,urgent</code> Only return messages that match any priority listed (comma-separated) <code>tags</code> <code>X-Tags</code>, <code>tag</code>, <code>ta</code> <code>ntfy.sh/mytopic?/jsontags=error,alert</code> Only return messages that match all listed tags (comma-separated)"},{"location":"subscribe/api/#subscribe-to-multiple-topics","title":"Subscribe to multiple topics","text":"<p>It's possible to subscribe to multiple topics in one HTTP call by providing a comma-separated list of topics  in the URL. This allows you to reduce the number of connections you have to maintain:</p> <pre><code>$ curl -s ntfy.sh/mytopic1,mytopic2/json\n{\"id\":\"0OkXIryH3H\",\"time\":1637182619,\"event\":\"open\",\"topic\":\"mytopic1,mytopic2,mytopic3\"}\n{\"id\":\"dzJJm7BCWs\",\"time\":1637182634,\"event\":\"message\",\"topic\":\"mytopic1\",\"message\":\"for topic 1\"}\n{\"id\":\"Cm02DsxUHb\",\"time\":1637182643,\"event\":\"message\",\"topic\":\"mytopic2\",\"message\":\"for topic 2\"}\n</code></pre>"},{"location":"subscribe/api/#authentication","title":"Authentication","text":"<p>Depending on whether the server is configured to support access control, some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can:</p> <ul> <li>Use basic auth, e.g. <code>Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk</code></li> <li>or use the <code>auth</code> query parameter, e.g. <code>?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw</code></li> </ul> <p>Please refer to the publishing documentation for additional details.</p>"},{"location":"subscribe/api/#json-message-format","title":"JSON message format","text":"<p>Both the <code>/json</code> endpoint and the <code>/sse</code> endpoint return a JSON format of the message. It's very straight forward:</p> <p>Message:</p> Field Required Type Example Description <code>id</code> \u2714\ufe0f string <code>hwQ2YpKdmg</code> Randomly chosen message identifier <code>time</code> \u2714\ufe0f number <code>1635528741</code> Message date time, as Unix time stamp <code>expires</code> (\u2714)\ufe0f number <code>1673542291</code> Unix time stamp indicating when the message will be deleted, not set if <code>Cache: no</code> is sent <code>event</code> \u2714\ufe0f <code>open</code>, <code>keepalive</code>, <code>message</code>, or <code>poll_request</code> <code>message</code> Message type, typically you'd be only interested in <code>message</code> <code>topic</code> \u2714\ufe0f string <code>topic1,topic2</code> Comma-separated list of topics the message is associated with; only one for all <code>message</code> events, but may be a list in <code>open</code> events <code>message</code> - string <code>Some message</code> Message body; always present in <code>message</code> events <code>title</code> - string <code>Some title</code> Message title; if not set defaults to <code>ntfy.sh/&lt;topic&gt;</code> <code>tags</code> - string array <code>[\"tag1\",\"tag2\"]</code> List of tags that may or not map to emojis <code>priority</code> - 1, 2, 3, 4, or 5 <code>4</code> Message priority with 1=min, 3=default and 5=max <code>click</code> - URL <code>https://example.com</code> Website opened when notification is clicked <code>actions</code> - JSON array see actions buttons Action buttons that can be displayed in the notification <code>attachment</code> - JSON object see below Details about an attachment (name, URL, size, ...) <p>Attachment (part of the message, see attachments for details):</p> Field Required Type Example Description <code>name</code> \u2714\ufe0f string <code>attachment.jpg</code> Name of the attachment, can be overridden with <code>X-Filename</code>, see attachments <code>url</code> \u2714\ufe0f URL <code>https://example.com/file.jpg</code> URL of the attachment <code>type</code> -\ufe0f mime type <code>image/jpeg</code> Mime type of the attachment, only defined if attachment was uploaded to ntfy server <code>size</code> -\ufe0f number <code>33848</code> Size of the attachment in bytes, only defined if attachment was uploaded to ntfy server <code>expires</code> -\ufe0f number <code>1635528741</code> Attachment expiry date as Unix time stamp, only defined if attachment was uploaded to ntfy server <p>Here's an example for each message type:</p> Notification messageNotification message (minimal)Open messageKeepalive messagePoll request message <pre><code>{\n    \"id\": \"sPs71M8A2T\",\n    \"time\": 1643935928,\n    \"expires\": 1643936928,\n    \"event\": \"message\",\n    \"topic\": \"mytopic\",\n    \"priority\": 5,\n    \"tags\": [\n        \"warning\",\n        \"skull\"\n    ],\n    \"click\": \"https://homecam.mynet.lan/incident/1234\",\n    \"attachment\": {\n        \"name\": \"camera.jpg\",\n        \"type\": \"image/png\",\n        \"size\": 33848,\n        \"expires\": 1643946728,\n        \"url\": \"https://ntfy.sh/file/sPs71M8A2T.png\"\n    },\n    \"title\": \"Unauthorized access detected\",\n    \"message\": \"Movement detected in the yard. You better go check\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"wze9zgqK41\",\n    \"time\": 1638542110,\n    \"expires\": 1638543112,\n    \"event\": \"message\",\n    \"topic\": \"phil_alerts\",\n    \"message\": \"Remote access to phils-laptop detected. Act right away.\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"2pgIAaGrQ8\",\n    \"time\": 1638542215,\n    \"event\": \"open\",\n    \"topic\": \"phil_alerts\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"371sevb0pD\",\n    \"time\": 1638542275,\n    \"event\": \"keepalive\",\n    \"topic\": \"phil_alerts\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"371sevb0pD\",\n    \"time\": 1638542275,\n    \"event\": \"poll_request\",\n    \"topic\": \"phil_alerts\"\n}\n</code></pre>"},{"location":"subscribe/api/#list-of-all-parameters","title":"List of all parameters","text":"<p>The following is a list of all parameters that can be passed when subscribing to a message. Parameter names are case-insensitive, and can be passed as HTTP headers or query parameters in the URL. They are listed in the table in their canonical form.</p> Parameter Aliases (case-insensitive) Description <code>poll</code> <code>X-Poll</code>, <code>po</code> Return cached messages and close connection <code>since</code> <code>X-Since</code>, <code>si</code> Return cached messages since timestamp, duration or message ID <code>scheduled</code> <code>X-Scheduled</code>, <code>sched</code> Include scheduled/delayed messages in message list <code>id</code> <code>X-ID</code> Filter: Only return messages that match this exact message ID <code>message</code> <code>X-Message</code>, <code>m</code> Filter: Only return messages that match this exact message string <code>title</code> <code>X-Title</code>, <code>t</code> Filter: Only return messages that match this exact title string <code>priority</code> <code>X-Priority</code>, <code>prio</code>, <code>p</code> Filter: Only return messages that match any priority listed (comma-separated) <code>tags</code> <code>X-Tags</code>, <code>tag</code>, <code>ta</code> Filter: Only return messages that match all listed tags (comma-separated)"},{"location":"subscribe/cli/","title":"Subscribe via ntfy CLI","text":"<p>In addition to subscribing via the web UI, the phone app, or the API, you can subscribe to topics via the ntfy CLI. The CLI is included in the same <code>ntfy</code> binary that can be used to self-host a server.</p> <p>Info</p> <p>The ntfy CLI is not required to send or receive messages. You can instead send messages with curl, and even use it to subscribe to topics. It may be a little more convenient to use the ntfy CLI than writing  your own script. It all depends on the use case. \ud83d\ude00</p>"},{"location":"subscribe/cli/#install-configure","title":"Install + configure","text":"<p>To install the ntfy CLI, simply follow the steps outlined on the install page. The ntfy server and  client are the same binary, so it's all very convenient. After installing, you can (optionally) configure the client  by creating <code>~/.config/ntfy/client.yml</code> (for the non-root user), <code>~/Library/Application Support/ntfy/client.yml</code> (for the macOS non-root user), or <code>/etc/ntfy/client.yml</code> (for the root user). You  can find a skeleton config on GitHub. </p> <p>If you just want to use ntfy.sh, you don't have to change anything. If you self-host your own server, you may want to edit the <code>default-host</code> option:</p> <pre><code># Base URL used to expand short topic names in the \"ntfy publish\" and \"ntfy subscribe\" commands.\n# If you self-host a ntfy server, you'll likely want to change this.\n#\ndefault-host: https://ntfy.myhost.com\n</code></pre>"},{"location":"subscribe/cli/#publish-messages","title":"Publish messages","text":"<p>You can send messages with the ntfy CLI using the <code>ntfy publish</code> command (or any of its aliases <code>pub</code>, <code>send</code> or  <code>trigger</code>). There are a lot of examples on the page about publishing messages, but here are a few quick ones:</p> Simple sendSend with title, priority, and tagsSend at 8:30amTriggering a webhook <pre><code>ntfy publish mytopic This is a message\nntfy publish mytopic \"This is a message\"\nntfy pub mytopic \"This is a message\" \n</code></pre> <pre><code>ntfy publish \\\n    --title=\"Thing sold on eBay\" \\\n    --priority=high \\\n    --tags=partying_face \\\n    mytopic \\\n    \"Somebody just bought the thing that you sell\"\n</code></pre> <pre><code>ntfy pub --at=8:30am delayed_topic Laterzz\n</code></pre> <pre><code>ntfy trigger mywebhook\nntfy pub mywebhook\n</code></pre>"},{"location":"subscribe/cli/#attaching-a-local-file","title":"Attaching a local file","text":"<p>You can easily upload and attach a local file to a notification:</p> <pre><code>$ ntfy pub --file README.md mytopic | jq .\n{\n  \"id\": \"meIlClVLABJQ\",\n  \"time\": 1655825460,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"You received a file: README.md\",\n  \"attachment\": {\n    \"name\": \"README.md\",\n    \"type\": \"text/plain; charset=utf-8\",\n    \"size\": 2892,\n    \"expires\": 1655836260,\n    \"url\": \"https://ntfy.sh/file/meIlClVLABJQ.txt\"\n  }\n}\n</code></pre>"},{"location":"subscribe/cli/#wait-for-pidcommand","title":"Wait for PID/command","text":"<p>If you have a long-running command and want to publish a notification when the command completes,  you may wrap it with <code>ntfy publish --wait-cmd</code> (aliases: <code>--cmd</code>, <code>--done</code>). Or, if you forgot to wrap it, and the command is already running, you can wait for the process to complete with <code>ntfy publish --wait-pid</code> (alias: <code>--pid</code>).</p> <p>Run a command and wait for it to complete (here: <code>rsync ...</code>):</p> <pre><code>$ ntfy pub --wait-cmd mytopic rsync -av ./ root@example.com:/backups/ | jq .\n{\n  \"id\": \"Re0rWXZQM8WB\",\n  \"time\": 1655825624,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"Command succeeded after 56.553s: rsync -av ./ root@example.com:/backups/\"\n}\n</code></pre> <p>Or, if you already started the long-running process and want to wait for it using its process ID (PID), you can do this:</p> Using a PID directlyUsing a <code>pidof</code> <pre><code>$ ntfy pub --wait-pid 8458 mytopic | jq .\n{\n  \"id\": \"orM6hJKNYkWb\",\n  \"time\": 1655825827,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"Process with PID 8458 exited after 2.003s\"\n}\n</code></pre> <pre><code>$ ntfy pub --wait-pid $(pidof rsync) mytopic | jq .\n{\n  \"id\": \"orM6hJKNYkWb\",\n  \"time\": 1655825827,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"Process with PID 8458 exited after 2.003s\"\n}\n</code></pre>"},{"location":"subscribe/cli/#subscribe-to-topics","title":"Subscribe to topics","text":"<p>You can subscribe to topics using <code>ntfy subscribe</code>. Depending on how it is called, this command will either print or execute a command for every arriving message. There are a few different ways  in which the command can be run:</p>"},{"location":"subscribe/cli/#stream-messages-as-json","title":"Stream messages as JSON","text":"<p><pre><code>ntfy subscribe TOPIC\n</code></pre> If you run the command like this, it prints the JSON representation of every incoming message. This is useful  when you have a command that wants to stream-read incoming JSON messages. Unless <code>--poll</code> is passed, this command  stays open forever.</p> <pre><code>$ ntfy sub mytopic\n{\"id\":\"nZ8PjH5oox\",\"time\":1639971913,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"hi there\"}\n{\"id\":\"sekSLWTujn\",\"time\":1639972063,\"event\":\"message\",\"topic\":\"mytopic\",priority:5,\"message\":\"Oh no!\"}\n...\n</code></pre> Subscribe in JSON mode"},{"location":"subscribe/cli/#run-command-for-every-message","title":"Run command for every message","text":"<p><pre><code>ntfy subscribe TOPIC COMMAND\n</code></pre> If you run it like this, a COMMAND is executed for every incoming messages. Scroll down to see a list of available environment variables. Here are a few examples:</p> <pre><code>ntfy sub mytopic 'notify-send \"$m\"'\nntfy sub topic1 /my/script.sh\nntfy sub topic1 'echo \"Message $m was received. Its title was $t and it had priority $p'\n</code></pre> Execute command on incoming messages <p>The message fields are passed to the command as environment variables and can be used in scripts. Note that since  these are environment variables, you typically don't have to worry about quoting too much, as long as you enclose them in double-quotes, you should be fine:</p> Variable Aliases Description <code>$NTFY_ID</code> <code>$id</code> Unique message ID <code>$NTFY_TIME</code> <code>$time</code> Unix timestamp of the message delivery <code>$NTFY_TOPIC</code> <code>$topic</code> Topic name <code>$NTFY_MESSAGE</code> <code>$message</code>, <code>$m</code> Message body <code>$NTFY_TITLE</code> <code>$title</code>, <code>$t</code> Message title <code>$NTFY_PRIORITY</code> <code>$priority</code>, <code>$prio</code>, <code>$p</code> Message priority (1=min, 5=max) <code>$NTFY_TAGS</code> <code>$tags</code>, <code>$tag</code>, <code>$ta</code> Message tags (comma separated list) <code>$NTFY_RAW</code> <code>$raw</code> Raw JSON message"},{"location":"subscribe/cli/#subscribe-to-multiple-topics","title":"Subscribe to multiple topics","text":"<p><pre><code>ntfy subscribe --from-config\n</code></pre> To subscribe to multiple topics at once, and run different commands for each one, you can use <code>ntfy subscribe --from-config</code>, which will read the <code>subscribe</code> config from the config file. Please also check out the ntfy-client systemd service.</p> <p>Here's an example config file that subscribes to three different topics, executing a different command for each of them:</p> ~/.config/ntfy/client.yml (Linux)~/Library/Application Support/ntfy/client.yml (macOS)%AppData%\\ntfy\\client.yml (Windows) <pre><code>subscribe:\n- topic: echo-this\n  command: 'echo \"Message received: $message\"'\n- topic: alerts\n  command: notify-send -i /usr/share/ntfy/logo.png \"Important\" \"$m\"\n  if:\n    priority: high,urgent\n- topic: calc\n  command: 'gnome-calculator 2&gt;/dev/null &amp;'\n- topic: print-temp\n  command: |\n        echo \"You can easily run inline scripts, too.\"\n        temp=\"$(sensors | awk '/Pack/ { print substr($4,2,2) }')\"\n        if [ $temp -gt 80 ]; then\n          echo \"Warning: CPU temperature is $temp. Too high.\"\n        else\n          echo \"CPU temperature is $temp. That's alright.\"\n        fi\n</code></pre> <pre><code>subscribe:\n  - topic: echo-this\n    command: 'echo \"Message received: $message\"'\n  - topic: alerts\n    command: osascript -e \"display notification \\\"$message\\\"\"\n    if:\n      priority: high,urgent\n  - topic: calc\n    command: open -a Calculator\n</code></pre> <pre><code>subscribe:\n- topic: echo-this\n  command: 'echo Message received: %message%'\n- topic: alerts\n  command: |\n    notifu /m \"%NTFY_MESSAGE%\"\n    exit 0\n  if:\n    priority: high,urgent\n- topic: calc\n  command: calc\n</code></pre> <p>In this example, when <code>ntfy subscribe --from-config</code> is executed:</p> <ul> <li>Messages to <code>echo-this</code> simply echos to standard out</li> <li>Messages to <code>alerts</code> display as desktop notification for high priority messages using notify-send (Linux),    notifu (Windows) or <code>osascript</code> (macOS) </li> <li>Messages to <code>calc</code> open the calculator \ud83d\ude00 (because, why not)</li> <li>Messages to <code>print-temp</code> execute an inline script and print the CPU temperature (Linux version only)</li> </ul> <p>I hope this shows how powerful this command is. Here's a short video that demonstrates the above example:</p> Execute all the things <p>If most (or all) of your subscriptions use the same credentials, you can set defaults in <code>client.yml</code>. Use <code>default-user</code> and <code>default-password</code> or <code>default-token</code> (but not both). You can also specify a <code>default-command</code> that will run when a message is received. If a subscription does not include credentials to use or does not have a command, the defaults will be used, otherwise, the subscription settings will override the defaults.</p> <p>Warning</p> <p>Because the <code>default-user</code>, <code>default-password</code>, and <code>default-token</code> will be sent for each topic that does not have its own username/password (even if the topic does not require authentication), be sure that the servers/topics you subscribe to use HTTPS to prevent leaking the username and password.</p>"},{"location":"subscribe/cli/#using-the-systemd-service","title":"Using the systemd service","text":"<p>You can use the <code>ntfy-client</code> systemd service (see ntfy-client.service) to subscribe to multiple topics just like in the example above. The service is automatically installed (but not started) if you install the deb/rpm package. To configure it, simply edit <code>/etc/ntfy/client.yml</code> and run <code>sudo systemctl restart ntfy-client</code>.</p> <p>Info</p> <p>The <code>ntfy-client.service</code> runs as user <code>ntfy</code>, meaning that typical Linux permission restrictions apply. See below for how to fix this.</p> <p>If the service runs on your personal desktop machine, you may want to override the service user/group (<code>User=</code> and <code>Group=</code>), and  adjust the <code>DISPLAY</code> and <code>DBUS_SESSION_BUS_ADDRESS</code> environment variables. This will allow you to run commands in your X session  as the primary machine user.</p> <p>You can either manually override these systemd service entries with <code>sudo systemctl edit ntfy-client</code>, and add this (assuming your user is <code>phil</code>). Don't forget to run <code>sudo systemctl daemon-reload</code> and <code>sudo systemctl restart ntfy-client</code> after editing the service file:</p> /etc/systemd/system/ntfy-client.service.d/override.conf <pre><code>[Service]\nUser=phil\nGroup=phil\nEnvironment=\"DISPLAY=:0\" \"DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus\"\n</code></pre> <p>Or you can run the following script that creates this override config for you:</p> <pre><code>sudo sh -c 'cat &gt; /etc/systemd/system/ntfy-client.service.d/override.conf' &lt;&lt;EOF\n[Service]\nUser=$USER\nGroup=$USER\nEnvironment=\"DISPLAY=:0\" \"DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus\"\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart ntfy-client\n</code></pre>"},{"location":"subscribe/cli/#authentication","title":"Authentication","text":"<p>Depending on whether the server is configured to support access control, some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can use Basic Auth with a valid username/password. For your self-hosted server, be sure to use HTTPS to avoid eavesdropping and exposing your password. </p> <p>You can either add your username and password to the configuration file:</p> ~/.config/ntfy/client.yml <pre><code> - topic: secret\n   command: 'notify-send \"$m\"'\n   user: phill\n   password: mypass\n</code></pre> <p>Or with the <code>ntfy subscribe</code> command: <pre><code>ntfy subscribe \\\n  -u phil:mypass \\\n  ntfy.example.com/mysecrets\n</code></pre></p>"},{"location":"subscribe/phone/","title":"Subscribe from your phone","text":"<p>You can use the ntfy Android App or iOS app to receive notifications directly on your phone. Just like the server, this app is also open source, and the code is available on GitHub (Android, iOS). Feel free to  contribute, or build your own.</p> <p> </p> <p>You can get the Android app from both Google Play and  from F-Droid. Both are largely identical, with the one exception that the F-Droid flavor does not use Firebase. The iOS app can be downloaded from the App Store.</p> <p>Alternatively, you may also want to consider using the progressive web app (PWA) instead of the native app. The PWA is a website that you can add to your home screen, and it will behave just like a native app.</p>"},{"location":"subscribe/phone/#overview","title":"Overview","text":"<p>A picture is worth a thousand words. Here are a few screenshots showing what the app looks like. It's all pretty straight forward. You can add topics and as soon as you add them, you can publish messages to them.</p> <p>If those screenshots are still not enough, here's a video:</p> Sending push notifications to your Android phone"},{"location":"subscribe/phone/#message-priority","title":"Message priority","text":"<p>Supported on: </p> <p>When you publish messages to a topic, you can define a priority. This priority defines how urgently Android will notify you about the notification, and whether they make a sound and/or vibrate.</p> <p>By default, messages with default priority or higher (&gt;= 3) will vibrate and make a sound. Messages with high or urgent priority (&gt;= 4) will also show as pop-over, like so:</p> <p> </p> High and urgent notifications show as pop-over <p>You can change these settings in Android by long-pressing on the app, and tapping \"Notifications\", or from the \"Settings\" menu under \"Channel settings\". There is one notification channel for each priority:</p> <p> </p> Per-priority channels <p>Per notification channel, you can configure a channel-specific sound, whether to override the Do Not Disturb (DND) setting, and other settings such as popover or notification dot:</p> <p> </p> Per-priority sound/vibration settings"},{"location":"subscribe/phone/#instant-delivery","title":"Instant delivery","text":"<p>Supported on: </p> <p>Instant delivery allows you to receive messages on your phone instantly, even when your phone is in doze mode, i.e.  when the screen turns off, and you leave it on the desk for a while. This is achieved with a foreground service, which  you'll see as a permanent notification that looks like this:</p> <p> </p> Instant delivery foreground notification <p>Android does not allow you to dismiss this notification, unless you turn off the notification channel in the settings. To do so, long-press on the foreground notification (screenshot above) and navigate to the settings. Then toggle the  \"Subscription Service\" off:</p> <p> </p> Turning off the persistent instant delivery notification <p>Limitations without instant delivery: Without instant delivery, messages may arrive with a significant delay  (sometimes many minutes, or even hours later). If you've ever picked up your phone and  suddenly had 10 messages that were sent long before you know what I'm talking about.</p> <p>The reason for this is Firebase Cloud Messaging (FCM). FCM is the  only Google approved way to send push messages to Android devices, and it's what pretty much all apps use to deliver push  notifications. Firebase is overall pretty bad at delivering messages in time, but on Android, most apps are stuck with it.</p> <p>The ntfy Android app uses Firebase only for the main host <code>ntfy.sh</code>, and only in the Google Play flavor of the app. It won't use Firebase for any self-hosted servers, and not at all in the the F-Droid flavor.</p>"},{"location":"subscribe/phone/#share-to-topic","title":"Share to topic","text":"<p>Supported on: </p> <p>You can share files to a topic using Android's \"Share\" feature. This works in almost any app that supports sharing files or text, and it's useful for sending yourself links, files or other things. The feature remembers a few of the last topics you shared content to and lists them at the bottom.</p> <p>The feature is pretty self-explanatory, and one picture says more than a thousand words. So here are two pictures:</p>"},{"location":"subscribe/phone/#ntfy-links","title":"ntfy:// links","text":"<p>Supported on: </p> <p>The ntfy Android app supports deep linking directly to topics. This is useful when integrating with automation apps such as MacroDroid or Tasker, or to simply directly link to a topic from a mobile website. </p> <p>Info</p> <p>Android deep linking of http/https links is very brittle and limited, which is why something like <code>https://&lt;host&gt;/&lt;topic&gt;/subscribe</code> is  not possible, and instead <code>ntfy://</code> links have to be used. More details in issue #20.</p> <p>Supported link formats:</p> Link format Example Description <code>ntfy://&lt;host&gt;/&lt;topic&gt;</code> <code>ntfy://ntfy.sh/mytopic</code> Directly opens the Android app detail view for the given topic and server. Subscribes to the topic if not already subscribed. This is equivalent to the web view <code>https://ntfy.sh/mytopic</code> (HTTPS!) <code>ntfy://&lt;host&gt;/&lt;topic&gt;?secure=false</code> <code>ntfy://example.com/mytopic?secure=false</code> Same as above, except that this will use HTTP instead of HTTPS as topic URL. This is equivalent to the web view <code>http://example.com/mytopic</code> (HTTP!)"},{"location":"subscribe/phone/#integrations","title":"Integrations","text":""},{"location":"subscribe/phone/#unifiedpush","title":"UnifiedPush","text":"<p>Supported on: </p> <p>UnifiedPush is a standard for receiving push notifications without using the Google-owned Firebase Cloud Messaging (FCM) service. It puts push notifications  in the control of the user. ntfy can act as a UnifiedPush distributor, forwarding messages to apps that support it. </p> <p>To use ntfy as a distributor, simply select it in one of the supported apps.  That's it. It's a one-step installation \ud83d\ude00. If desired, you can select your own selfhosted ntfy server to handle messages. Here's an example with FluffyChat:</p>"},{"location":"subscribe/phone/#automation-apps","title":"Automation apps","text":"<p>Supported on: </p> <p>The ntfy Android app integrates nicely with automation apps such as MacroDroid or Tasker. Using Android intents, you can react to incoming messages, as well as send messages.</p>"},{"location":"subscribe/phone/#react-to-incoming-messages","title":"React to incoming messages","text":"<p>To react on incoming notifications, you have to register to intents with the <code>io.heckel.ntfy.MESSAGE_RECEIVED</code> action (see code for details). Here's an example using MacroDroid and Tasker, but any app that can catch  broadcasts is supported:</p> <p>For MacroDroid, be sure to type in the package name <code>io.heckel.ntfy</code>, otherwise intents may be silently swallowed. If you're using topics to drive automation, you'll likely want to mute the topic in the ntfy app. This will prevent  notification popups:</p> <p> </p> Muting notifications to prevent popups <p>Here's a list of extras you can access. Most likely, you'll want to filter for <code>topic</code> and react on <code>message</code>:</p> Extra name Type Example Description <code>id</code> String <code>bP8dMjO8ig</code> Randomly chosen message identifier (likely not very useful for task automation) <code>base_url</code> String <code>https://ntfy.sh</code> Root URL of the ntfy server this message came from <code>topic</code> \u2764\ufe0f String <code>mytopic</code> Topic name; you'll likely want to filter for a specific topic <code>muted</code> Boolean <code>true</code> Indicates whether the subscription was muted in the app <code>muted_str</code> String (<code>true</code> or <code>false</code>) <code>true</code> Same as <code>muted</code>, but as string <code>true</code> or <code>false</code> <code>time</code> Int <code>1635528741</code> Message date time, as Unix time stamp <code>title</code> String <code>Some title</code> Message title; may be empty if not set <code>message</code> \u2764\ufe0f String <code>Some message</code> Message body; this is likely what you're interested in <code>message_bytes</code> ByteArray <code>(binary data)</code> Message body as binary data <code>encoding</code>\ufe0f String - Message encoding (empty or \"base64\") <code>tags</code> String <code>tag1,tag2,..</code> Comma-separated list of tags <code>tags_map</code> String <code>0=tag1,1=tag2,..</code> Map of tags to make it easier to map first, second, ... tag <code>priority</code> Int (between 1-5) <code>4</code> Message priority with 1=min, 3=default and 5=max <code>click</code> String <code>https://google.com</code> Click action URL, or empty if not set <code>attachment_name</code> String <code>attachment.jpg</code> Filename of the attachment; may be empty if not set <code>attachment_type</code> String <code>image/jpeg</code> Mime type of the attachment; may be empty if not set <code>attachment_size</code> Long <code>9923111</code> Size in bytes of the attachment; may be zero if not set <code>attachment_expires</code> Long <code>1655514244</code> Expiry date as Unix timestamp of the attachment URL; may be zero if not set <code>attachment_url</code> String <code>https://ntfy.sh/file/afUbjadfl7ErP.jpg</code> URL of the attachment; may be empty if not set"},{"location":"subscribe/phone/#send-messages-using-intents","title":"Send messages using intents","text":"<p>To send messages from other apps (such as MacroDroid and Tasker), you can  broadcast an intent with the <code>io.heckel.ntfy.SEND_MESSAGE</code> action. The ntfy Android app will forward the intent as a HTTP POST request to publish a message. This is primarily useful for apps that do not support HTTP POST/PUT (like MacroDroid). In Tasker, you can simply use the \"HTTP Request\" action, which is a little easier and also works if  ntfy is not installed.</p> <p>Here's what that looks like:</p> <p>The following intent extras are supported when for the intent with the <code>io.heckel.ntfy.SEND_MESSAGE</code> action:</p> Extra name Required Type Example Description <code>base_url</code> - String <code>https://ntfy.sh</code> Root URL of the ntfy server this message came from, defaults to <code>https://ntfy.sh</code> <code>topic</code> \u2764\ufe0f \u2714 String <code>mytopic</code> Topic name; you must set this <code>title</code> - String <code>Some title</code> Message title; may be empty if not set <code>message</code> \u2764\ufe0f \u2714 String <code>Some message</code> Message body; you must set this <code>tags</code> - String <code>tag1,tag2,..</code> Comma-separated list of tags <code>priority</code> - String or Int (between 1-5) <code>4</code> Message priority with 1=min, 3=default and 5=max"},{"location":"subscribe/pwa/","title":"Using the progressive web app (PWA)","text":"<p>While ntfy doesn't have a native desktop app, it is built as a progressive web app (PWA) and thus can be installed on both desktop and mobile devices.</p> <p>This gives it its own launcher (e.g. shortcut on Windows, app on macOS, launcher shortcut on Linux, home screen icon on iOS, and launcher icon on Android), a standalone window, push notifications, and an app badge with the unread notification count.</p> <p>Web app installation is supported on (see compatibility table for details):</p> <ul> <li>Chrome: Android, Windows, Linux, macOS</li> <li>Safari: iOS 16.4+, macOS 14+</li> <li>Firefox: Android, as well as on Windows/Linux via an extension</li> <li>Edge: Windows</li> </ul> <p>Note that for self-hosted servers, Web Push must be configured for the PWA to work.</p>"},{"location":"subscribe/pwa/#installation","title":"Installation","text":""},{"location":"subscribe/pwa/#chrome-on-desktop","title":"Chrome on Desktop","text":"<p>To install and register the web app via Chrome, click the \"install app\" icon. After installation, you can find the app in your app drawer:</p>"},{"location":"subscribe/pwa/#safari-on-macos","title":"Safari on macOS","text":"<p>To install and register the web app via Safari, click on the Share menu and click Add to Dock. You need to be on macOS Sonoma (14) or higher.</p>"},{"location":"subscribe/pwa/#chromefirefox-on-android","title":"Chrome/Firefox on Android","text":"<p>For Chrome on Android, either click the \"Add to Home Screen\" banner at the bottom of the screen, or select \"Install app\" in the menu, and then click \"Install\" in the popup menu. After installation, you can find the app in your app drawer,  and on your home screen.</p> <p>For Firefox, select \"Install\" in the menu, and then click \"Add\" to add an icon to your home screen:</p>"},{"location":"subscribe/pwa/#safari-on-ios","title":"Safari on iOS","text":"<p>On iOS Safari, tap on the Share menu, then tap \"Add to Home Screen\":</p>"},{"location":"subscribe/pwa/#background-notifications","title":"Background notifications","text":"<p>Background notifications via web push are enabled by default and cannot be turned off when the app is installed, as notifications would not be delivered reliably otherwise. You can mute topics you don't want to receive notifications for.</p> <p>On desktop, you generally need either your browser or the web app open to receive notifications, though the ntfy tab doesn't need to be open. On mobile, you don't need to have the web app open to receive notifications. Look at the web docs for a detailed breakdown.</p>"},{"location":"subscribe/web/","title":"Subscribe from the web app","text":"<p>The web app lets you subscribe and publish messages to ntfy topics. For ntfy.sh, the web app is available at ntfy.sh/app. To subscribe, simply type in the topic name and click the Subscribe button. After subscribing, messages published to the topic will appear in the web app, and pop up as a notification.</p>"},{"location":"subscribe/web/#publish-messages","title":"Publish messages","text":"<p>To learn how to send messages, check out the publishing page.</p>"},{"location":"subscribe/web/#topic-reservations","title":"Topic reservations","text":"<p>If topic reservations are enabled, you can claim ownership over topics and define access to it:</p>"},{"location":"subscribe/web/#notification-features-and-browser-support","title":"Notification features and browser support","text":"<ul> <li> <p>Emoji tags are supported in all browsers</p> </li> <li> <p>Click actions are supported in all browsers</p> </li> <li> <p>Only Chrome, Edge, and Opera support displaying view and http actions in notifications.</p> </li> </ul> <p>Their presentation is platform specific.</p> <p>Note that HTTP actions are performed using fetch and thus are limited to the CORS   rules, which means that any URL you include needs to respond to a preflight request   with headers allowing the origin of the ntfy web app (<code>Access-Control-Allow-Origin: https://ntfy.sh</code>) or <code>*</code>.</p> <ul> <li>Only Chrome, Edge, and Opera support displaying images in notifications.</li> </ul> <p>Look at the Notifications API for more info.</p>"},{"location":"subscribe/web/#background-notifications","title":"Background notifications","text":"<p>While subscribing, you have the option to enable background notifications on supported browsers (see \"Settings\" tab).</p> <p>Note: If you add the web app to your homescreen (as a progressive web app, more info in the installed web app docs), you cannot turn these off, as notifications would not be delivered reliably otherwise. You can mute topics you don't want to receive notifications for.</p> <p>If background notifications are off: This requires an active ntfy tab to be open to receive notifications. These are typically instantaneous, and will appear as a system notification. If you don't see these, check that your browser is allowed to show notifications (for example in System Settings on macOS). If you don't want to enable background notifications, pinning the ntfy tab on your browser is a good solution to leave it running.</p> <p>If background notifications are on: This uses the Web Push API. You don't need an active ntfy tab open, but in some cases you may need to keep your browser open. Background notifications are only supported on the same server hosting the web app. You cannot use another server, but can instead subscribe on the other server itself.</p> <p>If the ntfy app is not opened for more than a week, background notifications will be paused. You can resume them by opening the app again, and will get a warning notification before they are paused.</p> Browser Platform Browser Running Browser Not Running Restrictions Chrome Desktop \u2705 \u274c Firefox Desktop \u2705 \u274c Edge Desktop \u2705 \u274c Opera Desktop \u2705 \u274c Safari Desktop \u2705 \u2705 requires Safari 16.1, macOS 13 Ventura Chrome Android \u2705 \u2705 Firefox Android \u2705 \u2705 Safari iOS \u26a0\ufe0f \u26a0\ufe0f requires iOS 16.4, only when app is added to homescreen <p>(Browsers below 1% usage not shown, look at the Push API for more info)</p>"}]}