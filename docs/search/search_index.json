{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started \u00b6 ntfy lets you send push notifications to your phone or desktop via scripts from any computer , using simple HTTP PUT or POST requests. I use it to notify myself when scripts fail, or long-running commands complete. Step 1: Get the app \u00b6 To receive notifications on your phone , install the app, either via Google Play or F-Droid. Once installed, open it and subscribe to a topic of your choosing. Topics don't have to explicitly be created, so just pick a name and use it later when you publish a message . Note that topic names are public, so it's wise to choose something that cannot be guessed easily. For this guide, we'll just use mytopic as our topic name: Creating/adding your first topic That's it. After you tap \"Subscribe\", the app is listening for new messages on that topic. Step 2: Send a message \u00b6 Now let's send a message to our topic. It's easy in every language, since we're just using HTTP PUT/POST, or with the ntfy CLI . The message is in the request body. Here's an example showing how to publish a simple message using a POST request: Command line (curl) ntfy CLI HTTP JavaScript Go Python PHP curl -d \"Backup successful \ud83d\ude00\" ntfy.sh/mytopic ntfy publish mytopic \"Backup successful \ud83d\ude00\" POST /mytopic HTTP / 1.1 Host : ntfy.sh Backup successful \ud83d\ude00 fetch ( 'https://ntfy.sh/mytopic' , { method : 'POST' , // PUT works too body : 'Backup successful \ud83d\ude00' }) http . Post ( \"https://ntfy.sh/mytopic\" , \"text/plain\" , strings . NewReader ( \"Backup successful \ud83d\ude00\" )) requests . post ( \"https://ntfy.sh/mytopic\" , data = \"Backup successful \ud83d\ude00\" . encode ( encoding = 'utf-8' )) file_get_contents ( 'https://ntfy.sh/mytopic' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain' , 'content' => 'Backup successful \ud83d\ude00' ] ])); This will create a notification that looks like this: Android notification That's it. You're all set. Go play and read the rest of the docs. I highly recommend reading at least the page on publishing messages , as well as the detailed page on the Android/iOS app . Here's another video showing the entire process: Sending push notifications to your Android phone","title":"Getting started"},{"location":"#getting-started","text":"ntfy lets you send push notifications to your phone or desktop via scripts from any computer , using simple HTTP PUT or POST requests. I use it to notify myself when scripts fail, or long-running commands complete.","title":"Getting started"},{"location":"#step-1-get-the-app","text":"To receive notifications on your phone , install the app, either via Google Play or F-Droid. Once installed, open it and subscribe to a topic of your choosing. Topics don't have to explicitly be created, so just pick a name and use it later when you publish a message . Note that topic names are public, so it's wise to choose something that cannot be guessed easily. For this guide, we'll just use mytopic as our topic name: Creating/adding your first topic That's it. After you tap \"Subscribe\", the app is listening for new messages on that topic.","title":"Step 1: Get the app"},{"location":"#step-2-send-a-message","text":"Now let's send a message to our topic. It's easy in every language, since we're just using HTTP PUT/POST, or with the ntfy CLI . The message is in the request body. Here's an example showing how to publish a simple message using a POST request: Command line (curl) ntfy CLI HTTP JavaScript Go Python PHP curl -d \"Backup successful \ud83d\ude00\" ntfy.sh/mytopic ntfy publish mytopic \"Backup successful \ud83d\ude00\" POST /mytopic HTTP / 1.1 Host : ntfy.sh Backup successful \ud83d\ude00 fetch ( 'https://ntfy.sh/mytopic' , { method : 'POST' , // PUT works too body : 'Backup successful \ud83d\ude00' }) http . Post ( \"https://ntfy.sh/mytopic\" , \"text/plain\" , strings . NewReader ( \"Backup successful \ud83d\ude00\" )) requests . post ( \"https://ntfy.sh/mytopic\" , data = \"Backup successful \ud83d\ude00\" . encode ( encoding = 'utf-8' )) file_get_contents ( 'https://ntfy.sh/mytopic' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain' , 'content' => 'Backup successful \ud83d\ude00' ] ])); This will create a notification that looks like this: Android notification That's it. You're all set. Go play and read the rest of the docs. I highly recommend reading at least the page on publishing messages , as well as the detailed page on the Android/iOS app . Here's another video showing the entire process: Sending push notifications to your Android phone","title":"Step 2: Send a message"},{"location":"config/","text":"Configuring the ntfy server \u00b6 The ntfy server can be configured in three ways: using a config file (typically at /etc/ntfy/server.yml , see server.yml ), via command line arguments or using environment variables. Quick start \u00b6 By default, simply running ntfy serve will start the server at port 80. No configuration needed. Batteries included \ud83d\ude00. If everything works as it should, you'll see something like this: $ ntfy serve 2021/11/30 19:59:08 Listening on :80 You can immediately start publishing messages , or subscribe via the Android app , the web UI , or simply via curl or your favorite HTTP client . To configure the server further, check out the config options table or simply type ntfy serve --help to get a list of command line options . Example config \u00b6 Info Definitely check out the server.yml file. It contains examples and detailed descriptions of all the settings. The most basic settings are base-url (the external URL of the ntfy server), the HTTP/HTTPS listen address ( listen-http and listen-https ), and socket path ( listen-unix ). All the other things are additional features. Here are a few working sample configs: server.yml (HTTP-only, with cache + attachments) server.yml (HTTP+HTTPS, with cache + attachments) server.yml (ntfy.sh config) base-url : \"http://ntfy.example.com\" cache-file : \"/var/cache/ntfy/cache.db\" attachment-cache-dir : \"/var/cache/ntfy/attachments\" base-url : \"http://ntfy.example.com\" listen-http : \":80\" listen-https : \":443\" key-file : \"/etc/letsencrypt/live/ntfy.example.com.key\" cert-file : \"/etc/letsencrypt/live/ntfy.example.com.crt\" cache-file : \"/var/cache/ntfy/cache.db\" attachment-cache-dir : \"/var/cache/ntfy/attachments\" # All the things: Behind a proxy, Firebase, cache, attachments, # SMTP publishing & receiving base-url : \"https://ntfy.sh\" listen-http : \"127.0.0.1:2586\" firebase-key-file : \"/etc/ntfy/firebase.json\" cache-file : \"/var/cache/ntfy/cache.db\" behind-proxy : true attachment-cache-dir : \"/var/cache/ntfy/attachments\" smtp-sender-addr : \"email-smtp.us-east-2.amazonaws.com:587\" smtp-sender-user : \"AKIDEADBEEFAFFE12345\" smtp-sender-pass : \"Abd13Kf+sfAk2DzifjafldkThisIsNotARealKeyOMG.\" smtp-sender-from : \"ntfy@ntfy.sh\" smtp-server-listen : \":25\" smtp-server-domain : \"ntfy.sh\" smtp-server-addr-prefix : \"ntfy-\" keepalive-interval : \"45s\" Message cache \u00b6 If desired, ntfy can temporarily keep notifications in an in-memory or an on-disk cache. Caching messages for a short period of time is important to allow phones and other devices with brittle Internet connections to be able to retrieve notifications that they may have missed. By default, ntfy keeps messages in-memory for 12 hours , which means that cached messages do not survive an application restart . You can override this behavior using the following config settings: cache-file : if set, ntfy will store messages in a SQLite based cache (default is empty, which means in-memory cache). This is required if you'd like messages to be retained across restarts . cache-duration : defines the duration for which messages are stored in the cache (default is 12h ). You can also entirely disable the cache by setting cache-duration to 0 . When the cache is disabled, messages are only passed on to the connected subscribers, but never stored on disk or even kept in memory longer than is needed to forward the message to the subscribers. Subscribers can retrieve cached messaging using the poll=1 parameter , as well as the since= parameter . Attachments \u00b6 If desired, you may allow users to upload and attach files to notifications . To enable this feature, you have to simply configure an attachment cache directory and a base URL ( attachment-cache-dir , base-url ). Once these options are set and the directory is writable by the server user, you can upload attachments via PUT. By default, attachments are stored in the disk-cache for only 3 hours . The main reason for this is to avoid legal issues and such when hosting user controlled content. Typically, this is more than enough time for the user (or the auto download feature) to download the file. The following config options are relevant to attachments: base-url is the root URL for the ntfy server; this is needed for the generated attachment URLs attachment-cache-dir is the cache directory for attached files attachment-total-size-limit is the size limit of the on-disk attachment cache (default: 5G) attachment-file-size-limit is the per-file attachment size limit (e.g. 300k, 2M, 100M, default: 15M) attachment-expiry-duration is the duration after which uploaded attachments will be deleted (e.g. 3h, 20h, default: 3h) Here's an example config using mostly the defaults (except for the cache directory, which is empty by default): /etc/ntfy/server.yml (minimal) /etc/ntfy/server.yml (all options) base-url : \"https://ntfy.sh\" attachment-cache-dir : \"/var/cache/ntfy/attachments\" base-url : \"https://ntfy.sh\" attachment-cache-dir : \"/var/cache/ntfy/attachments\" attachment-total-size-limit : \"5G\" attachment-file-size-limit : \"15M\" attachment-expiry-duration : \"3h\" visitor-attachment-total-size-limit : \"100M\" visitor-attachment-daily-bandwidth-limit : \"500M\" Please also refer to the rate limiting settings below, specifically visitor-attachment-total-size-limit and visitor-attachment-daily-bandwidth-limit . Setting these conservatively is necessary to avoid abuse. Access control \u00b6 By default, the ntfy server is open for everyone, meaning everyone can read and write to any topic (this is how ntfy.sh is configured). To restrict access to your own server, you can optionally configure authentication and authorization. ntfy's auth is implemented with a simple SQLite -based backend. It implements two roles ( user and admin ) and per-topic read and write permissions using an access control list (ACL) . Access control entries can be applied to users as well as the special everyone user ( * ), which represents anonymous API access. To set up auth, simply configure the following two options : auth-file is the user/access database; it is created automatically if it doesn't already exist; suggested location /var/lib/ntfy/user.db (easiest if deb/rpm package is used) auth-default-access defines the default/fallback access if no access control entry is found; it can be set to read-write (default), read-only , write-only or deny-all . Once configured, you can use the ntfy user command to add or modify users , and the ntfy access command lets you modify the access control list for specific users and topic patterns. Both of these commands directly edit the auth database (as defined in auth-file ), so they only work on the server, and only if the user accessing them has the right permissions. Users and roles \u00b6 The ntfy user command allows you to add/remove/change users in the ntfy user database, as well as change passwords or roles ( user or admin ). In practice, you'll often just create one admin user with ntfy user add --role=admin ... and be done with all this (see example below ). Roles: Role user (default): Users with this role have no special permissions. Manage access using ntfy access (see below ). Role admin : Users with this role can read/write to all topics. Granular access control is not necessary. Example commands (type ntfy user --help or ntfy user COMMAND --help for more details): ntfy user list # Shows list of users (alias: 'ntfy access') ntfy user add phil # Add regular user phil ntfy user add --role=admin phil # Add admin user phil ntfy user del phil # Delete user phil ntfy user change-pass phil # Change password for user phil ntfy user change-role phil admin # Make user phil an admin Access control list (ACL) \u00b6 The access control list (ACL) manages access to topics for non-admin users, and for anonymous access ( everyone / * ) . Each entry represents the access permissions for a user to a specific topic or topic pattern. The ACL can be displayed or modified with the ntfy access command: ntfy access # Shows access control list (alias: 'ntfy user list') ntfy access USERNAME # Shows access control entries for USERNAME ntfy access USERNAME TOPIC PERMISSION # Allow/deny access for USERNAME to TOPIC A USERNAME is an existing user, as created with ntfy user add (see users and roles ), or the anonymous user everyone or * , which represents clients that access the API without username/password. A TOPIC is either a specific topic name (e.g. mytopic , or phil_alerts ), or a wildcard pattern that matches any number of topics (e.g. alerts_* or ben-* ). Only the wildcard character * is supported. It stands for zero to any number of characters. A PERMISSION is any of the following supported permissions: read-write (alias: rw ): Allows publishing messages to the given topic, as well as subscribing and reading messages read-only (aliases: read , ro ): Allows only subscribing and reading messages, but not publishing to the topic write-only (aliases: write , wo ): Allows only publishing to the topic, but not subscribing to it deny (alias: none ): Allows neither publishing nor subscribing to a topic Example commands (type ntfy access --help for more details): ntfy access # Shows entire access control list ntfy access phil # Shows access for user phil ntfy access phil mytopic rw # Allow read-write access to mytopic for user phil ntfy access everyone mytopic rw # Allow anonymous read-write access to mytopic ntfy access everyone \"up*\" write # Allow anonymous write-only access to topics \"up...\" ntfy access --reset # Reset entire access control list ntfy access --reset phil # Reset all access for user phil ntfy access --reset phil mytopic # Reset access for user phil and topic mytopic Example ACL: $ ntfy access user phil (admin) - read-write access to all topics (admin role) user ben (user) - read-write access to topic garagedoor - read-write access to topic alerts* - read-only access to topic furnace user * (anonymous) - read-only access to topic announcements - read-only access to topic server-stats - no access to any (other) topics (server config) In this example, phil has the role admin , so he has read-write access to all topics (no ACL entries are necessary). User ben has three topic-specific entries. He can read, but not write to topic furnace , and has read-write access to topic garagedoor and all topics starting with the word alerts (wildcards). Clients that are not authenticated (called * / everyone ) only have read access to the announcements and server-stats topics. Example: Private instance \u00b6 The easiest way to configure a private instance is to set auth-default-access to deny-all in the server.yml : /etc/ntfy/server.yml auth-file : \"/var/lib/ntfy/user.db\" auth-default-access : \"deny-all\" After that, simply create an admin user: $ ntfy user add --role=admin phil password: mypass confirm: mypass user phil added with role admin Once you've done that, you can publish and subscribe using Basic Auth with the given username/password. Be sure to use HTTPS to avoid eavesdropping and exposing your password. Here's a simple example: Command line (curl) ntfy CLI HTTP JavaScript Go Python PHP curl \\ -u phil:mypass \\ -d \"Look ma, with auth\" \\ https://ntfy.example.com/mysecrets ntfy publish \\ -u phil:mypass \\ ntfy.example.com/mysecrets \\ \"Look ma, with auth\" POST /mysecrets HTTP / 1.1 Host : ntfy.example.com Authorization : Basic cGhpbDpteXBhc3M= Look ma, with auth fetch ( 'https://ntfy.example.com/mysecrets' , { method : 'POST' , // PUT works too body : 'Look ma, with auth' , headers : { 'Authorization' : 'Basic cGhpbDpteXBhc3M=' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.example.com/mysecrets\" , strings . NewReader ( \"Look ma, with auth\" )) req . Header . Set ( \"Authorization\" , \"Basic cGhpbDpteXBhc3M=\" ) http . DefaultClient . Do ( req ) requests . post ( \"https://ntfy.example.com/mysecrets\" , data = \"Look ma, with auth\" , headers = { \"Authorization\" : \"Basic cGhpbDpteXBhc3M=\" }) file_get_contents ( 'https://ntfy.example.com/mysecrets' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain\\r\\n' . 'Authorization: Basic cGhpbDpteXBhc3M=' , 'content' => 'Look ma, with auth' ] ])); Example: UnifiedPush \u00b6 UnifiedPush requires that the application server (e.g. Synapse, Fediverse Server, \u2026) has anonymous write access to the topic used for push messages. The topic names used by UnifiedPush all start with the up* prefix. Please refer to the UnifiedPush documentation for more details. To enable support for UnifiedPush for private servers (i.e. auth-default-access: \"deny-all\" ), you should either allow anonymous write access for the entire prefix or explicitly per topic: Prefix Explicitly $ ntfy access '*' 'up*' write-only $ ntfy access '*' upYzMtZGZiYTY5 write-only E-mail notifications \u00b6 To allow forwarding messages via e-mail, you can configure an SMTP server for outgoing messages . Once configured, you can set the X-Email header to send messages via e-mail (e.g. curl -d \"hi there\" -H \"X-Email: phil@example.com\" ntfy.sh/mytopic ). As of today, only SMTP servers with PLAIN auth and STARTLS are supported. To enable e-mail sending, you must set the following settings: base-url is the root URL for the ntfy server; this is needed for e-mail footer smtp-sender-addr is the hostname:port of the SMTP server smtp-sender-user and smtp-sender-pass are the username and password of the SMTP user smtp-sender-from is the e-mail address of the sender Here's an example config using Amazon SES for outgoing mail (this is how it is configured for ntfy.sh ): /etc/ntfy/server.yml base-url : \"https://ntfy.sh\" smtp-sender-addr : \"email-smtp.us-east-2.amazonaws.com:587\" smtp-sender-user : \"AKIDEADBEEFAFFE12345\" smtp-sender-pass : \"Abd13Kf+sfAk2DzifjafldkThisIsNotARealKeyOMG.\" smtp-sender-from : \"ntfy@ntfy.sh\" Please also refer to the rate limiting settings below, specifically visitor-email-limit-burst and visitor-email-limit-burst . Setting these conservatively is necessary to avoid abuse. E-mail publishing \u00b6 To allow publishing messages via e-mail, ntfy can run a lightweight SMTP server for incoming messages . Once configured, users can send emails to a topic e-mail address (e.g. mytopic@ntfy.sh or myprefix-mytopic@ntfy.sh ) to publish messages to a topic. This is useful for e-mail based integrations such as for statuspage.io (though these days most services also support webhooks and HTTP calls). To configure the SMTP server, you must at least set smtp-server-listen and smtp-server-domain : smtp-server-listen defines the IP address and port the SMTP server will listen on, e.g. :25 or 1.2.3.4:25 smtp-server-domain is the e-mail domain, e.g. ntfy.sh (must be identical to MX record, see below) smtp-server-addr-prefix is an optional prefix for the e-mail addresses to prevent spam. If set to ntfy- , for instance, only e-mails to ntfy-$topic@ntfy.sh will be accepted. If this is not set, all emails to $topic@ntfy.sh will be accepted (which may obviously be a spam problem). Here's an example config (this is how it is configured for ntfy.sh ): /etc/ntfy/server.yml smtp-server-listen : \":25\" smtp-server-domain : \"ntfy.sh\" smtp-server-addr-prefix : \"ntfy-\" In addition to configuring the ntfy server, you have to create two DNS records (an MX record and a corresponding A record), so incoming mail will find its way to your server. Here's an example of how ntfy.sh is configured (in Amazon Route 53 ): DNS records for incoming mail You can check if everything is working correctly by sending an email as raw SMTP via nc . Create a text file, e.g. email.txt EHLO example.com MAIL FROM: phil@example.com RCPT TO: ntfy-mytopic@ntfy.sh DATA Subject: Email for you Content-Type: text/plain; charset=\"UTF-8\" Hello from \ud83c\udde9\ud83c\uddea . And then send the mail via nc like this. If you see any lines starting with 451 , those are errors from the ntfy server. Read them carefully. $ cat email.txt | nc -N ntfy.sh 25 220 ntfy.sh ESMTP Service Ready 250-Hello example.com ... 250 2.0.0 Roger, accepting mail from <phil@example.com> 250 2.0.0 I'll make sure <ntfy-mytopic@ntfy.sh> gets this As for the DNS setup, be sure to verify that dig MX and dig A are returning results similar to this: $ dig MX ntfy.sh +short 10 mx1.ntfy.sh. $ dig A mx1.ntfy.sh +short 3.139.215.220 Behind a proxy (TLS, etc.) \u00b6 Warning If you are running ntfy behind a proxy, you must set the behind-proxy flag. Otherwise, all visitors are rate limited as if they are one. It may be desirable to run ntfy behind a proxy (e.g. nginx, HAproxy or Apache), so you can provide TLS certificates using Let's Encrypt using certbot, or simply because you'd like to share the ports (80/443) with other services. Whatever your reasons may be, there are a few things to consider. If you are running ntfy behind a proxy, you should set the behind-proxy flag. This will instruct the rate limiting logic to use the X-Forwarded-For header as the primary identifier for a visitor, as opposed to the remote IP address. If the behind-proxy flag is not set, all visitors will be counted as one, because from the perspective of the ntfy server, they all share the proxy's IP address. /etc/ntfy/server.yml # Tell ntfy to use \"X-Forwarded-For\" to identify visitors behind-proxy : true TLS/SSL \u00b6 ntfy supports HTTPS/TLS by setting the listen-https config option . However, if you are behind a proxy, it is recommended that TLS/SSL termination is done by the proxy itself (see below). I highly recommend using certbot . I use it with the dns-route53 plugin , which lets you use AWS Route 53 as the challenge. That's much easier than using the HTTP challenge. I've found this guide to be incredibly helpful. nginx/Apache2/caddy \u00b6 For your convenience, here's a working config that'll help configure things behind a proxy. Be sure to enable WebSockets by forwarding the Connection and Upgrade headers accordingly. In this example, ntfy runs on :2586 and we proxy traffic to it. We also redirect HTTP to HTTPS for GET requests against a topic or the root domain: nginx (convenient) nginx (more secure) Apache2 caddy # /etc/nginx/sites-*/ntfy # # This config allows insecure HTTP POST/PUT requests against topics to allow a short curl syntax (without -L # and \"https://\" prefix). It also disables output buffering, which has worked well for the ntfy.sh server. # # This is how ntfy.sh is configured. server { listen 80; server_name ntfy.sh; location / { # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want # it to work with curl without the annoying https:// prefix set $redirect_https \"\"; if ($request_method = GET) { set $redirect_https \"yes\"; } if ($request_uri ~* \"^/([-_a-z0-9]{0,64}$|docs/|static/)\") { set $redirect_https \"${redirect_https}yes\"; } if ($redirect_https = \"yesyes\") { return 302 https://$http_host$request_uri$is_args$query_string; } proxy_pass http://127.0.0.1:2586; proxy_http_version 1.1; proxy_buffering off; proxy_request_buffering off; proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m; client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml } } server { listen 443 ssl; server_name ntfy.sh; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4; ssl_prefer_server_ciphers on; ssl_certificate /etc/letsencrypt/live/ntfy.sh/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/ntfy.sh/privkey.pem; location / { proxy_pass http://127.0.0.1:2586; proxy_http_version 1.1; proxy_buffering off; proxy_request_buffering off; proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m; client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml } } # /etc/nginx/sites-*/ntfy # # This config requires the use of the -L flag in curl to redirect to HTTPS, and it keeps nginx output buffering # enabled. While recommended, I have had issues with that in the past. server { listen 80; server_name ntfy.sh; location / { return 302 https://$http_host$request_uri$is_args$query_string; proxy_pass http://127.0.0.1:2586; proxy_http_version 1.1; proxy_set_header Host $http_host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m; client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml } } server { listen 443 ssl; server_name ntfy.sh; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4; ssl_prefer_server_ciphers on; ssl_certificate /etc/letsencrypt/live/ntfy.sh/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/ntfy.sh/privkey.pem; location / { proxy_pass http://127.0.0.1:2586; proxy_http_version 1.1; proxy_set_header Host $http_host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m; client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml } } # /etc/apache2/sites-*/ntfy.conf <VirtualHost *:80> ServerName ntfy.sh # Proxy connections to ntfy (requires \"a2enmod proxy\") ProxyPass / http://127.0.0.1:2586/ ProxyPassReverse / http://127.0.0.1:2586/ SetEnv proxy-nokeepalive 1 SetEnv proxy-sendchunked 1 # Higher than the max message size of 4096 bytes LimitRequestBody 102400 # Enable mod_rewrite (requires \"a2enmod rewrite\") RewriteEngine on # WebSockets support (requires \"a2enmod rewrite proxy_wstunnel\") RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteCond %{HTTP:Connection} upgrade [NC] RewriteRule ^/?(.*) \"ws://127.0.0.1:2586/$1\" [P,L] # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want # it to work with curl without the annoying https:// prefix RewriteCond %{REQUEST_METHOD} GET RewriteRule ^/([-_A-Za-z0-9]{0,64})$ https://%{SERVER_NAME}/$1 [R,L] </VirtualHost> <VirtualHost *:443> ServerName ntfy.sh SSLEngine on SSLCertificateFile /etc/letsencrypt/live/ntfy.sh/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/ntfy.sh/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf # Proxy connections to ntfy (requires \"a2enmod proxy\") ProxyPass / http://127.0.0.1:2586/ ProxyPassReverse / http://127.0.0.1:2586/ SetEnv proxy-nokeepalive 1 SetEnv proxy-sendchunked 1 # Higher than the max message size of 4096 bytes LimitRequestBody 102400 # Enable mod_rewrite (requires \"a2enmod rewrite\") RewriteEngine on # WebSockets support (requires \"a2enmod rewrite proxy_wstunnel\") RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteCond %{HTTP:Connection} upgrade [NC] RewriteRule ^/?(.*) \"ws://127.0.0.1:2586/$1\" [P,L] </VirtualHost> # Note that this config is most certainly incomplete. Please help out and let me know what's missing # via Discord/Matrix or in a GitHub issue. ntfy.sh, http://nfty.sh { reverse_proxy 127.0.0.1:2586 # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want # it to work with curl without the annoying https:// prefix @httpget { protocol http method GET path_regexp ^/([-_a-z0-9]{0,64}$|docs/|static/) } redir @httpget https://{host}{uri} } Firebase (FCM) \u00b6 Info Using Firebase is optional and only works if you modify and build your own Android .apk . For a self-hosted instance, it's easier to just not bother with FCM. Firebase Cloud Messaging (FCM) is the Google approved way to send push messages to Android devices. FCM is the only method that an Android app can receive messages without having to run a foreground service . For the main host ntfy.sh , the ntfy Android app uses Firebase to send messages to the device. For other hosts, instant delivery is used and FCM is not involved. To configure FCM for your self-hosted instance of the ntfy server, follow these steps: Sign up for a Firebase account Create a Firebase app and download the key file (e.g. myapp-firebase-adminsdk-...json ) Place the key file in /etc/ntfy , set the firebase-key-file in server.yml accordingly and restart the ntfy server Build your own Android .apk following these instructions Example: # If set, also publish messages to a Firebase Cloud Messaging (FCM) topic for your app. # This is optional and only required to support Android apps (which don't allow background services anymore). # firebase-key-file: \"/etc/ntfy/ntfy-sh-firebase-adminsdk-ahnce-9f4d6f14b5.json\" iOS instant notifications \u00b6 Unlike Android, iOS heavily restricts background processing, which sadly makes it impossible to implement instant push notifications without a central server. To still support instant notifications on iOS through your self-hosted ntfy server, you have to forward so called poll_request messages to the main ntfy.sh server (or any upstream server that's APNS/Firebase connected, if you build your own iOS app), which will then forward it to Firebase/APNS. To configure it, simply set upstream-base-url like so: upstream-base-url : \"https://ntfy.sh\" If set, all incoming messages will publish a poll request to the configured upstream server, containing the message ID of the original message, instructing the iOS app to poll this server for the actual message contents. If upstream-base-url is not set, notifications will still eventually get to your device, but delivery can take hours, depending on the state of the phone. If you are using your phone, it shouldn't take more than 20-30 minutes though. In case you're curious, here's an example of the entire flow: In the iOS app, you subscribe to https://ntfy.example.com/mytopic The app subscribes to the Firebase topic 6de73be8dfb7d69e... (the SHA256 of the topic URL) When you publish a message to https://ntfy.example.com/mytopic , your ntfy server will publish a poll request to https://ntfy.sh/6de73be8dfb7d69e... . The request from your server to the upstream server contains only the message ID (in the X-Poll-ID header), and the SHA256 checksum of the topic URL (as upstream topic). The ntfy.sh server publishes the poll request message to Firebase, which forwards it to APNS, which forwards it to your iOS device Your iOS device receives the poll request, and fetches the actual message from your server, and then displays it Here's an example of what the self-hosted server forwards to the upstream server. The request is equivalent to this curl: curl -X POST -H \"X-Poll-ID: s4PdJozxM8na\" https://ntfy.sh/6de73be8dfb7d69e32fb2c00c23fe7adbd8b5504406e3068c273aa24cef4055b {\"id\":\"4HsClFEuCIcs\",\"time\":1654087955,\"event\":\"poll_request\",\"topic\":\"6de73be8dfb7d69e32fb2c00c23fe7adbd8b5504406e3068c273aa24cef4055b\",\"message\":\"New message\",\"poll_id\":\"s4PdJozxM8na\"} Note that the self-hosted server literally sends the message New message for every message, even if your message may be Some other message . This is so that if iOS cannot talk to the self-hosted server (in time, or at all), it'll show New message as a popup. Rate limiting \u00b6 Info Be aware that if you are running ntfy behind a proxy, you must set the behind-proxy flag. Otherwise, all visitors are rate limited as if they are one. By default, ntfy runs without authentication, so it is vitally important that we protect the server from abuse or overload. There are various limits and rate limits in place that you can use to configure the server: Global limit : A global limit applies across all visitors (IPs, clients, users) Visitor limit : A visitor limit only applies to a certain visitor. A visitor is identified by its IP address (or the X-Forwarded-For header if behind-proxy is set). All config options that start with the word visitor apply only on a per-visitor basis. During normal usage, you shouldn't encounter these limits at all, and even if you burst a few requests or emails (e.g. when you reconnect after a connection drop), it shouldn't have any effect. General limits \u00b6 Let's do the easy limits first: global-topic-limit defines the total number of topics before the server rejects new topics. It defaults to 15,000. visitor-subscription-limit is the number of subscriptions (open connections) per visitor. This value defaults to 30. Request limits \u00b6 In addition to the limits above, there is a requests/second limit per visitor for all sensitive GET/PUT/POST requests. This limit uses a token bucket (using Go's rate package ): Each visitor has a bucket of 60 requests they can fire against the server (defined by visitor-request-limit-burst ). After the 60, new requests will encounter a 429 Too Many Requests response. The visitor request bucket is refilled at a rate of one request every 5s (defined by visitor-request-limit-replenish ) visitor-request-limit-burst is the initial bucket of requests each visitor has. This defaults to 60. visitor-request-limit-replenish is the rate at which the bucket is refilled (one request per x). Defaults to 5s. visitor-request-limit-exempt-hosts is a comma-separated list of hostnames and IPs to be exempt from request rate limiting; hostnames are resolved at the time the server is started. Defaults to an empty list. Attachment limits \u00b6 Aside from the global file size and total attachment cache limits (see above ), there are two relevant per-visitor limits: visitor-attachment-total-size-limit is the total storage limit used for attachments per visitor. It defaults to 100M. The per-visitor storage is automatically decreased as attachments expire. External attachments (attached via X-Attach , see publishing docs ) do not count here. visitor-attachment-daily-bandwidth-limit is the total daily attachment download/upload bandwidth limit per visitor, including PUT and GET requests. This is to protect your precious bandwidth from abuse, since egress costs money in most cloud providers. This defaults to 500M. E-mail limits \u00b6 Similarly to the request limit, there is also an e-mail limit (only relevant if e-mail notifications are enabled): visitor-email-limit-burst is the initial bucket of emails each visitor has. This defaults to 16. visitor-email-limit-replenish is the rate at which the bucket is refilled (one email per x). Defaults to 1h. Firebase limits \u00b6 If Firebase is configured , all messages are also published to a Firebase topic (unless Firebase: no is set). Firebase enforces its own limits on how many messages can be published. Unfortunately these limits are a little vague and can change depending on the time of day. In practice, I have only ever observed 429 Quota exceeded responses from Firebase if too many messages are published to the same topic . In ntfy, if Firebase responds with a 429 after publishing to a topic, the visitor (= IP address) who published the message is banned from publishing to Firebase for 10 minutes (not configurable). Because publishing to Firebase happens asynchronously, there is no indication of the user that this has happened. Non-Firebase subscribers (WebSocket or HTTP stream) are not affected. After the 10 minutes are up, messages forwarding to Firebase is resumed for this visitor. If this ever happens, there will be a log message that looks something like this: WARN Firebase quota exceeded (likely for topic), temporarily denying Firebase access to visitor Tuning for scale \u00b6 If you're running ntfy for your home server, you probably don't need to worry about scale at all. In its default config, if it's not behind a proxy, the ntfy server can keep about as many connections as the open file limit allows . This limit is typically called nofile . Other than that, RAM and CPU are obviously relevant. You may also want to check out this discussion on Reddit . Depending on how you run it , here are a few limits that are relevant: Message cache \u00b6 By default, the message cache (defined by cache-file ) uses the SQLite default settings, which means it syncs to disk on every write. For personal servers, this is perfectly adequate. For larger installations, such as ntfy.sh, the write-ahead log (WAL) should be enabled, and the sync mode should be adjusted. See this article for details. In addition to that, for very high load servers (such as ntfy.sh), it may be beneficial to write messages to the cache in batches, and asynchronously. This can be enabled with the cache-batch-size and cache-batch-timeout . If you start seeing database locked messages in the logs, you should probably enable that. Here's how ntfy.sh has been tuned in the server.yml file: cache-batch-size : 25 cache-batch-timeout : \"1s\" cache-startup-queries : | pragma journal_mode = WAL; pragma synchronous = normal; pragma temp_store = memory; pragma busy_timeout = 15000; vacuum; For systemd services \u00b6 If you're running ntfy in a systemd service (e.g. for .deb/.rpm packages), the main limiting factor is the LimitNOFILE setting in the systemd unit. The default open files limit for ntfy.service is 10,000. You can override it by creating a /etc/systemd/system/ntfy.service.d/override.conf file. As far as I can tell, /etc/security/limits.conf is not relevant. /etc/systemd/system/ntfy.service.d/override.conf # Allow 20,000 ntfy connections (and give room for other file handles) [Service] LimitNOFILE=20500 Outside of systemd \u00b6 If you're running outside systemd, you may want to adjust your /etc/security/limits.conf file to increase the nofile setting. Here's an example that increases the limit to 5,000. You can find out the current setting by running ulimit -n , or manually override it temporarily by running ulimit -n 50000 . /etc/security/limits.conf # Increase open files limit globally * hard nofile 20500 Proxy limits (nginx, Apache2) \u00b6 If you are running behind a proxy (e.g. nginx, Apache), the open files limit of the proxy is also relevant. So if your proxy runs inside of systemd, increase the limits in systemd for the proxy. Typically, the proxy open files limit has to be double the number of how many connections you'd like to support , because the proxy has to maintain the client connection and the connection to ntfy. /etc/nginx/nginx.conf /etc/systemd/system/nginx.service.d/override.conf events { # Allow 40,000 proxy connections (2x of the desired ntfy connection count; # and give room for other file handles) worker_connections 40500; } # Allow 40,000 proxy connections (2x of the desired ntfy connection count; # and give room for other file handles) [Service] LimitNOFILE=40500 Banning bad actors (fail2ban) \u00b6 If you put stuff on the Internet, bad actors will try to break them or break in. fail2ban and nginx's ngx_http_limit_req_module module can be used to ban client IPs if they misbehave. This is on top of the rate limiting inside the ntfy server. Here's an example for how ntfy.sh is configured, following the instructions from two tutorials ( here and here ): /etc/nginx/nginx.conf /etc/nginx/sites-enabled/ntfy.sh /etc/fail2ban/filter.d/nginx-req-limit.conf /etc/fail2ban/jail.local # Rate limit all IP addresses http { limit_req_zone $binary_remote_addr zone=one:10m rate=45r/m; } # Alternatively, whitelist certain IP addresses http { geo $limited { default 1; 116.203.112.46/32 0; 132.226.42.65/32 0; ... } map $limited $limitkey { 1 $binary_remote_addr; 0 \"\"; } limit_req_zone $limitkey zone=one:10m rate=45r/m; } # For each server/location block server { location / { limit_req zone=one burst=1000 nodelay; } } [Definition] failregex = limiting requests, excess:.* by zone.*client: <HOST> ignoreregex = [nginx-req-limit] enabled = true filter = nginx-req-limit action = iptables-multiport[name=ReqLimit, port=\"http,https\", protocol=tcp] logpath = /var/log/nginx/error.log findtime = 600 bantime = 14400 maxretry = 10 Debugging/tracing \u00b6 If something's not working right, you can debug/trace through what the ntfy server is doing by setting the log-level to DEBUG or TRACE . The DEBUG setting will output information about each published message, but not the message contents. The TRACE setting will also print the message contents. Warning Both options are very verbose and should only be enabled in production for short periods of time. Otherwise, you're going to run out of disk space pretty quickly. You can also hot-reload the log-level by sending the SIGHUP signal to the process after editing the server.yml file. You can do so by calling systemctl reload ntfy (if ntfy is running inside systemd), or by calling kill -HUP $(pidof ntfy) . If successful, you'll see something like this: $ ntfy serve 2022/06/02 10:29:28 INFO Listening on :2586[http] :1025[smtp], log level is INFO 2022/06/02 10:29:34 INFO Partially hot reloading configuration ... 2022/06/02 10:29:34 INFO Log level is TRACE Config options \u00b6 Each config option can be set in the config file /etc/ntfy/server.yml (e.g. listen-http: :80 ) or as a CLI option (e.g. --listen-http :80 . Here's a list of all available options. Alternatively, you can set an environment variable before running the ntfy command (e.g. export NTFY_LISTEN_HTTP=:80 ). Info All config options can also be defined in the server.yml file using underscores instead of dashes, e.g. cache_duration and cache-duration are both supported. This is to support stricter YAML parsers that do not support dashes. Config option Env variable Format Default Description base-url NTFY_BASE_URL URL - Public facing base URL of the service (e.g. https://ntfy.sh ) listen-http NTFY_LISTEN_HTTP [host]:port :80 Listen address for the HTTP web server listen-https NTFY_LISTEN_HTTPS [host]:port - Listen address for the HTTPS web server. If set, you also need to set key-file and cert-file . listen-unix NTFY_LISTEN_UNIX filename - Path to a Unix socket to listen on listen-unix-mode NTFY_LISTEN_UNIX_MODE file mode system default File mode of the Unix socket, e.g. 0700 or 0777 key-file NTFY_KEY_FILE filename - HTTPS/TLS private key file, only used if listen-https is set. cert-file NTFY_CERT_FILE filename - HTTPS/TLS certificate file, only used if listen-https is set. firebase-key-file NTFY_FIREBASE_KEY_FILE filename - If set, also publish messages to a Firebase Cloud Messaging (FCM) topic for your app. This is optional and only required to save battery when using the Android app. See Firebase (FCM . cache-file NTFY_CACHE_FILE filename - If set, messages are cached in a local SQLite database instead of only in-memory. This allows for service restarts without losing messages in support of the since= parameter. See message cache . cache-duration NTFY_CACHE_DURATION duration 12h Duration for which messages will be buffered before they are deleted. This is required to support the since=... and poll=1 parameter. Set this to 0 to disable the cache entirely. cache-startup-queries NTFY_CACHE_STARTUP_QUERIES string (SQL queries) - SQL queries to run during database startup; this is useful for tuning and enabling WAL mode cache-batch-size NTFY_CACHE_BATCH_SIZE int 0 Max size of messages to batch together when writing to message cache (if zero, writes are synchronous) cache-batch-timeout NTFY_CACHE_BATCH_TIMEOUT duration 0s Timeout for batched async writes to the message cache (if zero, writes are synchronous) auth-file NTFY_AUTH_FILE filename - Auth database file used for access control. If set, enables authentication and access control. See access control . auth-default-access NTFY_AUTH_DEFAULT_ACCESS read-write , read-only , write-only , deny-all read-write Default permissions if no matching entries in the auth database are found. Default is read-write . behind-proxy NTFY_BEHIND_PROXY bool false If set, the X-Forwarded-For header is used to determine the visitor IP address instead of the remote address of the connection. attachment-cache-dir NTFY_ATTACHMENT_CACHE_DIR directory - Cache directory for attached files. To enable attachments, this has to be set. attachment-total-size-limit NTFY_ATTACHMENT_TOTAL_SIZE_LIMIT size 5G Limit of the on-disk attachment cache directory. If the limits is exceeded, new attachments will be rejected. attachment-file-size-limit NTFY_ATTACHMENT_FILE_SIZE_LIMIT size 15M Per-file attachment size limit (e.g. 300k, 2M, 100M). Larger attachment will be rejected. attachment-expiry-duration NTFY_ATTACHMENT_EXPIRY_DURATION duration 3h Duration after which uploaded attachments will be deleted (e.g. 3h, 20h). Strongly affects visitor-attachment-total-size-limit . smtp-sender-addr NTFY_SMTP_SENDER_ADDR host:port - SMTP server address to allow email sending smtp-sender-user NTFY_SMTP_SENDER_USER string - SMTP user; only used if e-mail sending is enabled smtp-sender-pass NTFY_SMTP_SENDER_PASS string - SMTP password; only used if e-mail sending is enabled smtp-sender-from NTFY_SMTP_SENDER_FROM e-mail address - SMTP sender e-mail address; only used if e-mail sending is enabled smtp-server-listen NTFY_SMTP_SERVER_LISTEN [ip]:port - Defines the IP address and port the SMTP server will listen on, e.g. :25 or 1.2.3.4:25 smtp-server-domain NTFY_SMTP_SERVER_DOMAIN domain name - SMTP server e-mail domain, e.g. ntfy.sh smtp-server-addr-prefix NTFY_SMTP_SERVER_ADDR_PREFIX string - Optional prefix for the e-mail addresses to prevent spam, e.g. ntfy- keepalive-interval NTFY_KEEPALIVE_INTERVAL duration 45s Interval in which keepalive messages are sent to the client. This is to prevent intermediaries closing the connection for inactivity. Note that the Android app has a hardcoded timeout at 77s, so it should be less than that. manager-interval NTFY_MANAGER_INTERVAL duration 1m Interval in which the manager prunes old messages, deletes topics and prints the stats. global-topic-limit NTFY_GLOBAL_TOPIC_LIMIT number 15,000 Rate limiting: Total number of topics before the server rejects new topics. upstream-base-url NTFY_UPSTREAM_BASE_URL URL https://ntfy.sh Forward poll request to an upstream server, this is needed for iOS push notifications for self-hosted servers visitor-attachment-total-size-limit NTFY_VISITOR_ATTACHMENT_TOTAL_SIZE_LIMIT size 100M Rate limiting: Total storage limit used for attachments per visitor, for all attachments combined. Storage is freed after attachments expire. See attachment-expiry-duration . visitor-attachment-daily-bandwidth-limit NTFY_VISITOR_ATTACHMENT_DAILY_BANDWIDTH_LIMIT size 500M Rate limiting: Total daily attachment download/upload traffic limit per visitor. This is to protect your bandwidth costs from exploding. visitor-email-limit-burst NTFY_VISITOR_EMAIL_LIMIT_BURST number 16 Rate limiting:Initial limit of e-mails per visitor visitor-email-limit-replenish NTFY_VISITOR_EMAIL_LIMIT_REPLENISH duration 1h Rate limiting: Strongly related to visitor-email-limit-burst : The rate at which the bucket is refilled visitor-request-limit-burst NTFY_VISITOR_REQUEST_LIMIT_BURST number 60 Rate limiting: Allowed GET/PUT/POST requests per second, per visitor. This setting is the initial bucket of requests each visitor has visitor-request-limit-replenish NTFY_VISITOR_REQUEST_LIMIT_REPLENISH duration 5s Rate limiting: Strongly related to visitor-request-limit-burst : The rate at which the bucket is refilled visitor-request-limit-exempt-hosts NTFY_VISITOR_REQUEST_LIMIT_EXEMPT_HOSTS comma-separated host/IP list - Rate limiting: List of hostnames and IPs to be exempt from request rate limiting visitor-subscription-limit NTFY_VISITOR_SUBSCRIPTION_LIMIT number 30 Rate limiting: Number of subscriptions per visitor (IP address) web-root NTFY_WEB_ROOT app , home or disable app Sets web root to landing page (home), web app (app) or disables the web app entirely (disable) The format for a duration is: <number>(smh) , e.g. 30s, 20m or 1h. The format for a size is: <number>(GMK) , e.g. 1G, 200M or 4000k. Command line options \u00b6 $ ntfy serve --help NAME: ntfy serve - Run the ntfy server USAGE: ntfy serve [OPTIONS..] CATEGORY: Server commands DESCRIPTION: Run the ntfy server and listen for incoming requests The command will load the configuration from /etc/ntfy/server.yml. Config options can be overridden using the command line options. Examples: ntfy serve # Starts server in the foreground (on port 80) ntfy serve --listen-http :8080 # Starts server with alternate port OPTIONS: --attachment-cache-dir value, --attachment_cache_dir value cache directory for attached files [$NTFY_ATTACHMENT_CACHE_DIR] --attachment-expiry-duration value, --attachment_expiry_duration value, -X value duration after which uploaded attachments will be deleted (e.g. 3h, 20h) (default: 3h) [$NTFY_ATTACHMENT_EXPIRY_DURATION] --attachment-file-size-limit value, --attachment_file_size_limit value, -Y value per-file attachment size limit (e.g. 300k, 2M, 100M) (default: 15M) [$NTFY_ATTACHMENT_FILE_SIZE_LIMIT] --attachment-total-size-limit value, --attachment_total_size_limit value, -A value limit of the on-disk attachment cache (default: 5G) [$NTFY_ATTACHMENT_TOTAL_SIZE_LIMIT] --auth-default-access value, --auth_default_access value, -p value default permissions if no matching entries in the auth database are found (default: \"read-write\") [$NTFY_AUTH_DEFAULT_ACCESS] --auth-file value, --auth_file value, -H value auth database file used for access control [$NTFY_AUTH_FILE] --base-url value, --base_url value, -B value externally visible base URL for this host (e.g. https://ntfy.sh) [$NTFY_BASE_URL] --behind-proxy, --behind_proxy, -P if set, use X-Forwarded-For header to determine visitor IP address (for rate limiting) (default: false) [$NTFY_BEHIND_PROXY] --cache-duration since, --cache_duration since, -b since buffer messages for this time to allow since requests (default: 12h0m0s) [$NTFY_CACHE_DURATION] --cache-file value, --cache_file value, -C value cache file used for message caching [$NTFY_CACHE_FILE] --cache-batch-size value, --cache_batch_size value max size of messages to batch together when writing to message cache (if zero, writes are synchronous) (default: 0) [$NTFY_BATCH_SIZE] --cache-batch-timeout value, --cache_batch_timeout value timeout for batched async writes to the message cache (if zero, writes are synchronous) (default: 0s) [$NTFY_CACHE_BATCH_TIMEOUT] --cache-startup-queries value, --cache_startup_queries value queries run when the cache database is initialized [$NTFY_CACHE_STARTUP_QUERIES] --cert-file value, --cert_file value, -E value certificate file, if listen-https is set [$NTFY_CERT_FILE] --config value, -c value config file (default: /etc/ntfy/server.yml) [$NTFY_CONFIG_FILE] --debug, -d enable debug logging (default: false) [$NTFY_DEBUG] --firebase-key-file value, --firebase_key_file value, -F value Firebase credentials file; if set additionally publish to FCM topic [$NTFY_FIREBASE_KEY_FILE] --global-topic-limit value, --global_topic_limit value, -T value total number of topics allowed (default: 15000) [$NTFY_GLOBAL_TOPIC_LIMIT] --keepalive-interval value, --keepalive_interval value, -k value interval of keepalive messages (default: 45s) [$NTFY_KEEPALIVE_INTERVAL] --key-file value, --key_file value, -K value private key file, if listen-https is set [$NTFY_KEY_FILE] --listen-http value, --listen_http value, -l value ip:port used to as HTTP listen address (default: \":80\") [$NTFY_LISTEN_HTTP] --listen-https value, --listen_https value, -L value ip:port used to as HTTPS listen address [$NTFY_LISTEN_HTTPS] --listen-unix value, --listen_unix value, -U value listen on unix socket path [$NTFY_LISTEN_UNIX] --log-level value, --log_level value set log level (default: \"INFO\") [$NTFY_LOG_LEVEL] --manager-interval value, --manager_interval value, -m value interval of for message pruning and stats printing (default: 1m0s) [$NTFY_MANAGER_INTERVAL] --no-log-dates, --no_log_dates disable the date/time prefix (default: false) [$NTFY_NO_LOG_DATES] --smtp-sender-addr value, --smtp_sender_addr value SMTP server address (host:port) for outgoing emails [$NTFY_SMTP_SENDER_ADDR] --smtp-sender-from value, --smtp_sender_from value SMTP sender address (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_FROM] --smtp-sender-pass value, --smtp_sender_pass value SMTP password (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_PASS] --smtp-sender-user value, --smtp_sender_user value SMTP user (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_USER] --smtp-server-addr-prefix value, --smtp_server_addr_prefix value SMTP email address prefix for topics to prevent spam (e.g. 'ntfy-') [$NTFY_SMTP_SERVER_ADDR_PREFIX] --smtp-server-domain value, --smtp_server_domain value SMTP domain for incoming e-mail, e.g. ntfy.sh [$NTFY_SMTP_SERVER_DOMAIN] --smtp-server-listen value, --smtp_server_listen value SMTP server address (ip:port) for incoming emails, e.g. :25 [$NTFY_SMTP_SERVER_LISTEN] --trace enable tracing (very verbose, be careful) (default: false) [$NTFY_TRACE] --upstream-base-url value, --upstream_base_url value forward poll request to an upstream server, this is needed for iOS push notifications for self-hosted servers [$NTFY_UPSTREAM_BASE_URL] --visitor-attachment-daily-bandwidth-limit value, --visitor_attachment_daily_bandwidth_limit value total daily attachment download/upload bandwidth limit per visitor (default: \"500M\") [$NTFY_VISITOR_ATTACHMENT_DAILY_BANDWIDTH_LIMIT] --visitor-attachment-total-size-limit value, --visitor_attachment_total_size_limit value total storage limit used for attachments per visitor (default: \"100M\") [$NTFY_VISITOR_ATTACHMENT_TOTAL_SIZE_LIMIT] --visitor-email-limit-burst value, --visitor_email_limit_burst value initial limit of e-mails per visitor (default: 16) [$NTFY_VISITOR_EMAIL_LIMIT_BURST] --visitor-email-limit-replenish value, --visitor_email_limit_replenish value interval at which burst limit is replenished (one per x) (default: 1h0m0s) [$NTFY_VISITOR_EMAIL_LIMIT_REPLENISH] --visitor-request-limit-burst value, --visitor_request_limit_burst value initial limit of requests per visitor (default: 60) [$NTFY_VISITOR_REQUEST_LIMIT_BURST] --visitor-request-limit-exempt-hosts value, --visitor_request_limit_exempt_hosts value hostnames and/or IP addresses of hosts that will be exempt from the visitor request limit [$NTFY_VISITOR_REQUEST_LIMIT_EXEMPT_HOSTS] --visitor-request-limit-replenish value, --visitor_request_limit_replenish value interval at which burst limit is replenished (one per x) (default: 5s) [$NTFY_VISITOR_REQUEST_LIMIT_REPLENISH] --visitor-subscription-limit value, --visitor_subscription_limit value number of subscriptions per visitor (default: 30) [$NTFY_VISITOR_SUBSCRIPTION_LIMIT] --web-root value, --web_root value sets web root to landing page (home), web app (app) or disabled (disable) (default: \"app\") [$NTFY_WEB_ROOT]","title":"Configuration"},{"location":"config/#configuring-the-ntfy-server","text":"The ntfy server can be configured in three ways: using a config file (typically at /etc/ntfy/server.yml , see server.yml ), via command line arguments or using environment variables.","title":"Configuring the ntfy server"},{"location":"config/#quick-start","text":"By default, simply running ntfy serve will start the server at port 80. No configuration needed. Batteries included \ud83d\ude00. If everything works as it should, you'll see something like this: $ ntfy serve 2021/11/30 19:59:08 Listening on :80 You can immediately start publishing messages , or subscribe via the Android app , the web UI , or simply via curl or your favorite HTTP client . To configure the server further, check out the config options table or simply type ntfy serve --help to get a list of command line options .","title":"Quick start"},{"location":"config/#example-config","text":"Info Definitely check out the server.yml file. It contains examples and detailed descriptions of all the settings. The most basic settings are base-url (the external URL of the ntfy server), the HTTP/HTTPS listen address ( listen-http and listen-https ), and socket path ( listen-unix ). All the other things are additional features. Here are a few working sample configs: server.yml (HTTP-only, with cache + attachments) server.yml (HTTP+HTTPS, with cache + attachments) server.yml (ntfy.sh config) base-url : \"http://ntfy.example.com\" cache-file : \"/var/cache/ntfy/cache.db\" attachment-cache-dir : \"/var/cache/ntfy/attachments\" base-url : \"http://ntfy.example.com\" listen-http : \":80\" listen-https : \":443\" key-file : \"/etc/letsencrypt/live/ntfy.example.com.key\" cert-file : \"/etc/letsencrypt/live/ntfy.example.com.crt\" cache-file : \"/var/cache/ntfy/cache.db\" attachment-cache-dir : \"/var/cache/ntfy/attachments\" # All the things: Behind a proxy, Firebase, cache, attachments, # SMTP publishing & receiving base-url : \"https://ntfy.sh\" listen-http : \"127.0.0.1:2586\" firebase-key-file : \"/etc/ntfy/firebase.json\" cache-file : \"/var/cache/ntfy/cache.db\" behind-proxy : true attachment-cache-dir : \"/var/cache/ntfy/attachments\" smtp-sender-addr : \"email-smtp.us-east-2.amazonaws.com:587\" smtp-sender-user : \"AKIDEADBEEFAFFE12345\" smtp-sender-pass : \"Abd13Kf+sfAk2DzifjafldkThisIsNotARealKeyOMG.\" smtp-sender-from : \"ntfy@ntfy.sh\" smtp-server-listen : \":25\" smtp-server-domain : \"ntfy.sh\" smtp-server-addr-prefix : \"ntfy-\" keepalive-interval : \"45s\"","title":"Example config"},{"location":"config/#message-cache","text":"If desired, ntfy can temporarily keep notifications in an in-memory or an on-disk cache. Caching messages for a short period of time is important to allow phones and other devices with brittle Internet connections to be able to retrieve notifications that they may have missed. By default, ntfy keeps messages in-memory for 12 hours , which means that cached messages do not survive an application restart . You can override this behavior using the following config settings: cache-file : if set, ntfy will store messages in a SQLite based cache (default is empty, which means in-memory cache). This is required if you'd like messages to be retained across restarts . cache-duration : defines the duration for which messages are stored in the cache (default is 12h ). You can also entirely disable the cache by setting cache-duration to 0 . When the cache is disabled, messages are only passed on to the connected subscribers, but never stored on disk or even kept in memory longer than is needed to forward the message to the subscribers. Subscribers can retrieve cached messaging using the poll=1 parameter , as well as the since= parameter .","title":"Message cache"},{"location":"config/#attachments","text":"If desired, you may allow users to upload and attach files to notifications . To enable this feature, you have to simply configure an attachment cache directory and a base URL ( attachment-cache-dir , base-url ). Once these options are set and the directory is writable by the server user, you can upload attachments via PUT. By default, attachments are stored in the disk-cache for only 3 hours . The main reason for this is to avoid legal issues and such when hosting user controlled content. Typically, this is more than enough time for the user (or the auto download feature) to download the file. The following config options are relevant to attachments: base-url is the root URL for the ntfy server; this is needed for the generated attachment URLs attachment-cache-dir is the cache directory for attached files attachment-total-size-limit is the size limit of the on-disk attachment cache (default: 5G) attachment-file-size-limit is the per-file attachment size limit (e.g. 300k, 2M, 100M, default: 15M) attachment-expiry-duration is the duration after which uploaded attachments will be deleted (e.g. 3h, 20h, default: 3h) Here's an example config using mostly the defaults (except for the cache directory, which is empty by default): /etc/ntfy/server.yml (minimal) /etc/ntfy/server.yml (all options) base-url : \"https://ntfy.sh\" attachment-cache-dir : \"/var/cache/ntfy/attachments\" base-url : \"https://ntfy.sh\" attachment-cache-dir : \"/var/cache/ntfy/attachments\" attachment-total-size-limit : \"5G\" attachment-file-size-limit : \"15M\" attachment-expiry-duration : \"3h\" visitor-attachment-total-size-limit : \"100M\" visitor-attachment-daily-bandwidth-limit : \"500M\" Please also refer to the rate limiting settings below, specifically visitor-attachment-total-size-limit and visitor-attachment-daily-bandwidth-limit . Setting these conservatively is necessary to avoid abuse.","title":"Attachments"},{"location":"config/#access-control","text":"By default, the ntfy server is open for everyone, meaning everyone can read and write to any topic (this is how ntfy.sh is configured). To restrict access to your own server, you can optionally configure authentication and authorization. ntfy's auth is implemented with a simple SQLite -based backend. It implements two roles ( user and admin ) and per-topic read and write permissions using an access control list (ACL) . Access control entries can be applied to users as well as the special everyone user ( * ), which represents anonymous API access. To set up auth, simply configure the following two options : auth-file is the user/access database; it is created automatically if it doesn't already exist; suggested location /var/lib/ntfy/user.db (easiest if deb/rpm package is used) auth-default-access defines the default/fallback access if no access control entry is found; it can be set to read-write (default), read-only , write-only or deny-all . Once configured, you can use the ntfy user command to add or modify users , and the ntfy access command lets you modify the access control list for specific users and topic patterns. Both of these commands directly edit the auth database (as defined in auth-file ), so they only work on the server, and only if the user accessing them has the right permissions.","title":"Access control"},{"location":"config/#users-and-roles","text":"The ntfy user command allows you to add/remove/change users in the ntfy user database, as well as change passwords or roles ( user or admin ). In practice, you'll often just create one admin user with ntfy user add --role=admin ... and be done with all this (see example below ). Roles: Role user (default): Users with this role have no special permissions. Manage access using ntfy access (see below ). Role admin : Users with this role can read/write to all topics. Granular access control is not necessary. Example commands (type ntfy user --help or ntfy user COMMAND --help for more details): ntfy user list # Shows list of users (alias: 'ntfy access') ntfy user add phil # Add regular user phil ntfy user add --role=admin phil # Add admin user phil ntfy user del phil # Delete user phil ntfy user change-pass phil # Change password for user phil ntfy user change-role phil admin # Make user phil an admin","title":"Users and roles"},{"location":"config/#access-control-list-acl","text":"The access control list (ACL) manages access to topics for non-admin users, and for anonymous access ( everyone / * ) . Each entry represents the access permissions for a user to a specific topic or topic pattern. The ACL can be displayed or modified with the ntfy access command: ntfy access # Shows access control list (alias: 'ntfy user list') ntfy access USERNAME # Shows access control entries for USERNAME ntfy access USERNAME TOPIC PERMISSION # Allow/deny access for USERNAME to TOPIC A USERNAME is an existing user, as created with ntfy user add (see users and roles ), or the anonymous user everyone or * , which represents clients that access the API without username/password. A TOPIC is either a specific topic name (e.g. mytopic , or phil_alerts ), or a wildcard pattern that matches any number of topics (e.g. alerts_* or ben-* ). Only the wildcard character * is supported. It stands for zero to any number of characters. A PERMISSION is any of the following supported permissions: read-write (alias: rw ): Allows publishing messages to the given topic, as well as subscribing and reading messages read-only (aliases: read , ro ): Allows only subscribing and reading messages, but not publishing to the topic write-only (aliases: write , wo ): Allows only publishing to the topic, but not subscribing to it deny (alias: none ): Allows neither publishing nor subscribing to a topic Example commands (type ntfy access --help for more details): ntfy access # Shows entire access control list ntfy access phil # Shows access for user phil ntfy access phil mytopic rw # Allow read-write access to mytopic for user phil ntfy access everyone mytopic rw # Allow anonymous read-write access to mytopic ntfy access everyone \"up*\" write # Allow anonymous write-only access to topics \"up...\" ntfy access --reset # Reset entire access control list ntfy access --reset phil # Reset all access for user phil ntfy access --reset phil mytopic # Reset access for user phil and topic mytopic Example ACL: $ ntfy access user phil (admin) - read-write access to all topics (admin role) user ben (user) - read-write access to topic garagedoor - read-write access to topic alerts* - read-only access to topic furnace user * (anonymous) - read-only access to topic announcements - read-only access to topic server-stats - no access to any (other) topics (server config) In this example, phil has the role admin , so he has read-write access to all topics (no ACL entries are necessary). User ben has three topic-specific entries. He can read, but not write to topic furnace , and has read-write access to topic garagedoor and all topics starting with the word alerts (wildcards). Clients that are not authenticated (called * / everyone ) only have read access to the announcements and server-stats topics.","title":"Access control list (ACL)"},{"location":"config/#example-private-instance","text":"The easiest way to configure a private instance is to set auth-default-access to deny-all in the server.yml : /etc/ntfy/server.yml auth-file : \"/var/lib/ntfy/user.db\" auth-default-access : \"deny-all\" After that, simply create an admin user: $ ntfy user add --role=admin phil password: mypass confirm: mypass user phil added with role admin Once you've done that, you can publish and subscribe using Basic Auth with the given username/password. Be sure to use HTTPS to avoid eavesdropping and exposing your password. Here's a simple example: Command line (curl) ntfy CLI HTTP JavaScript Go Python PHP curl \\ -u phil:mypass \\ -d \"Look ma, with auth\" \\ https://ntfy.example.com/mysecrets ntfy publish \\ -u phil:mypass \\ ntfy.example.com/mysecrets \\ \"Look ma, with auth\" POST /mysecrets HTTP / 1.1 Host : ntfy.example.com Authorization : Basic cGhpbDpteXBhc3M= Look ma, with auth fetch ( 'https://ntfy.example.com/mysecrets' , { method : 'POST' , // PUT works too body : 'Look ma, with auth' , headers : { 'Authorization' : 'Basic cGhpbDpteXBhc3M=' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.example.com/mysecrets\" , strings . NewReader ( \"Look ma, with auth\" )) req . Header . Set ( \"Authorization\" , \"Basic cGhpbDpteXBhc3M=\" ) http . DefaultClient . Do ( req ) requests . post ( \"https://ntfy.example.com/mysecrets\" , data = \"Look ma, with auth\" , headers = { \"Authorization\" : \"Basic cGhpbDpteXBhc3M=\" }) file_get_contents ( 'https://ntfy.example.com/mysecrets' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain\\r\\n' . 'Authorization: Basic cGhpbDpteXBhc3M=' , 'content' => 'Look ma, with auth' ] ]));","title":"Example: Private instance"},{"location":"config/#example-unifiedpush","text":"UnifiedPush requires that the application server (e.g. Synapse, Fediverse Server, \u2026) has anonymous write access to the topic used for push messages. The topic names used by UnifiedPush all start with the up* prefix. Please refer to the UnifiedPush documentation for more details. To enable support for UnifiedPush for private servers (i.e. auth-default-access: \"deny-all\" ), you should either allow anonymous write access for the entire prefix or explicitly per topic: Prefix Explicitly $ ntfy access '*' 'up*' write-only $ ntfy access '*' upYzMtZGZiYTY5 write-only","title":"Example: UnifiedPush"},{"location":"config/#e-mail-notifications","text":"To allow forwarding messages via e-mail, you can configure an SMTP server for outgoing messages . Once configured, you can set the X-Email header to send messages via e-mail (e.g. curl -d \"hi there\" -H \"X-Email: phil@example.com\" ntfy.sh/mytopic ). As of today, only SMTP servers with PLAIN auth and STARTLS are supported. To enable e-mail sending, you must set the following settings: base-url is the root URL for the ntfy server; this is needed for e-mail footer smtp-sender-addr is the hostname:port of the SMTP server smtp-sender-user and smtp-sender-pass are the username and password of the SMTP user smtp-sender-from is the e-mail address of the sender Here's an example config using Amazon SES for outgoing mail (this is how it is configured for ntfy.sh ): /etc/ntfy/server.yml base-url : \"https://ntfy.sh\" smtp-sender-addr : \"email-smtp.us-east-2.amazonaws.com:587\" smtp-sender-user : \"AKIDEADBEEFAFFE12345\" smtp-sender-pass : \"Abd13Kf+sfAk2DzifjafldkThisIsNotARealKeyOMG.\" smtp-sender-from : \"ntfy@ntfy.sh\" Please also refer to the rate limiting settings below, specifically visitor-email-limit-burst and visitor-email-limit-burst . Setting these conservatively is necessary to avoid abuse.","title":"E-mail notifications"},{"location":"config/#e-mail-publishing","text":"To allow publishing messages via e-mail, ntfy can run a lightweight SMTP server for incoming messages . Once configured, users can send emails to a topic e-mail address (e.g. mytopic@ntfy.sh or myprefix-mytopic@ntfy.sh ) to publish messages to a topic. This is useful for e-mail based integrations such as for statuspage.io (though these days most services also support webhooks and HTTP calls). To configure the SMTP server, you must at least set smtp-server-listen and smtp-server-domain : smtp-server-listen defines the IP address and port the SMTP server will listen on, e.g. :25 or 1.2.3.4:25 smtp-server-domain is the e-mail domain, e.g. ntfy.sh (must be identical to MX record, see below) smtp-server-addr-prefix is an optional prefix for the e-mail addresses to prevent spam. If set to ntfy- , for instance, only e-mails to ntfy-$topic@ntfy.sh will be accepted. If this is not set, all emails to $topic@ntfy.sh will be accepted (which may obviously be a spam problem). Here's an example config (this is how it is configured for ntfy.sh ): /etc/ntfy/server.yml smtp-server-listen : \":25\" smtp-server-domain : \"ntfy.sh\" smtp-server-addr-prefix : \"ntfy-\" In addition to configuring the ntfy server, you have to create two DNS records (an MX record and a corresponding A record), so incoming mail will find its way to your server. Here's an example of how ntfy.sh is configured (in Amazon Route 53 ): DNS records for incoming mail You can check if everything is working correctly by sending an email as raw SMTP via nc . Create a text file, e.g. email.txt EHLO example.com MAIL FROM: phil@example.com RCPT TO: ntfy-mytopic@ntfy.sh DATA Subject: Email for you Content-Type: text/plain; charset=\"UTF-8\" Hello from \ud83c\udde9\ud83c\uddea . And then send the mail via nc like this. If you see any lines starting with 451 , those are errors from the ntfy server. Read them carefully. $ cat email.txt | nc -N ntfy.sh 25 220 ntfy.sh ESMTP Service Ready 250-Hello example.com ... 250 2.0.0 Roger, accepting mail from <phil@example.com> 250 2.0.0 I'll make sure <ntfy-mytopic@ntfy.sh> gets this As for the DNS setup, be sure to verify that dig MX and dig A are returning results similar to this: $ dig MX ntfy.sh +short 10 mx1.ntfy.sh. $ dig A mx1.ntfy.sh +short 3.139.215.220","title":"E-mail publishing"},{"location":"config/#behind-a-proxy-tls-etc","text":"Warning If you are running ntfy behind a proxy, you must set the behind-proxy flag. Otherwise, all visitors are rate limited as if they are one. It may be desirable to run ntfy behind a proxy (e.g. nginx, HAproxy or Apache), so you can provide TLS certificates using Let's Encrypt using certbot, or simply because you'd like to share the ports (80/443) with other services. Whatever your reasons may be, there are a few things to consider. If you are running ntfy behind a proxy, you should set the behind-proxy flag. This will instruct the rate limiting logic to use the X-Forwarded-For header as the primary identifier for a visitor, as opposed to the remote IP address. If the behind-proxy flag is not set, all visitors will be counted as one, because from the perspective of the ntfy server, they all share the proxy's IP address. /etc/ntfy/server.yml # Tell ntfy to use \"X-Forwarded-For\" to identify visitors behind-proxy : true","title":"Behind a proxy (TLS, etc.)"},{"location":"config/#tlsssl","text":"ntfy supports HTTPS/TLS by setting the listen-https config option . However, if you are behind a proxy, it is recommended that TLS/SSL termination is done by the proxy itself (see below). I highly recommend using certbot . I use it with the dns-route53 plugin , which lets you use AWS Route 53 as the challenge. That's much easier than using the HTTP challenge. I've found this guide to be incredibly helpful.","title":"TLS/SSL"},{"location":"config/#nginxapache2caddy","text":"For your convenience, here's a working config that'll help configure things behind a proxy. Be sure to enable WebSockets by forwarding the Connection and Upgrade headers accordingly. In this example, ntfy runs on :2586 and we proxy traffic to it. We also redirect HTTP to HTTPS for GET requests against a topic or the root domain: nginx (convenient) nginx (more secure) Apache2 caddy # /etc/nginx/sites-*/ntfy # # This config allows insecure HTTP POST/PUT requests against topics to allow a short curl syntax (without -L # and \"https://\" prefix). It also disables output buffering, which has worked well for the ntfy.sh server. # # This is how ntfy.sh is configured. server { listen 80; server_name ntfy.sh; location / { # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want # it to work with curl without the annoying https:// prefix set $redirect_https \"\"; if ($request_method = GET) { set $redirect_https \"yes\"; } if ($request_uri ~* \"^/([-_a-z0-9]{0,64}$|docs/|static/)\") { set $redirect_https \"${redirect_https}yes\"; } if ($redirect_https = \"yesyes\") { return 302 https://$http_host$request_uri$is_args$query_string; } proxy_pass http://127.0.0.1:2586; proxy_http_version 1.1; proxy_buffering off; proxy_request_buffering off; proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m; client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml } } server { listen 443 ssl; server_name ntfy.sh; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4; ssl_prefer_server_ciphers on; ssl_certificate /etc/letsencrypt/live/ntfy.sh/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/ntfy.sh/privkey.pem; location / { proxy_pass http://127.0.0.1:2586; proxy_http_version 1.1; proxy_buffering off; proxy_request_buffering off; proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m; client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml } } # /etc/nginx/sites-*/ntfy # # This config requires the use of the -L flag in curl to redirect to HTTPS, and it keeps nginx output buffering # enabled. While recommended, I have had issues with that in the past. server { listen 80; server_name ntfy.sh; location / { return 302 https://$http_host$request_uri$is_args$query_string; proxy_pass http://127.0.0.1:2586; proxy_http_version 1.1; proxy_set_header Host $http_host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m; client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml } } server { listen 443 ssl; server_name ntfy.sh; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4; ssl_prefer_server_ciphers on; ssl_certificate /etc/letsencrypt/live/ntfy.sh/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/ntfy.sh/privkey.pem; location / { proxy_pass http://127.0.0.1:2586; proxy_http_version 1.1; proxy_set_header Host $http_host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m; client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml } } # /etc/apache2/sites-*/ntfy.conf <VirtualHost *:80> ServerName ntfy.sh # Proxy connections to ntfy (requires \"a2enmod proxy\") ProxyPass / http://127.0.0.1:2586/ ProxyPassReverse / http://127.0.0.1:2586/ SetEnv proxy-nokeepalive 1 SetEnv proxy-sendchunked 1 # Higher than the max message size of 4096 bytes LimitRequestBody 102400 # Enable mod_rewrite (requires \"a2enmod rewrite\") RewriteEngine on # WebSockets support (requires \"a2enmod rewrite proxy_wstunnel\") RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteCond %{HTTP:Connection} upgrade [NC] RewriteRule ^/?(.*) \"ws://127.0.0.1:2586/$1\" [P,L] # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want # it to work with curl without the annoying https:// prefix RewriteCond %{REQUEST_METHOD} GET RewriteRule ^/([-_A-Za-z0-9]{0,64})$ https://%{SERVER_NAME}/$1 [R,L] </VirtualHost> <VirtualHost *:443> ServerName ntfy.sh SSLEngine on SSLCertificateFile /etc/letsencrypt/live/ntfy.sh/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/ntfy.sh/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf # Proxy connections to ntfy (requires \"a2enmod proxy\") ProxyPass / http://127.0.0.1:2586/ ProxyPassReverse / http://127.0.0.1:2586/ SetEnv proxy-nokeepalive 1 SetEnv proxy-sendchunked 1 # Higher than the max message size of 4096 bytes LimitRequestBody 102400 # Enable mod_rewrite (requires \"a2enmod rewrite\") RewriteEngine on # WebSockets support (requires \"a2enmod rewrite proxy_wstunnel\") RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteCond %{HTTP:Connection} upgrade [NC] RewriteRule ^/?(.*) \"ws://127.0.0.1:2586/$1\" [P,L] </VirtualHost> # Note that this config is most certainly incomplete. Please help out and let me know what's missing # via Discord/Matrix or in a GitHub issue. ntfy.sh, http://nfty.sh { reverse_proxy 127.0.0.1:2586 # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want # it to work with curl without the annoying https:// prefix @httpget { protocol http method GET path_regexp ^/([-_a-z0-9]{0,64}$|docs/|static/) } redir @httpget https://{host}{uri} }","title":"nginx/Apache2/caddy"},{"location":"config/#firebase-fcm","text":"Info Using Firebase is optional and only works if you modify and build your own Android .apk . For a self-hosted instance, it's easier to just not bother with FCM. Firebase Cloud Messaging (FCM) is the Google approved way to send push messages to Android devices. FCM is the only method that an Android app can receive messages without having to run a foreground service . For the main host ntfy.sh , the ntfy Android app uses Firebase to send messages to the device. For other hosts, instant delivery is used and FCM is not involved. To configure FCM for your self-hosted instance of the ntfy server, follow these steps: Sign up for a Firebase account Create a Firebase app and download the key file (e.g. myapp-firebase-adminsdk-...json ) Place the key file in /etc/ntfy , set the firebase-key-file in server.yml accordingly and restart the ntfy server Build your own Android .apk following these instructions Example: # If set, also publish messages to a Firebase Cloud Messaging (FCM) topic for your app. # This is optional and only required to support Android apps (which don't allow background services anymore). # firebase-key-file: \"/etc/ntfy/ntfy-sh-firebase-adminsdk-ahnce-9f4d6f14b5.json\"","title":"Firebase (FCM)"},{"location":"config/#ios-instant-notifications","text":"Unlike Android, iOS heavily restricts background processing, which sadly makes it impossible to implement instant push notifications without a central server. To still support instant notifications on iOS through your self-hosted ntfy server, you have to forward so called poll_request messages to the main ntfy.sh server (or any upstream server that's APNS/Firebase connected, if you build your own iOS app), which will then forward it to Firebase/APNS. To configure it, simply set upstream-base-url like so: upstream-base-url : \"https://ntfy.sh\" If set, all incoming messages will publish a poll request to the configured upstream server, containing the message ID of the original message, instructing the iOS app to poll this server for the actual message contents. If upstream-base-url is not set, notifications will still eventually get to your device, but delivery can take hours, depending on the state of the phone. If you are using your phone, it shouldn't take more than 20-30 minutes though. In case you're curious, here's an example of the entire flow: In the iOS app, you subscribe to https://ntfy.example.com/mytopic The app subscribes to the Firebase topic 6de73be8dfb7d69e... (the SHA256 of the topic URL) When you publish a message to https://ntfy.example.com/mytopic , your ntfy server will publish a poll request to https://ntfy.sh/6de73be8dfb7d69e... . The request from your server to the upstream server contains only the message ID (in the X-Poll-ID header), and the SHA256 checksum of the topic URL (as upstream topic). The ntfy.sh server publishes the poll request message to Firebase, which forwards it to APNS, which forwards it to your iOS device Your iOS device receives the poll request, and fetches the actual message from your server, and then displays it Here's an example of what the self-hosted server forwards to the upstream server. The request is equivalent to this curl: curl -X POST -H \"X-Poll-ID: s4PdJozxM8na\" https://ntfy.sh/6de73be8dfb7d69e32fb2c00c23fe7adbd8b5504406e3068c273aa24cef4055b {\"id\":\"4HsClFEuCIcs\",\"time\":1654087955,\"event\":\"poll_request\",\"topic\":\"6de73be8dfb7d69e32fb2c00c23fe7adbd8b5504406e3068c273aa24cef4055b\",\"message\":\"New message\",\"poll_id\":\"s4PdJozxM8na\"} Note that the self-hosted server literally sends the message New message for every message, even if your message may be Some other message . This is so that if iOS cannot talk to the self-hosted server (in time, or at all), it'll show New message as a popup.","title":"iOS instant notifications"},{"location":"config/#rate-limiting","text":"Info Be aware that if you are running ntfy behind a proxy, you must set the behind-proxy flag. Otherwise, all visitors are rate limited as if they are one. By default, ntfy runs without authentication, so it is vitally important that we protect the server from abuse or overload. There are various limits and rate limits in place that you can use to configure the server: Global limit : A global limit applies across all visitors (IPs, clients, users) Visitor limit : A visitor limit only applies to a certain visitor. A visitor is identified by its IP address (or the X-Forwarded-For header if behind-proxy is set). All config options that start with the word visitor apply only on a per-visitor basis. During normal usage, you shouldn't encounter these limits at all, and even if you burst a few requests or emails (e.g. when you reconnect after a connection drop), it shouldn't have any effect.","title":"Rate limiting"},{"location":"config/#general-limits","text":"Let's do the easy limits first: global-topic-limit defines the total number of topics before the server rejects new topics. It defaults to 15,000. visitor-subscription-limit is the number of subscriptions (open connections) per visitor. This value defaults to 30.","title":"General limits"},{"location":"config/#request-limits","text":"In addition to the limits above, there is a requests/second limit per visitor for all sensitive GET/PUT/POST requests. This limit uses a token bucket (using Go's rate package ): Each visitor has a bucket of 60 requests they can fire against the server (defined by visitor-request-limit-burst ). After the 60, new requests will encounter a 429 Too Many Requests response. The visitor request bucket is refilled at a rate of one request every 5s (defined by visitor-request-limit-replenish ) visitor-request-limit-burst is the initial bucket of requests each visitor has. This defaults to 60. visitor-request-limit-replenish is the rate at which the bucket is refilled (one request per x). Defaults to 5s. visitor-request-limit-exempt-hosts is a comma-separated list of hostnames and IPs to be exempt from request rate limiting; hostnames are resolved at the time the server is started. Defaults to an empty list.","title":"Request limits"},{"location":"config/#attachment-limits","text":"Aside from the global file size and total attachment cache limits (see above ), there are two relevant per-visitor limits: visitor-attachment-total-size-limit is the total storage limit used for attachments per visitor. It defaults to 100M. The per-visitor storage is automatically decreased as attachments expire. External attachments (attached via X-Attach , see publishing docs ) do not count here. visitor-attachment-daily-bandwidth-limit is the total daily attachment download/upload bandwidth limit per visitor, including PUT and GET requests. This is to protect your precious bandwidth from abuse, since egress costs money in most cloud providers. This defaults to 500M.","title":"Attachment limits"},{"location":"config/#e-mail-limits","text":"Similarly to the request limit, there is also an e-mail limit (only relevant if e-mail notifications are enabled): visitor-email-limit-burst is the initial bucket of emails each visitor has. This defaults to 16. visitor-email-limit-replenish is the rate at which the bucket is refilled (one email per x). Defaults to 1h.","title":"E-mail limits"},{"location":"config/#firebase-limits","text":"If Firebase is configured , all messages are also published to a Firebase topic (unless Firebase: no is set). Firebase enforces its own limits on how many messages can be published. Unfortunately these limits are a little vague and can change depending on the time of day. In practice, I have only ever observed 429 Quota exceeded responses from Firebase if too many messages are published to the same topic . In ntfy, if Firebase responds with a 429 after publishing to a topic, the visitor (= IP address) who published the message is banned from publishing to Firebase for 10 minutes (not configurable). Because publishing to Firebase happens asynchronously, there is no indication of the user that this has happened. Non-Firebase subscribers (WebSocket or HTTP stream) are not affected. After the 10 minutes are up, messages forwarding to Firebase is resumed for this visitor. If this ever happens, there will be a log message that looks something like this: WARN Firebase quota exceeded (likely for topic), temporarily denying Firebase access to visitor","title":"Firebase limits"},{"location":"config/#tuning-for-scale","text":"If you're running ntfy for your home server, you probably don't need to worry about scale at all. In its default config, if it's not behind a proxy, the ntfy server can keep about as many connections as the open file limit allows . This limit is typically called nofile . Other than that, RAM and CPU are obviously relevant. You may also want to check out this discussion on Reddit . Depending on how you run it , here are a few limits that are relevant:","title":"Tuning for scale"},{"location":"config/#message-cache_1","text":"By default, the message cache (defined by cache-file ) uses the SQLite default settings, which means it syncs to disk on every write. For personal servers, this is perfectly adequate. For larger installations, such as ntfy.sh, the write-ahead log (WAL) should be enabled, and the sync mode should be adjusted. See this article for details. In addition to that, for very high load servers (such as ntfy.sh), it may be beneficial to write messages to the cache in batches, and asynchronously. This can be enabled with the cache-batch-size and cache-batch-timeout . If you start seeing database locked messages in the logs, you should probably enable that. Here's how ntfy.sh has been tuned in the server.yml file: cache-batch-size : 25 cache-batch-timeout : \"1s\" cache-startup-queries : | pragma journal_mode = WAL; pragma synchronous = normal; pragma temp_store = memory; pragma busy_timeout = 15000; vacuum;","title":"Message cache"},{"location":"config/#for-systemd-services","text":"If you're running ntfy in a systemd service (e.g. for .deb/.rpm packages), the main limiting factor is the LimitNOFILE setting in the systemd unit. The default open files limit for ntfy.service is 10,000. You can override it by creating a /etc/systemd/system/ntfy.service.d/override.conf file. As far as I can tell, /etc/security/limits.conf is not relevant. /etc/systemd/system/ntfy.service.d/override.conf # Allow 20,000 ntfy connections (and give room for other file handles) [Service] LimitNOFILE=20500","title":"For systemd services"},{"location":"config/#outside-of-systemd","text":"If you're running outside systemd, you may want to adjust your /etc/security/limits.conf file to increase the nofile setting. Here's an example that increases the limit to 5,000. You can find out the current setting by running ulimit -n , or manually override it temporarily by running ulimit -n 50000 . /etc/security/limits.conf # Increase open files limit globally * hard nofile 20500","title":"Outside of systemd"},{"location":"config/#proxy-limits-nginx-apache2","text":"If you are running behind a proxy (e.g. nginx, Apache), the open files limit of the proxy is also relevant. So if your proxy runs inside of systemd, increase the limits in systemd for the proxy. Typically, the proxy open files limit has to be double the number of how many connections you'd like to support , because the proxy has to maintain the client connection and the connection to ntfy. /etc/nginx/nginx.conf /etc/systemd/system/nginx.service.d/override.conf events { # Allow 40,000 proxy connections (2x of the desired ntfy connection count; # and give room for other file handles) worker_connections 40500; } # Allow 40,000 proxy connections (2x of the desired ntfy connection count; # and give room for other file handles) [Service] LimitNOFILE=40500","title":"Proxy limits (nginx, Apache2)"},{"location":"config/#banning-bad-actors-fail2ban","text":"If you put stuff on the Internet, bad actors will try to break them or break in. fail2ban and nginx's ngx_http_limit_req_module module can be used to ban client IPs if they misbehave. This is on top of the rate limiting inside the ntfy server. Here's an example for how ntfy.sh is configured, following the instructions from two tutorials ( here and here ): /etc/nginx/nginx.conf /etc/nginx/sites-enabled/ntfy.sh /etc/fail2ban/filter.d/nginx-req-limit.conf /etc/fail2ban/jail.local # Rate limit all IP addresses http { limit_req_zone $binary_remote_addr zone=one:10m rate=45r/m; } # Alternatively, whitelist certain IP addresses http { geo $limited { default 1; 116.203.112.46/32 0; 132.226.42.65/32 0; ... } map $limited $limitkey { 1 $binary_remote_addr; 0 \"\"; } limit_req_zone $limitkey zone=one:10m rate=45r/m; } # For each server/location block server { location / { limit_req zone=one burst=1000 nodelay; } } [Definition] failregex = limiting requests, excess:.* by zone.*client: <HOST> ignoreregex = [nginx-req-limit] enabled = true filter = nginx-req-limit action = iptables-multiport[name=ReqLimit, port=\"http,https\", protocol=tcp] logpath = /var/log/nginx/error.log findtime = 600 bantime = 14400 maxretry = 10","title":"Banning bad actors (fail2ban)"},{"location":"config/#debuggingtracing","text":"If something's not working right, you can debug/trace through what the ntfy server is doing by setting the log-level to DEBUG or TRACE . The DEBUG setting will output information about each published message, but not the message contents. The TRACE setting will also print the message contents. Warning Both options are very verbose and should only be enabled in production for short periods of time. Otherwise, you're going to run out of disk space pretty quickly. You can also hot-reload the log-level by sending the SIGHUP signal to the process after editing the server.yml file. You can do so by calling systemctl reload ntfy (if ntfy is running inside systemd), or by calling kill -HUP $(pidof ntfy) . If successful, you'll see something like this: $ ntfy serve 2022/06/02 10:29:28 INFO Listening on :2586[http] :1025[smtp], log level is INFO 2022/06/02 10:29:34 INFO Partially hot reloading configuration ... 2022/06/02 10:29:34 INFO Log level is TRACE","title":"Debugging/tracing"},{"location":"config/#config-options","text":"Each config option can be set in the config file /etc/ntfy/server.yml (e.g. listen-http: :80 ) or as a CLI option (e.g. --listen-http :80 . Here's a list of all available options. Alternatively, you can set an environment variable before running the ntfy command (e.g. export NTFY_LISTEN_HTTP=:80 ). Info All config options can also be defined in the server.yml file using underscores instead of dashes, e.g. cache_duration and cache-duration are both supported. This is to support stricter YAML parsers that do not support dashes. Config option Env variable Format Default Description base-url NTFY_BASE_URL URL - Public facing base URL of the service (e.g. https://ntfy.sh ) listen-http NTFY_LISTEN_HTTP [host]:port :80 Listen address for the HTTP web server listen-https NTFY_LISTEN_HTTPS [host]:port - Listen address for the HTTPS web server. If set, you also need to set key-file and cert-file . listen-unix NTFY_LISTEN_UNIX filename - Path to a Unix socket to listen on listen-unix-mode NTFY_LISTEN_UNIX_MODE file mode system default File mode of the Unix socket, e.g. 0700 or 0777 key-file NTFY_KEY_FILE filename - HTTPS/TLS private key file, only used if listen-https is set. cert-file NTFY_CERT_FILE filename - HTTPS/TLS certificate file, only used if listen-https is set. firebase-key-file NTFY_FIREBASE_KEY_FILE filename - If set, also publish messages to a Firebase Cloud Messaging (FCM) topic for your app. This is optional and only required to save battery when using the Android app. See Firebase (FCM . cache-file NTFY_CACHE_FILE filename - If set, messages are cached in a local SQLite database instead of only in-memory. This allows for service restarts without losing messages in support of the since= parameter. See message cache . cache-duration NTFY_CACHE_DURATION duration 12h Duration for which messages will be buffered before they are deleted. This is required to support the since=... and poll=1 parameter. Set this to 0 to disable the cache entirely. cache-startup-queries NTFY_CACHE_STARTUP_QUERIES string (SQL queries) - SQL queries to run during database startup; this is useful for tuning and enabling WAL mode cache-batch-size NTFY_CACHE_BATCH_SIZE int 0 Max size of messages to batch together when writing to message cache (if zero, writes are synchronous) cache-batch-timeout NTFY_CACHE_BATCH_TIMEOUT duration 0s Timeout for batched async writes to the message cache (if zero, writes are synchronous) auth-file NTFY_AUTH_FILE filename - Auth database file used for access control. If set, enables authentication and access control. See access control . auth-default-access NTFY_AUTH_DEFAULT_ACCESS read-write , read-only , write-only , deny-all read-write Default permissions if no matching entries in the auth database are found. Default is read-write . behind-proxy NTFY_BEHIND_PROXY bool false If set, the X-Forwarded-For header is used to determine the visitor IP address instead of the remote address of the connection. attachment-cache-dir NTFY_ATTACHMENT_CACHE_DIR directory - Cache directory for attached files. To enable attachments, this has to be set. attachment-total-size-limit NTFY_ATTACHMENT_TOTAL_SIZE_LIMIT size 5G Limit of the on-disk attachment cache directory. If the limits is exceeded, new attachments will be rejected. attachment-file-size-limit NTFY_ATTACHMENT_FILE_SIZE_LIMIT size 15M Per-file attachment size limit (e.g. 300k, 2M, 100M). Larger attachment will be rejected. attachment-expiry-duration NTFY_ATTACHMENT_EXPIRY_DURATION duration 3h Duration after which uploaded attachments will be deleted (e.g. 3h, 20h). Strongly affects visitor-attachment-total-size-limit . smtp-sender-addr NTFY_SMTP_SENDER_ADDR host:port - SMTP server address to allow email sending smtp-sender-user NTFY_SMTP_SENDER_USER string - SMTP user; only used if e-mail sending is enabled smtp-sender-pass NTFY_SMTP_SENDER_PASS string - SMTP password; only used if e-mail sending is enabled smtp-sender-from NTFY_SMTP_SENDER_FROM e-mail address - SMTP sender e-mail address; only used if e-mail sending is enabled smtp-server-listen NTFY_SMTP_SERVER_LISTEN [ip]:port - Defines the IP address and port the SMTP server will listen on, e.g. :25 or 1.2.3.4:25 smtp-server-domain NTFY_SMTP_SERVER_DOMAIN domain name - SMTP server e-mail domain, e.g. ntfy.sh smtp-server-addr-prefix NTFY_SMTP_SERVER_ADDR_PREFIX string - Optional prefix for the e-mail addresses to prevent spam, e.g. ntfy- keepalive-interval NTFY_KEEPALIVE_INTERVAL duration 45s Interval in which keepalive messages are sent to the client. This is to prevent intermediaries closing the connection for inactivity. Note that the Android app has a hardcoded timeout at 77s, so it should be less than that. manager-interval NTFY_MANAGER_INTERVAL duration 1m Interval in which the manager prunes old messages, deletes topics and prints the stats. global-topic-limit NTFY_GLOBAL_TOPIC_LIMIT number 15,000 Rate limiting: Total number of topics before the server rejects new topics. upstream-base-url NTFY_UPSTREAM_BASE_URL URL https://ntfy.sh Forward poll request to an upstream server, this is needed for iOS push notifications for self-hosted servers visitor-attachment-total-size-limit NTFY_VISITOR_ATTACHMENT_TOTAL_SIZE_LIMIT size 100M Rate limiting: Total storage limit used for attachments per visitor, for all attachments combined. Storage is freed after attachments expire. See attachment-expiry-duration . visitor-attachment-daily-bandwidth-limit NTFY_VISITOR_ATTACHMENT_DAILY_BANDWIDTH_LIMIT size 500M Rate limiting: Total daily attachment download/upload traffic limit per visitor. This is to protect your bandwidth costs from exploding. visitor-email-limit-burst NTFY_VISITOR_EMAIL_LIMIT_BURST number 16 Rate limiting:Initial limit of e-mails per visitor visitor-email-limit-replenish NTFY_VISITOR_EMAIL_LIMIT_REPLENISH duration 1h Rate limiting: Strongly related to visitor-email-limit-burst : The rate at which the bucket is refilled visitor-request-limit-burst NTFY_VISITOR_REQUEST_LIMIT_BURST number 60 Rate limiting: Allowed GET/PUT/POST requests per second, per visitor. This setting is the initial bucket of requests each visitor has visitor-request-limit-replenish NTFY_VISITOR_REQUEST_LIMIT_REPLENISH duration 5s Rate limiting: Strongly related to visitor-request-limit-burst : The rate at which the bucket is refilled visitor-request-limit-exempt-hosts NTFY_VISITOR_REQUEST_LIMIT_EXEMPT_HOSTS comma-separated host/IP list - Rate limiting: List of hostnames and IPs to be exempt from request rate limiting visitor-subscription-limit NTFY_VISITOR_SUBSCRIPTION_LIMIT number 30 Rate limiting: Number of subscriptions per visitor (IP address) web-root NTFY_WEB_ROOT app , home or disable app Sets web root to landing page (home), web app (app) or disables the web app entirely (disable) The format for a duration is: <number>(smh) , e.g. 30s, 20m or 1h. The format for a size is: <number>(GMK) , e.g. 1G, 200M or 4000k.","title":"Config options"},{"location":"config/#command-line-options","text":"$ ntfy serve --help NAME: ntfy serve - Run the ntfy server USAGE: ntfy serve [OPTIONS..] CATEGORY: Server commands DESCRIPTION: Run the ntfy server and listen for incoming requests The command will load the configuration from /etc/ntfy/server.yml. Config options can be overridden using the command line options. Examples: ntfy serve # Starts server in the foreground (on port 80) ntfy serve --listen-http :8080 # Starts server with alternate port OPTIONS: --attachment-cache-dir value, --attachment_cache_dir value cache directory for attached files [$NTFY_ATTACHMENT_CACHE_DIR] --attachment-expiry-duration value, --attachment_expiry_duration value, -X value duration after which uploaded attachments will be deleted (e.g. 3h, 20h) (default: 3h) [$NTFY_ATTACHMENT_EXPIRY_DURATION] --attachment-file-size-limit value, --attachment_file_size_limit value, -Y value per-file attachment size limit (e.g. 300k, 2M, 100M) (default: 15M) [$NTFY_ATTACHMENT_FILE_SIZE_LIMIT] --attachment-total-size-limit value, --attachment_total_size_limit value, -A value limit of the on-disk attachment cache (default: 5G) [$NTFY_ATTACHMENT_TOTAL_SIZE_LIMIT] --auth-default-access value, --auth_default_access value, -p value default permissions if no matching entries in the auth database are found (default: \"read-write\") [$NTFY_AUTH_DEFAULT_ACCESS] --auth-file value, --auth_file value, -H value auth database file used for access control [$NTFY_AUTH_FILE] --base-url value, --base_url value, -B value externally visible base URL for this host (e.g. https://ntfy.sh) [$NTFY_BASE_URL] --behind-proxy, --behind_proxy, -P if set, use X-Forwarded-For header to determine visitor IP address (for rate limiting) (default: false) [$NTFY_BEHIND_PROXY] --cache-duration since, --cache_duration since, -b since buffer messages for this time to allow since requests (default: 12h0m0s) [$NTFY_CACHE_DURATION] --cache-file value, --cache_file value, -C value cache file used for message caching [$NTFY_CACHE_FILE] --cache-batch-size value, --cache_batch_size value max size of messages to batch together when writing to message cache (if zero, writes are synchronous) (default: 0) [$NTFY_BATCH_SIZE] --cache-batch-timeout value, --cache_batch_timeout value timeout for batched async writes to the message cache (if zero, writes are synchronous) (default: 0s) [$NTFY_CACHE_BATCH_TIMEOUT] --cache-startup-queries value, --cache_startup_queries value queries run when the cache database is initialized [$NTFY_CACHE_STARTUP_QUERIES] --cert-file value, --cert_file value, -E value certificate file, if listen-https is set [$NTFY_CERT_FILE] --config value, -c value config file (default: /etc/ntfy/server.yml) [$NTFY_CONFIG_FILE] --debug, -d enable debug logging (default: false) [$NTFY_DEBUG] --firebase-key-file value, --firebase_key_file value, -F value Firebase credentials file; if set additionally publish to FCM topic [$NTFY_FIREBASE_KEY_FILE] --global-topic-limit value, --global_topic_limit value, -T value total number of topics allowed (default: 15000) [$NTFY_GLOBAL_TOPIC_LIMIT] --keepalive-interval value, --keepalive_interval value, -k value interval of keepalive messages (default: 45s) [$NTFY_KEEPALIVE_INTERVAL] --key-file value, --key_file value, -K value private key file, if listen-https is set [$NTFY_KEY_FILE] --listen-http value, --listen_http value, -l value ip:port used to as HTTP listen address (default: \":80\") [$NTFY_LISTEN_HTTP] --listen-https value, --listen_https value, -L value ip:port used to as HTTPS listen address [$NTFY_LISTEN_HTTPS] --listen-unix value, --listen_unix value, -U value listen on unix socket path [$NTFY_LISTEN_UNIX] --log-level value, --log_level value set log level (default: \"INFO\") [$NTFY_LOG_LEVEL] --manager-interval value, --manager_interval value, -m value interval of for message pruning and stats printing (default: 1m0s) [$NTFY_MANAGER_INTERVAL] --no-log-dates, --no_log_dates disable the date/time prefix (default: false) [$NTFY_NO_LOG_DATES] --smtp-sender-addr value, --smtp_sender_addr value SMTP server address (host:port) for outgoing emails [$NTFY_SMTP_SENDER_ADDR] --smtp-sender-from value, --smtp_sender_from value SMTP sender address (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_FROM] --smtp-sender-pass value, --smtp_sender_pass value SMTP password (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_PASS] --smtp-sender-user value, --smtp_sender_user value SMTP user (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_USER] --smtp-server-addr-prefix value, --smtp_server_addr_prefix value SMTP email address prefix for topics to prevent spam (e.g. 'ntfy-') [$NTFY_SMTP_SERVER_ADDR_PREFIX] --smtp-server-domain value, --smtp_server_domain value SMTP domain for incoming e-mail, e.g. ntfy.sh [$NTFY_SMTP_SERVER_DOMAIN] --smtp-server-listen value, --smtp_server_listen value SMTP server address (ip:port) for incoming emails, e.g. :25 [$NTFY_SMTP_SERVER_LISTEN] --trace enable tracing (very verbose, be careful) (default: false) [$NTFY_TRACE] --upstream-base-url value, --upstream_base_url value forward poll request to an upstream server, this is needed for iOS push notifications for self-hosted servers [$NTFY_UPSTREAM_BASE_URL] --visitor-attachment-daily-bandwidth-limit value, --visitor_attachment_daily_bandwidth_limit value total daily attachment download/upload bandwidth limit per visitor (default: \"500M\") [$NTFY_VISITOR_ATTACHMENT_DAILY_BANDWIDTH_LIMIT] --visitor-attachment-total-size-limit value, --visitor_attachment_total_size_limit value total storage limit used for attachments per visitor (default: \"100M\") [$NTFY_VISITOR_ATTACHMENT_TOTAL_SIZE_LIMIT] --visitor-email-limit-burst value, --visitor_email_limit_burst value initial limit of e-mails per visitor (default: 16) [$NTFY_VISITOR_EMAIL_LIMIT_BURST] --visitor-email-limit-replenish value, --visitor_email_limit_replenish value interval at which burst limit is replenished (one per x) (default: 1h0m0s) [$NTFY_VISITOR_EMAIL_LIMIT_REPLENISH] --visitor-request-limit-burst value, --visitor_request_limit_burst value initial limit of requests per visitor (default: 60) [$NTFY_VISITOR_REQUEST_LIMIT_BURST] --visitor-request-limit-exempt-hosts value, --visitor_request_limit_exempt_hosts value hostnames and/or IP addresses of hosts that will be exempt from the visitor request limit [$NTFY_VISITOR_REQUEST_LIMIT_EXEMPT_HOSTS] --visitor-request-limit-replenish value, --visitor_request_limit_replenish value interval at which burst limit is replenished (one per x) (default: 5s) [$NTFY_VISITOR_REQUEST_LIMIT_REPLENISH] --visitor-subscription-limit value, --visitor_subscription_limit value number of subscriptions per visitor (default: 30) [$NTFY_VISITOR_SUBSCRIPTION_LIMIT] --web-root value, --web_root value sets web root to landing page (home), web app (app) or disabled (disable) (default: \"app\") [$NTFY_WEB_ROOT]","title":"Command line options"},{"location":"deprecations/","text":"Deprecation notices \u00b6 This page is used to list deprecation notices for ntfy. Deprecated commands and options will be removed after 1-3 months from the time they were deprecated. How long the feature is deprecated before the behavior is changed depends on the severity of the change, and how prominent the feature is. Active deprecations \u00b6 No active deprecations Previous deprecations \u00b6 ntfy CLI: ntfy publish --env-topic will be removed \u00b6 Active since 2022-06-20, behavior changed with v1.30.0 The ntfy publish --env-topic option will be removed. It'll still be possible to specify a topic via the NTFY_TOPIC environment variable, but it won't be necessary anymore to specify the --env-topic flag. Before After $ NTFY_TOPIC=mytopic ntfy publish --env-topic \"this is the message\" $ NTFY_TOPIC=mytopic ntfy publish \"this is the message\" Android app: WebSockets will become the default connection protocol \u00b6 Active since 2022-03-13, behavior will not change (deprecation removed 2022-06-20) Instant delivery connections and connections to self-hosted servers in the Android app were going to switch to use the WebSockets protocol by default. It was decided to keep JSON stream as the most compatible default and add a notice banner in the Android app instead. Android app: Using since=<timestamp> instead of since=<id> \u00b6 Active since 2022-02-27, behavior changed with v1.14.0 The Android app started using since=<id> instead of since=<timestamp> , which means as of Android app v1.14.0, it will not work with servers older than v1.16.0 anymore. This is to simplify handling of deduplication in the Android app. The since=<timestamp> endpoint will continue to work. This is merely a notice that the Android app behavior will change. Running server via ntfy (instead of ntfy serve ) \u00b6 Deprecated 2021-12-17, behavior changed with v1.10.0 As more commands are added to the ntfy CLI tool, using just ntfy to run the server is not practical anymore. Please use ntfy serve instead. This also applies to Docker images, as they can also execute more than just the server. Before After $ ntfy 2021/12/17 08:16:01 Listening on :80/http $ ntfy serve 2021/12/17 08:16:01 Listening on :80/http","title":"Deprecation notices"},{"location":"deprecations/#deprecation-notices","text":"This page is used to list deprecation notices for ntfy. Deprecated commands and options will be removed after 1-3 months from the time they were deprecated. How long the feature is deprecated before the behavior is changed depends on the severity of the change, and how prominent the feature is.","title":"Deprecation notices"},{"location":"deprecations/#active-deprecations","text":"No active deprecations","title":"Active deprecations"},{"location":"deprecations/#previous-deprecations","text":"","title":"Previous deprecations"},{"location":"deprecations/#ntfy-cli-ntfy-publish-env-topic-will-be-removed","text":"Active since 2022-06-20, behavior changed with v1.30.0 The ntfy publish --env-topic option will be removed. It'll still be possible to specify a topic via the NTFY_TOPIC environment variable, but it won't be necessary anymore to specify the --env-topic flag. Before After $ NTFY_TOPIC=mytopic ntfy publish --env-topic \"this is the message\" $ NTFY_TOPIC=mytopic ntfy publish \"this is the message\"","title":"ntfy CLI: ntfy publish --env-topic will be removed"},{"location":"deprecations/#android-app-websockets-will-become-the-default-connection-protocol","text":"Active since 2022-03-13, behavior will not change (deprecation removed 2022-06-20) Instant delivery connections and connections to self-hosted servers in the Android app were going to switch to use the WebSockets protocol by default. It was decided to keep JSON stream as the most compatible default and add a notice banner in the Android app instead.","title":"Android app: WebSockets will become the default connection protocol"},{"location":"deprecations/#android-app-using-sincetimestamp-instead-of-sinceid","text":"Active since 2022-02-27, behavior changed with v1.14.0 The Android app started using since=<id> instead of since=<timestamp> , which means as of Android app v1.14.0, it will not work with servers older than v1.16.0 anymore. This is to simplify handling of deduplication in the Android app. The since=<timestamp> endpoint will continue to work. This is merely a notice that the Android app behavior will change.","title":"Android app: Using since=&lt;timestamp&gt; instead of since=&lt;id&gt;"},{"location":"deprecations/#running-server-via-ntfy-instead-of-ntfy-serve","text":"Deprecated 2021-12-17, behavior changed with v1.10.0 As more commands are added to the ntfy CLI tool, using just ntfy to run the server is not practical anymore. Please use ntfy serve instead. This also applies to Docker images, as they can also execute more than just the server. Before After $ ntfy 2021/12/17 08:16:01 Listening on :80/http $ ntfy serve 2021/12/17 08:16:01 Listening on :80/http","title":"Running server via ntfy (instead of ntfy serve)"},{"location":"develop/","text":"Development \u00b6 Hurray \ud83e\udd73 \ud83c\udf89, you are interested in writing code for ntfy! That's awesome. \ud83d\ude0e I tried my very best to write up detailed instructions, but if at any point in time you run into issues, don't hesitate to contact me on Discord or Matrix . ntfy server \u00b6 The ntfy server source code is available on GitHub . The codebase for the server consists of three components: The main server/client is written in Go (so you'll need Go). Its main entrypoint is at main.go , and the meat you're likely interested in is in server.go . Notably, the server uses a SQLite library called go-sqlite3 , which requires Cgo and CGO_ENABLED=1 to be set. Otherwise things will not work (see below). The documentation is generated by MkDocs and Material for MkDocs , which is written in Python . You'll need Python and MkDocs (via pip ) only if you want to build the docs. The web app is written in React , using MUI . It uses Create React App to build the production build. If you want to modify the web app, you need nodejs (for npm ) and install all the 100,000 dependencies ( sigh ). All of these components are built and then baked into one binary . Navigating the code \u00b6 Code: main.go - Main entrypoint into the CLI, for both server and client cmd/ - CLI commands, such as serve or publish server/ - The meat of the server logic docs/ - The MkDocs documentation, also see mkdocs.yml web/ - The React application, also see web/package.json Build related: Makefile - Main entrypoint for all things related to building .goreleaser.yml - Describes all build outputs (for GoReleaser ) go.mod - Go modules dependency file mkdocs.yml - Config file for the docs (for MkDocs ) web/package.json - Build and dependency file for web app (for npm) The web/ and docs/ folder are the sources for web app and documentation. During the build process, the generated output is copied to server/site (web app and landing page) and server/docs (documentation). Build/test on Gitpod \u00b6 To get a quick working development environment you can use Gitpod , an in-browser IDE that makes it easy to develop ntfy without having to set up a desktop IDE. For any real development, I do suggest a proper IDE like IntelliJ IDEA . Build requirements \u00b6 Go (required for main server) gcc (required main server, for SQLite cgo-based bindings) Make (required for convenience) libsqlite3/libsqlite3-dev (required for main server, for SQLite cgo-based bindings) GoReleaser (required for a proper main server build) Python (for pip , only to build the docs) nodejs (for npm , only to build the web app) Install dependencies \u00b6 These steps assume Ubuntu . Steps may vary on different Linux distributions. First, install Go (see official instructions ): wget https://go.dev/dl/go1.19.1.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.19.1.linux-amd64.tar.gz export PATH = $PATH :/usr/local/go/bin: $HOME /go/bin go version # verifies that it worked Install GoReleaser (see official instructions ): go install github.com/goreleaser/goreleaser@latest goreleaser -v # verifies that it worked Install nodejs (see official instructions ): curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - sudo apt-get install -y nodejs npm -v # verifies that it worked Then install a few other things required: sudo apt install \\ build-essential \\ libsqlite3-dev \\ gcc-arm-linux-gnueabi \\ gcc-aarch64-linux-gnu \\ python3-pip \\ upx \\ git Check out code \u00b6 Now check out via git from the GitHub repository : via HTTPS via SSH git clone https://github.com/binwiederhier/ntfy.git cd ntfy git clone git@github.com:binwiederhier/ntfy.git cd ntfy Build all the things \u00b6 Now you can finally build everything. There are tons of make targets, so maybe just review what's there first by typing make : $ make Typical commands ( more see below ) : make build - Build web app, documentation and server/client ( sloowwww ) make cli-linux-amd64 - Build server/client binary ( amd64, no web app or docs ) make install-linux-amd64 - Install ntfy binary to /usr/bin/ntfy ( amd64 ) make web - Build the web app make docs - Build the documentation make check - Run all tests, vetting/formatting checks and linters ... If you want to build the ntfy binary including web app and docs for all supported architectures (amd64, armv7, and arm64), you can simply run make build : $ make build ... # This builds web app, docs, and the ntfy binary (for amd64, armv7 and arm64). # This will be SLOW (5+ minutes on my laptop on the first run). Maybe look at the other make targets? You'll see all the outputs in the dist/ folder afterwards: $ find dist dist dist/metadata.json dist/ntfy_arm64_linux_arm64 dist/ntfy_arm64_linux_arm64/ntfy dist/ntfy_armv7_linux_arm_7 dist/ntfy_armv7_linux_arm_7/ntfy dist/ntfy_amd64_linux_amd64 dist/ntfy_amd64_linux_amd64/ntfy dist/config.yaml dist/artifacts.json If you also want to build the Debian/RPM packages and the Docker images for all supported architectures , you can use the make release-snapshot target: $ make release-snapshot ... # This will be REALLY SLOW (sometimes 5+ minutes on my laptop) During development, you may want to be more picky and build only certain things. Here are a few examples. Build the ntfy binary \u00b6 To build only the ntfy binary without the web app or documentation , use the make cli-... targets: $ make Build server & client ( using GoReleaser, not release version ) : make cli - Build server & client ( all architectures ) make cli-linux-amd64 - Build server & client ( Linux, amd64 only ) make cli-linux-armv6 - Build server & client ( Linux, armv6 only ) make cli-linux-armv7 - Build server & client ( Linux, armv7 only ) make cli-linux-arm64 - Build server & client ( Linux, arm64 only ) make cli-windows-amd64 - Build client ( Windows, amd64 only ) make cli-darwin-all - Build client ( macOS, arm64+amd64 universal binary ) So if you're on an amd64/x86_64-based machine, you may just want to run make cli-linux-amd64 during testing. On a modern system, this shouldn't take longer than 5-10 seconds. I often combine it with install-linux-amd64 so I can run the binary right away: $ make cli-linux-amd64 install-linux-amd64 $ ntfy serve During development of the main app, you can also just use go run main.go , as long as you run make cli-deps-static-sites at least once and CGO_ENABLED=1 : $ export CGO_ENABLED = 1 $ make cli-deps-static-sites $ go run main.go serve 2022 /03/18 08 :43:55 Listening on :2586 [ http ] ... If you don't run cli-deps-static-sites , you may see an error pattern ...: no matching files found : $ go run main.go serve server/server.go:85:13: pattern docs: no matching files found This is because we use go:embed to embed the documentation and web app, so the Go code expects files to be present at server/docs and server/site . If they are not, you'll see the above error. The cli-deps-static-sites target creates dummy files that ensure that you'll be able to build. While not officially supported (or released), you can build and run the server on macOS as well. Simply run make cli-darwin-server to build a binary, or go run main.go serve (see above) to run it. Build the web app \u00b6 The sources for the web app live in web/ . As long as you have npm installed (see above), building the web app is really simple. Just type make web and you're in business: $ make web ... This will build the web app using Create React App and then copy the production build to the server/site folder , so that when you make cli (or make cli-linux-amd64 , ...), you will have the web app included in the ntfy binary. If you're developing on the web app, it's best to just cd web and run npm start manually. This will open your browser at http://127.0.0.1:3000 with the web app, and as you edit the source files, they will be recompiled and the browser will automatically refresh: $ cd web $ npm start Build the docs \u00b6 The sources for the docs live in docs/ . Similarly to the web app, you can simply run make docs to build the documentation. As long as you have mkdocs installed (see above), this should work fine: $ make docs ... If you are changing the documentation, you should be running mkdocs serve directly. This will build the documentation, serve the files at http://127.0.0.1:8000/ , and rebuild every time you save the source files: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 5.53 seconds INFO - [16:28:14] Serving on http://127.0.0.1:8000/ Then you can navigate to http://127.0.0.1:8000/ and whenever you change a markdown file in your text editor it'll automatically update. Android app \u00b6 The ntfy Android app source code is available on GitHub . The Android app has two flavors: Google Play: The play flavor includes Firebase (FCM) and requires a Firebase account F-Droid: The fdroid flavor does not include Firebase or Google dependencies Navigating the code \u00b6 main/ - Main Android app source code play/ - Google Play / Firebase specific code fdroid/ - F-Droid Firebase stubs build.gradle - Main build file IDE/Environment \u00b6 You should download Android Studio (or IntelliJ IDEA with the relevant Android plugins). Everything else will just be a pain for you. Do yourself a favor. \ud83d\ude00 Check out the code \u00b6 First check out the repository: via HTTPS via SSH git clone https://github.com/binwiederhier/ntfy-android.git cd ntfy-android git clone git@github.com:binwiederhier/ntfy-android.git cd ntfy-android Then either follow the steps for building with or without Firebase. Build F-Droid flavor (no FCM) \u00b6 Info I do build the ntfy Android app using IntelliJ IDEA (Android Studio), so I don't know if these Gradle commands will work without issues. Please give me feedback if it does/doesn't work for you. Without Firebase, you may want to still change the default app_base_url in values.xml if you're self-hosting the server. Then run: # Remove Google dependencies (FCM) sed -i -e '/google-services/d' build.gradle sed -i -e '/google-services/d' app/build.gradle # To build an unsigned .apk (app/build/outputs/apk/fdroid/*.apk) ./gradlew assembleFdroidRelease # To build a bundle .aab (app/fdroid/release/*.aab) ./gradlew bundleFdroidRelease Build Play flavor (FCM) \u00b6 Info I do build the ntfy Android app using IntelliJ IDEA (Android Studio), so I don't know if these Gradle commands will work without issues. Please give me feedback if it does/doesn't work for you. To build your own version with Firebase, you must: Create a Firebase/FCM account Place your account file at app/google-services.json And change app_base_url in values.xml Then run: # To build an unsigned .apk (app/build/outputs/apk/play/*.apk) ./gradlew assemblePlayRelease # To build a bundle .aab (app/play/release/*.aab) ./gradlew bundlePlayRelease iOS app \u00b6 The ntfy iOS app source code is available on GitHub . Info I haven't had time to move the build instructions here. Please check out the repository instead.","title":"Development"},{"location":"develop/#development","text":"Hurray \ud83e\udd73 \ud83c\udf89, you are interested in writing code for ntfy! That's awesome. \ud83d\ude0e I tried my very best to write up detailed instructions, but if at any point in time you run into issues, don't hesitate to contact me on Discord or Matrix .","title":"Development"},{"location":"develop/#ntfy-server","text":"The ntfy server source code is available on GitHub . The codebase for the server consists of three components: The main server/client is written in Go (so you'll need Go). Its main entrypoint is at main.go , and the meat you're likely interested in is in server.go . Notably, the server uses a SQLite library called go-sqlite3 , which requires Cgo and CGO_ENABLED=1 to be set. Otherwise things will not work (see below). The documentation is generated by MkDocs and Material for MkDocs , which is written in Python . You'll need Python and MkDocs (via pip ) only if you want to build the docs. The web app is written in React , using MUI . It uses Create React App to build the production build. If you want to modify the web app, you need nodejs (for npm ) and install all the 100,000 dependencies ( sigh ). All of these components are built and then baked into one binary .","title":"ntfy server"},{"location":"develop/#navigating-the-code","text":"Code: main.go - Main entrypoint into the CLI, for both server and client cmd/ - CLI commands, such as serve or publish server/ - The meat of the server logic docs/ - The MkDocs documentation, also see mkdocs.yml web/ - The React application, also see web/package.json Build related: Makefile - Main entrypoint for all things related to building .goreleaser.yml - Describes all build outputs (for GoReleaser ) go.mod - Go modules dependency file mkdocs.yml - Config file for the docs (for MkDocs ) web/package.json - Build and dependency file for web app (for npm) The web/ and docs/ folder are the sources for web app and documentation. During the build process, the generated output is copied to server/site (web app and landing page) and server/docs (documentation).","title":"Navigating the code"},{"location":"develop/#buildtest-on-gitpod","text":"To get a quick working development environment you can use Gitpod , an in-browser IDE that makes it easy to develop ntfy without having to set up a desktop IDE. For any real development, I do suggest a proper IDE like IntelliJ IDEA .","title":"Build/test on Gitpod"},{"location":"develop/#build-requirements","text":"Go (required for main server) gcc (required main server, for SQLite cgo-based bindings) Make (required for convenience) libsqlite3/libsqlite3-dev (required for main server, for SQLite cgo-based bindings) GoReleaser (required for a proper main server build) Python (for pip , only to build the docs) nodejs (for npm , only to build the web app)","title":"Build requirements"},{"location":"develop/#install-dependencies","text":"These steps assume Ubuntu . Steps may vary on different Linux distributions. First, install Go (see official instructions ): wget https://go.dev/dl/go1.19.1.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.19.1.linux-amd64.tar.gz export PATH = $PATH :/usr/local/go/bin: $HOME /go/bin go version # verifies that it worked Install GoReleaser (see official instructions ): go install github.com/goreleaser/goreleaser@latest goreleaser -v # verifies that it worked Install nodejs (see official instructions ): curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - sudo apt-get install -y nodejs npm -v # verifies that it worked Then install a few other things required: sudo apt install \\ build-essential \\ libsqlite3-dev \\ gcc-arm-linux-gnueabi \\ gcc-aarch64-linux-gnu \\ python3-pip \\ upx \\ git","title":"Install dependencies"},{"location":"develop/#check-out-code","text":"Now check out via git from the GitHub repository : via HTTPS via SSH git clone https://github.com/binwiederhier/ntfy.git cd ntfy git clone git@github.com:binwiederhier/ntfy.git cd ntfy","title":"Check out code"},{"location":"develop/#build-all-the-things","text":"Now you can finally build everything. There are tons of make targets, so maybe just review what's there first by typing make : $ make Typical commands ( more see below ) : make build - Build web app, documentation and server/client ( sloowwww ) make cli-linux-amd64 - Build server/client binary ( amd64, no web app or docs ) make install-linux-amd64 - Install ntfy binary to /usr/bin/ntfy ( amd64 ) make web - Build the web app make docs - Build the documentation make check - Run all tests, vetting/formatting checks and linters ... If you want to build the ntfy binary including web app and docs for all supported architectures (amd64, armv7, and arm64), you can simply run make build : $ make build ... # This builds web app, docs, and the ntfy binary (for amd64, armv7 and arm64). # This will be SLOW (5+ minutes on my laptop on the first run). Maybe look at the other make targets? You'll see all the outputs in the dist/ folder afterwards: $ find dist dist dist/metadata.json dist/ntfy_arm64_linux_arm64 dist/ntfy_arm64_linux_arm64/ntfy dist/ntfy_armv7_linux_arm_7 dist/ntfy_armv7_linux_arm_7/ntfy dist/ntfy_amd64_linux_amd64 dist/ntfy_amd64_linux_amd64/ntfy dist/config.yaml dist/artifacts.json If you also want to build the Debian/RPM packages and the Docker images for all supported architectures , you can use the make release-snapshot target: $ make release-snapshot ... # This will be REALLY SLOW (sometimes 5+ minutes on my laptop) During development, you may want to be more picky and build only certain things. Here are a few examples.","title":"Build all the things"},{"location":"develop/#build-the-ntfy-binary","text":"To build only the ntfy binary without the web app or documentation , use the make cli-... targets: $ make Build server & client ( using GoReleaser, not release version ) : make cli - Build server & client ( all architectures ) make cli-linux-amd64 - Build server & client ( Linux, amd64 only ) make cli-linux-armv6 - Build server & client ( Linux, armv6 only ) make cli-linux-armv7 - Build server & client ( Linux, armv7 only ) make cli-linux-arm64 - Build server & client ( Linux, arm64 only ) make cli-windows-amd64 - Build client ( Windows, amd64 only ) make cli-darwin-all - Build client ( macOS, arm64+amd64 universal binary ) So if you're on an amd64/x86_64-based machine, you may just want to run make cli-linux-amd64 during testing. On a modern system, this shouldn't take longer than 5-10 seconds. I often combine it with install-linux-amd64 so I can run the binary right away: $ make cli-linux-amd64 install-linux-amd64 $ ntfy serve During development of the main app, you can also just use go run main.go , as long as you run make cli-deps-static-sites at least once and CGO_ENABLED=1 : $ export CGO_ENABLED = 1 $ make cli-deps-static-sites $ go run main.go serve 2022 /03/18 08 :43:55 Listening on :2586 [ http ] ... If you don't run cli-deps-static-sites , you may see an error pattern ...: no matching files found : $ go run main.go serve server/server.go:85:13: pattern docs: no matching files found This is because we use go:embed to embed the documentation and web app, so the Go code expects files to be present at server/docs and server/site . If they are not, you'll see the above error. The cli-deps-static-sites target creates dummy files that ensure that you'll be able to build. While not officially supported (or released), you can build and run the server on macOS as well. Simply run make cli-darwin-server to build a binary, or go run main.go serve (see above) to run it.","title":"Build the ntfy binary"},{"location":"develop/#build-the-web-app","text":"The sources for the web app live in web/ . As long as you have npm installed (see above), building the web app is really simple. Just type make web and you're in business: $ make web ... This will build the web app using Create React App and then copy the production build to the server/site folder , so that when you make cli (or make cli-linux-amd64 , ...), you will have the web app included in the ntfy binary. If you're developing on the web app, it's best to just cd web and run npm start manually. This will open your browser at http://127.0.0.1:3000 with the web app, and as you edit the source files, they will be recompiled and the browser will automatically refresh: $ cd web $ npm start","title":"Build the web app"},{"location":"develop/#build-the-docs","text":"The sources for the docs live in docs/ . Similarly to the web app, you can simply run make docs to build the documentation. As long as you have mkdocs installed (see above), this should work fine: $ make docs ... If you are changing the documentation, you should be running mkdocs serve directly. This will build the documentation, serve the files at http://127.0.0.1:8000/ , and rebuild every time you save the source files: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 5.53 seconds INFO - [16:28:14] Serving on http://127.0.0.1:8000/ Then you can navigate to http://127.0.0.1:8000/ and whenever you change a markdown file in your text editor it'll automatically update.","title":"Build the docs"},{"location":"develop/#android-app","text":"The ntfy Android app source code is available on GitHub . The Android app has two flavors: Google Play: The play flavor includes Firebase (FCM) and requires a Firebase account F-Droid: The fdroid flavor does not include Firebase or Google dependencies","title":"Android app"},{"location":"develop/#navigating-the-code_1","text":"main/ - Main Android app source code play/ - Google Play / Firebase specific code fdroid/ - F-Droid Firebase stubs build.gradle - Main build file","title":"Navigating the code"},{"location":"develop/#ideenvironment","text":"You should download Android Studio (or IntelliJ IDEA with the relevant Android plugins). Everything else will just be a pain for you. Do yourself a favor. \ud83d\ude00","title":"IDE/Environment"},{"location":"develop/#check-out-the-code","text":"First check out the repository: via HTTPS via SSH git clone https://github.com/binwiederhier/ntfy-android.git cd ntfy-android git clone git@github.com:binwiederhier/ntfy-android.git cd ntfy-android Then either follow the steps for building with or without Firebase.","title":"Check out the code"},{"location":"develop/#build-f-droid-flavor-no-fcm","text":"Info I do build the ntfy Android app using IntelliJ IDEA (Android Studio), so I don't know if these Gradle commands will work without issues. Please give me feedback if it does/doesn't work for you. Without Firebase, you may want to still change the default app_base_url in values.xml if you're self-hosting the server. Then run: # Remove Google dependencies (FCM) sed -i -e '/google-services/d' build.gradle sed -i -e '/google-services/d' app/build.gradle # To build an unsigned .apk (app/build/outputs/apk/fdroid/*.apk) ./gradlew assembleFdroidRelease # To build a bundle .aab (app/fdroid/release/*.aab) ./gradlew bundleFdroidRelease","title":"Build F-Droid flavor (no FCM)"},{"location":"develop/#build-play-flavor-fcm","text":"Info I do build the ntfy Android app using IntelliJ IDEA (Android Studio), so I don't know if these Gradle commands will work without issues. Please give me feedback if it does/doesn't work for you. To build your own version with Firebase, you must: Create a Firebase/FCM account Place your account file at app/google-services.json And change app_base_url in values.xml Then run: # To build an unsigned .apk (app/build/outputs/apk/play/*.apk) ./gradlew assemblePlayRelease # To build a bundle .aab (app/play/release/*.aab) ./gradlew bundlePlayRelease","title":"Build Play flavor (FCM)"},{"location":"develop/#ios-app","text":"The ntfy iOS app source code is available on GitHub . Info I haven't had time to move the build instructions here. Please check out the repository instead.","title":"iOS app"},{"location":"emojis/","text":"Emoji reference \u00b6 You can tag messages with emojis \ud83e\udd73 \ud83c\udf89 and other relevant strings. Matching tags are automatically converted to emojis. This is a reference of all supported emojis. To learn more about the feature, please refer to the tagging and emojis page . Tag Emoji grinning \ud83d\ude00 smiley \ud83d\ude03 smile \ud83d\ude04 grin \ud83d\ude01 laughing \ud83d\ude06 sweat_smile \ud83d\ude05 rofl \ud83e\udd23 joy \ud83d\ude02 slightly_smiling_face \ud83d\ude42 upside_down_face \ud83d\ude43 wink \ud83d\ude09 blush \ud83d\ude0a innocent \ud83d\ude07 smiling_face_with_three_hearts \ud83e\udd70 heart_eyes \ud83d\ude0d star_struck \ud83e\udd29 kissing_heart \ud83d\ude18 kissing \ud83d\ude17 relaxed \u263a\ufe0f kissing_closed_eyes \ud83d\ude1a kissing_smiling_eyes \ud83d\ude19 smiling_face_with_tear \ud83e\udd72 yum \ud83d\ude0b stuck_out_tongue \ud83d\ude1b stuck_out_tongue_winking_eye \ud83d\ude1c zany_face \ud83e\udd2a stuck_out_tongue_closed_eyes \ud83d\ude1d money_mouth_face \ud83e\udd11 hugs \ud83e\udd17 hand_over_mouth \ud83e\udd2d shushing_face \ud83e\udd2b thinking \ud83e\udd14 zipper_mouth_face \ud83e\udd10 raised_eyebrow \ud83e\udd28 neutral_face \ud83d\ude10 expressionless \ud83d\ude11 no_mouth \ud83d\ude36 face_in_clouds \ud83d\ude36\u200d\ud83c\udf2b\ufe0f smirk \ud83d\ude0f unamused \ud83d\ude12 roll_eyes \ud83d\ude44 grimacing \ud83d\ude2c face_exhaling \ud83d\ude2e\u200d\ud83d\udca8 lying_face \ud83e\udd25 relieved \ud83d\ude0c pensive \ud83d\ude14 sleepy \ud83d\ude2a drooling_face \ud83e\udd24 sleeping \ud83d\ude34 mask \ud83d\ude37 face_with_thermometer \ud83e\udd12 face_with_head_bandage \ud83e\udd15 nauseated_face \ud83e\udd22 vomiting_face \ud83e\udd2e sneezing_face \ud83e\udd27 hot_face \ud83e\udd75 cold_face \ud83e\udd76 woozy_face \ud83e\udd74 dizzy_face \ud83d\ude35 face_with_spiral_eyes \ud83d\ude35\u200d\ud83d\udcab exploding_head \ud83e\udd2f cowboy_hat_face \ud83e\udd20 partying_face \ud83e\udd73 disguised_face \ud83e\udd78 sunglasses \ud83d\ude0e nerd_face \ud83e\udd13 monocle_face \ud83e\uddd0 confused \ud83d\ude15 worried \ud83d\ude1f slightly_frowning_face \ud83d\ude41 frowning_face \u2639\ufe0f open_mouth \ud83d\ude2e hushed \ud83d\ude2f astonished \ud83d\ude32 flushed \ud83d\ude33 pleading_face \ud83e\udd7a frowning \ud83d\ude26 anguished \ud83d\ude27 fearful \ud83d\ude28 cold_sweat \ud83d\ude30 disappointed_relieved \ud83d\ude25 cry \ud83d\ude22 sob \ud83d\ude2d scream \ud83d\ude31 confounded \ud83d\ude16 persevere \ud83d\ude23 disappointed \ud83d\ude1e sweat \ud83d\ude13 weary \ud83d\ude29 tired_face \ud83d\ude2b yawning_face \ud83e\udd71 triumph \ud83d\ude24 rage \ud83d\ude21 angry \ud83d\ude20 cursing_face \ud83e\udd2c smiling_imp \ud83d\ude08 imp \ud83d\udc7f skull \ud83d\udc80 skull_and_crossbones \u2620\ufe0f hankey \ud83d\udca9 clown_face \ud83e\udd21 japanese_ogre \ud83d\udc79 japanese_goblin \ud83d\udc7a ghost \ud83d\udc7b alien \ud83d\udc7d space_invader \ud83d\udc7e robot \ud83e\udd16 smiley_cat \ud83d\ude3a smile_cat \ud83d\ude38 joy_cat \ud83d\ude39 heart_eyes_cat \ud83d\ude3b smirk_cat \ud83d\ude3c kissing_cat \ud83d\ude3d scream_cat \ud83d\ude40 crying_cat_face \ud83d\ude3f pouting_cat \ud83d\ude3e see_no_evil \ud83d\ude48 hear_no_evil \ud83d\ude49 speak_no_evil \ud83d\ude4a kiss \ud83d\udc8b love_letter \ud83d\udc8c cupid \ud83d\udc98 gift_heart \ud83d\udc9d sparkling_heart \ud83d\udc96 heartpulse \ud83d\udc97 heartbeat \ud83d\udc93 revolving_hearts \ud83d\udc9e two_hearts \ud83d\udc95 heart_decoration \ud83d\udc9f heavy_heart_exclamation \u2763\ufe0f broken_heart \ud83d\udc94 heart_on_fire \u2764\ufe0f\u200d\ud83d\udd25 mending_heart \u2764\ufe0f\u200d\ud83e\ude79 heart \u2764\ufe0f orange_heart \ud83e\udde1 yellow_heart \ud83d\udc9b green_heart \ud83d\udc9a blue_heart \ud83d\udc99 purple_heart \ud83d\udc9c brown_heart \ud83e\udd0e black_heart \ud83d\udda4 white_heart \ud83e\udd0d 100 \ud83d\udcaf anger \ud83d\udca2 boom \ud83d\udca5 dizzy \ud83d\udcab sweat_drops \ud83d\udca6 dash \ud83d\udca8 hole \ud83d\udd73\ufe0f bomb \ud83d\udca3 speech_balloon \ud83d\udcac eye_speech_bubble \ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f left_speech_bubble \ud83d\udde8\ufe0f right_anger_bubble \ud83d\uddef\ufe0f thought_balloon \ud83d\udcad zzz \ud83d\udca4 wave \ud83d\udc4b raised_back_of_hand \ud83e\udd1a raised_hand_with_fingers_splayed \ud83d\udd90\ufe0f hand \u270b vulcan_salute \ud83d\udd96 ok_hand \ud83d\udc4c pinched_fingers \ud83e\udd0c pinching_hand \ud83e\udd0f v \u270c\ufe0f crossed_fingers \ud83e\udd1e love_you_gesture \ud83e\udd1f metal \ud83e\udd18 call_me_hand \ud83e\udd19 point_left \ud83d\udc48 point_right \ud83d\udc49 point_up_2 \ud83d\udc46 middle_finger \ud83d\udd95 point_down \ud83d\udc47 point_up \u261d\ufe0f +1 \ud83d\udc4d -1 \ud83d\udc4e fist_raised \u270a fist_oncoming \ud83d\udc4a fist_left \ud83e\udd1b fist_right \ud83e\udd1c clap \ud83d\udc4f raised_hands \ud83d\ude4c open_hands \ud83d\udc50 palms_up_together \ud83e\udd32 handshake \ud83e\udd1d pray \ud83d\ude4f writing_hand \u270d\ufe0f nail_care \ud83d\udc85 selfie \ud83e\udd33 muscle \ud83d\udcaa mechanical_arm \ud83e\uddbe mechanical_leg \ud83e\uddbf leg \ud83e\uddb5 foot \ud83e\uddb6 ear \ud83d\udc42 ear_with_hearing_aid \ud83e\uddbb nose \ud83d\udc43 brain \ud83e\udde0 anatomical_heart \ud83e\udec0 lungs \ud83e\udec1 tooth \ud83e\uddb7 bone \ud83e\uddb4 eyes \ud83d\udc40 eye \ud83d\udc41\ufe0f tongue \ud83d\udc45 lips \ud83d\udc44 baby \ud83d\udc76 child \ud83e\uddd2 boy \ud83d\udc66 girl \ud83d\udc67 adult \ud83e\uddd1 blond_haired_person \ud83d\udc71 man \ud83d\udc68 bearded_person \ud83e\uddd4 man_beard \ud83e\uddd4\u200d\u2642\ufe0f woman_beard \ud83e\uddd4\u200d\u2640\ufe0f red_haired_man \ud83d\udc68\u200d\ud83e\uddb0 curly_haired_man \ud83d\udc68\u200d\ud83e\uddb1 white_haired_man \ud83d\udc68\u200d\ud83e\uddb3 bald_man \ud83d\udc68\u200d\ud83e\uddb2 woman \ud83d\udc69 red_haired_woman \ud83d\udc69\u200d\ud83e\uddb0 person_red_hair \ud83e\uddd1\u200d\ud83e\uddb0 curly_haired_woman \ud83d\udc69\u200d\ud83e\uddb1 person_curly_hair \ud83e\uddd1\u200d\ud83e\uddb1 white_haired_woman \ud83d\udc69\u200d\ud83e\uddb3 person_white_hair \ud83e\uddd1\u200d\ud83e\uddb3 bald_woman \ud83d\udc69\u200d\ud83e\uddb2 person_bald \ud83e\uddd1\u200d\ud83e\uddb2 blond_haired_woman \ud83d\udc71\u200d\u2640\ufe0f blond_haired_man \ud83d\udc71\u200d\u2642\ufe0f older_adult \ud83e\uddd3 older_man \ud83d\udc74 older_woman \ud83d\udc75 frowning_person \ud83d\ude4d frowning_man \ud83d\ude4d\u200d\u2642\ufe0f frowning_woman \ud83d\ude4d\u200d\u2640\ufe0f pouting_face \ud83d\ude4e pouting_man \ud83d\ude4e\u200d\u2642\ufe0f pouting_woman \ud83d\ude4e\u200d\u2640\ufe0f no_good \ud83d\ude45 no_good_man \ud83d\ude45\u200d\u2642\ufe0f no_good_woman \ud83d\ude45\u200d\u2640\ufe0f ok_person \ud83d\ude46 ok_man \ud83d\ude46\u200d\u2642\ufe0f ok_woman \ud83d\ude46\u200d\u2640\ufe0f tipping_hand_person \ud83d\udc81 tipping_hand_man \ud83d\udc81\u200d\u2642\ufe0f tipping_hand_woman \ud83d\udc81\u200d\u2640\ufe0f raising_hand \ud83d\ude4b raising_hand_man \ud83d\ude4b\u200d\u2642\ufe0f raising_hand_woman \ud83d\ude4b\u200d\u2640\ufe0f deaf_person \ud83e\uddcf deaf_man \ud83e\uddcf\u200d\u2642\ufe0f deaf_woman \ud83e\uddcf\u200d\u2640\ufe0f bow \ud83d\ude47 bowing_man \ud83d\ude47\u200d\u2642\ufe0f bowing_woman \ud83d\ude47\u200d\u2640\ufe0f facepalm \ud83e\udd26 man_facepalming \ud83e\udd26\u200d\u2642\ufe0f woman_facepalming \ud83e\udd26\u200d\u2640\ufe0f shrug \ud83e\udd37 man_shrugging \ud83e\udd37\u200d\u2642\ufe0f woman_shrugging \ud83e\udd37\u200d\u2640\ufe0f health_worker \ud83e\uddd1\u200d\u2695\ufe0f man_health_worker \ud83d\udc68\u200d\u2695\ufe0f woman_health_worker \ud83d\udc69\u200d\u2695\ufe0f student \ud83e\uddd1\u200d\ud83c\udf93 man_student \ud83d\udc68\u200d\ud83c\udf93 woman_student \ud83d\udc69\u200d\ud83c\udf93 teacher \ud83e\uddd1\u200d\ud83c\udfeb man_teacher \ud83d\udc68\u200d\ud83c\udfeb woman_teacher \ud83d\udc69\u200d\ud83c\udfeb judge \ud83e\uddd1\u200d\u2696\ufe0f man_judge \ud83d\udc68\u200d\u2696\ufe0f woman_judge \ud83d\udc69\u200d\u2696\ufe0f farmer \ud83e\uddd1\u200d\ud83c\udf3e man_farmer \ud83d\udc68\u200d\ud83c\udf3e woman_farmer \ud83d\udc69\u200d\ud83c\udf3e cook \ud83e\uddd1\u200d\ud83c\udf73 man_cook \ud83d\udc68\u200d\ud83c\udf73 woman_cook \ud83d\udc69\u200d\ud83c\udf73 mechanic \ud83e\uddd1\u200d\ud83d\udd27 man_mechanic \ud83d\udc68\u200d\ud83d\udd27 woman_mechanic \ud83d\udc69\u200d\ud83d\udd27 factory_worker \ud83e\uddd1\u200d\ud83c\udfed man_factory_worker \ud83d\udc68\u200d\ud83c\udfed woman_factory_worker \ud83d\udc69\u200d\ud83c\udfed office_worker \ud83e\uddd1\u200d\ud83d\udcbc man_office_worker \ud83d\udc68\u200d\ud83d\udcbc woman_office_worker \ud83d\udc69\u200d\ud83d\udcbc scientist \ud83e\uddd1\u200d\ud83d\udd2c man_scientist \ud83d\udc68\u200d\ud83d\udd2c woman_scientist \ud83d\udc69\u200d\ud83d\udd2c technologist \ud83e\uddd1\u200d\ud83d\udcbb man_technologist \ud83d\udc68\u200d\ud83d\udcbb woman_technologist \ud83d\udc69\u200d\ud83d\udcbb singer \ud83e\uddd1\u200d\ud83c\udfa4 man_singer \ud83d\udc68\u200d\ud83c\udfa4 woman_singer \ud83d\udc69\u200d\ud83c\udfa4 artist \ud83e\uddd1\u200d\ud83c\udfa8 man_artist \ud83d\udc68\u200d\ud83c\udfa8 woman_artist \ud83d\udc69\u200d\ud83c\udfa8 pilot \ud83e\uddd1\u200d\u2708\ufe0f man_pilot \ud83d\udc68\u200d\u2708\ufe0f woman_pilot \ud83d\udc69\u200d\u2708\ufe0f astronaut \ud83e\uddd1\u200d\ud83d\ude80 man_astronaut \ud83d\udc68\u200d\ud83d\ude80 woman_astronaut \ud83d\udc69\u200d\ud83d\ude80 firefighter \ud83e\uddd1\u200d\ud83d\ude92 man_firefighter \ud83d\udc68\u200d\ud83d\ude92 woman_firefighter \ud83d\udc69\u200d\ud83d\ude92 police_officer \ud83d\udc6e policeman \ud83d\udc6e\u200d\u2642\ufe0f policewoman \ud83d\udc6e\u200d\u2640\ufe0f detective \ud83d\udd75\ufe0f male_detective \ud83d\udd75\ufe0f\u200d\u2642\ufe0f female_detective \ud83d\udd75\ufe0f\u200d\u2640\ufe0f guard \ud83d\udc82 guardsman \ud83d\udc82\u200d\u2642\ufe0f guardswoman \ud83d\udc82\u200d\u2640\ufe0f ninja \ud83e\udd77 construction_worker \ud83d\udc77 construction_worker_man \ud83d\udc77\u200d\u2642\ufe0f construction_worker_woman \ud83d\udc77\u200d\u2640\ufe0f prince \ud83e\udd34 princess \ud83d\udc78 person_with_turban \ud83d\udc73 man_with_turban \ud83d\udc73\u200d\u2642\ufe0f woman_with_turban \ud83d\udc73\u200d\u2640\ufe0f man_with_gua_pi_mao \ud83d\udc72 woman_with_headscarf \ud83e\uddd5 person_in_tuxedo \ud83e\udd35 man_in_tuxedo \ud83e\udd35\u200d\u2642\ufe0f woman_in_tuxedo \ud83e\udd35\u200d\u2640\ufe0f person_with_veil \ud83d\udc70 man_with_veil \ud83d\udc70\u200d\u2642\ufe0f woman_with_veil \ud83d\udc70\u200d\u2640\ufe0f pregnant_woman \ud83e\udd30 breast_feeding \ud83e\udd31 woman_feeding_baby \ud83d\udc69\u200d\ud83c\udf7c man_feeding_baby \ud83d\udc68\u200d\ud83c\udf7c person_feeding_baby \ud83e\uddd1\u200d\ud83c\udf7c angel \ud83d\udc7c santa \ud83c\udf85 mrs_claus \ud83e\udd36 mx_claus \ud83e\uddd1\u200d\ud83c\udf84 superhero \ud83e\uddb8 superhero_man \ud83e\uddb8\u200d\u2642\ufe0f superhero_woman \ud83e\uddb8\u200d\u2640\ufe0f supervillain \ud83e\uddb9 supervillain_man \ud83e\uddb9\u200d\u2642\ufe0f supervillain_woman \ud83e\uddb9\u200d\u2640\ufe0f mage \ud83e\uddd9 mage_man \ud83e\uddd9\u200d\u2642\ufe0f mage_woman \ud83e\uddd9\u200d\u2640\ufe0f fairy \ud83e\uddda fairy_man \ud83e\uddda\u200d\u2642\ufe0f fairy_woman \ud83e\uddda\u200d\u2640\ufe0f vampire \ud83e\udddb vampire_man \ud83e\udddb\u200d\u2642\ufe0f vampire_woman \ud83e\udddb\u200d\u2640\ufe0f merperson \ud83e\udddc merman \ud83e\udddc\u200d\u2642\ufe0f mermaid \ud83e\udddc\u200d\u2640\ufe0f elf \ud83e\udddd elf_man \ud83e\udddd\u200d\u2642\ufe0f elf_woman \ud83e\udddd\u200d\u2640\ufe0f genie \ud83e\uddde genie_man \ud83e\uddde\u200d\u2642\ufe0f genie_woman \ud83e\uddde\u200d\u2640\ufe0f zombie \ud83e\udddf zombie_man \ud83e\udddf\u200d\u2642\ufe0f zombie_woman \ud83e\udddf\u200d\u2640\ufe0f massage \ud83d\udc86 massage_man \ud83d\udc86\u200d\u2642\ufe0f massage_woman \ud83d\udc86\u200d\u2640\ufe0f haircut \ud83d\udc87 haircut_man \ud83d\udc87\u200d\u2642\ufe0f haircut_woman \ud83d\udc87\u200d\u2640\ufe0f walking \ud83d\udeb6 walking_man \ud83d\udeb6\u200d\u2642\ufe0f walking_woman \ud83d\udeb6\u200d\u2640\ufe0f standing_person \ud83e\uddcd standing_man \ud83e\uddcd\u200d\u2642\ufe0f standing_woman \ud83e\uddcd\u200d\u2640\ufe0f kneeling_person \ud83e\uddce kneeling_man \ud83e\uddce\u200d\u2642\ufe0f kneeling_woman \ud83e\uddce\u200d\u2640\ufe0f person_with_probing_cane \ud83e\uddd1\u200d\ud83e\uddaf man_with_probing_cane \ud83d\udc68\u200d\ud83e\uddaf woman_with_probing_cane \ud83d\udc69\u200d\ud83e\uddaf person_in_motorized_wheelchair \ud83e\uddd1\u200d\ud83e\uddbc man_in_motorized_wheelchair \ud83d\udc68\u200d\ud83e\uddbc woman_in_motorized_wheelchair \ud83d\udc69\u200d\ud83e\uddbc person_in_manual_wheelchair \ud83e\uddd1\u200d\ud83e\uddbd man_in_manual_wheelchair \ud83d\udc68\u200d\ud83e\uddbd woman_in_manual_wheelchair \ud83d\udc69\u200d\ud83e\uddbd runner \ud83c\udfc3 running_man \ud83c\udfc3\u200d\u2642\ufe0f running_woman \ud83c\udfc3\u200d\u2640\ufe0f woman_dancing \ud83d\udc83 man_dancing \ud83d\udd7a business_suit_levitating \ud83d\udd74\ufe0f dancers \ud83d\udc6f dancing_men \ud83d\udc6f\u200d\u2642\ufe0f dancing_women \ud83d\udc6f\u200d\u2640\ufe0f sauna_person \ud83e\uddd6 sauna_man \ud83e\uddd6\u200d\u2642\ufe0f sauna_woman \ud83e\uddd6\u200d\u2640\ufe0f climbing \ud83e\uddd7 climbing_man \ud83e\uddd7\u200d\u2642\ufe0f climbing_woman \ud83e\uddd7\u200d\u2640\ufe0f person_fencing \ud83e\udd3a horse_racing \ud83c\udfc7 skier \u26f7\ufe0f snowboarder \ud83c\udfc2 golfing \ud83c\udfcc\ufe0f golfing_man \ud83c\udfcc\ufe0f\u200d\u2642\ufe0f golfing_woman \ud83c\udfcc\ufe0f\u200d\u2640\ufe0f surfer \ud83c\udfc4 surfing_man \ud83c\udfc4\u200d\u2642\ufe0f surfing_woman \ud83c\udfc4\u200d\u2640\ufe0f rowboat \ud83d\udea3 rowing_man \ud83d\udea3\u200d\u2642\ufe0f rowing_woman \ud83d\udea3\u200d\u2640\ufe0f swimmer \ud83c\udfca swimming_man \ud83c\udfca\u200d\u2642\ufe0f swimming_woman \ud83c\udfca\u200d\u2640\ufe0f bouncing_ball_person \u26f9\ufe0f bouncing_ball_man \u26f9\ufe0f\u200d\u2642\ufe0f bouncing_ball_woman \u26f9\ufe0f\u200d\u2640\ufe0f weight_lifting \ud83c\udfcb\ufe0f weight_lifting_man \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f weight_lifting_woman \ud83c\udfcb\ufe0f\u200d\u2640\ufe0f bicyclist \ud83d\udeb4 biking_man \ud83d\udeb4\u200d\u2642\ufe0f biking_woman \ud83d\udeb4\u200d\u2640\ufe0f mountain_bicyclist \ud83d\udeb5 mountain_biking_man \ud83d\udeb5\u200d\u2642\ufe0f mountain_biking_woman \ud83d\udeb5\u200d\u2640\ufe0f cartwheeling \ud83e\udd38 man_cartwheeling \ud83e\udd38\u200d\u2642\ufe0f woman_cartwheeling \ud83e\udd38\u200d\u2640\ufe0f wrestling \ud83e\udd3c men_wrestling \ud83e\udd3c\u200d\u2642\ufe0f women_wrestling \ud83e\udd3c\u200d\u2640\ufe0f water_polo \ud83e\udd3d man_playing_water_polo \ud83e\udd3d\u200d\u2642\ufe0f woman_playing_water_polo \ud83e\udd3d\u200d\u2640\ufe0f handball_person \ud83e\udd3e man_playing_handball \ud83e\udd3e\u200d\u2642\ufe0f woman_playing_handball \ud83e\udd3e\u200d\u2640\ufe0f juggling_person \ud83e\udd39 man_juggling \ud83e\udd39\u200d\u2642\ufe0f woman_juggling \ud83e\udd39\u200d\u2640\ufe0f lotus_position \ud83e\uddd8 lotus_position_man \ud83e\uddd8\u200d\u2642\ufe0f lotus_position_woman \ud83e\uddd8\u200d\u2640\ufe0f bath \ud83d\udec0 sleeping_bed \ud83d\udecc people_holding_hands \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 two_women_holding_hands \ud83d\udc6d couple \ud83d\udc6b two_men_holding_hands \ud83d\udc6c couplekiss \ud83d\udc8f couplekiss_man_woman \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 couplekiss_man_man \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 couplekiss_woman_woman \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69 couple_with_heart \ud83d\udc91 couple_with_heart_woman_man \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68 couple_with_heart_man_man \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68 couple_with_heart_woman_woman \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 family \ud83d\udc6a family_man_woman_boy \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 family_man_woman_girl \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 family_man_woman_girl_boy \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 family_man_woman_boy_boy \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 family_man_woman_girl_girl \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 family_man_man_boy \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 family_man_man_girl \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 family_man_man_girl_boy \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 family_man_man_boy_boy \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 family_man_man_girl_girl \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 family_woman_woman_boy \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 family_woman_woman_girl \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 family_woman_woman_girl_boy \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 family_woman_woman_boy_boy \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 family_woman_woman_girl_girl \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 family_man_boy \ud83d\udc68\u200d\ud83d\udc66 family_man_boy_boy \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 family_man_girl \ud83d\udc68\u200d\ud83d\udc67 family_man_girl_boy \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 family_man_girl_girl \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 family_woman_boy \ud83d\udc69\u200d\ud83d\udc66 family_woman_boy_boy \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 family_woman_girl \ud83d\udc69\u200d\ud83d\udc67 family_woman_girl_boy \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 family_woman_girl_girl \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 speaking_head \ud83d\udde3\ufe0f bust_in_silhouette \ud83d\udc64 busts_in_silhouette \ud83d\udc65 people_hugging \ud83e\udec2 footprints \ud83d\udc63 monkey_face \ud83d\udc35 monkey \ud83d\udc12 gorilla \ud83e\udd8d orangutan \ud83e\udda7 dog \ud83d\udc36 dog2 \ud83d\udc15 guide_dog \ud83e\uddae service_dog \ud83d\udc15\u200d\ud83e\uddba poodle \ud83d\udc29 wolf \ud83d\udc3a fox_face \ud83e\udd8a raccoon \ud83e\udd9d cat \ud83d\udc31 cat2 \ud83d\udc08 black_cat \ud83d\udc08\u200d\u2b1b lion \ud83e\udd81 tiger \ud83d\udc2f tiger2 \ud83d\udc05 leopard \ud83d\udc06 horse \ud83d\udc34 racehorse \ud83d\udc0e unicorn \ud83e\udd84 zebra \ud83e\udd93 deer \ud83e\udd8c bison \ud83e\uddac cow \ud83d\udc2e ox \ud83d\udc02 water_buffalo \ud83d\udc03 cow2 \ud83d\udc04 pig \ud83d\udc37 pig2 \ud83d\udc16 boar \ud83d\udc17 pig_nose \ud83d\udc3d ram \ud83d\udc0f sheep \ud83d\udc11 goat \ud83d\udc10 dromedary_camel \ud83d\udc2a camel \ud83d\udc2b llama \ud83e\udd99 giraffe \ud83e\udd92 elephant \ud83d\udc18 mammoth \ud83e\udda3 rhinoceros \ud83e\udd8f hippopotamus \ud83e\udd9b mouse \ud83d\udc2d mouse2 \ud83d\udc01 rat \ud83d\udc00 hamster \ud83d\udc39 rabbit \ud83d\udc30 rabbit2 \ud83d\udc07 chipmunk \ud83d\udc3f\ufe0f beaver \ud83e\uddab hedgehog \ud83e\udd94 bat \ud83e\udd87 bear \ud83d\udc3b polar_bear \ud83d\udc3b\u200d\u2744\ufe0f koala \ud83d\udc28 panda_face \ud83d\udc3c sloth \ud83e\udda5 otter \ud83e\udda6 skunk \ud83e\udda8 kangaroo \ud83e\udd98 badger \ud83e\udda1 feet \ud83d\udc3e turkey \ud83e\udd83 chicken \ud83d\udc14 rooster \ud83d\udc13 hatching_chick \ud83d\udc23 baby_chick \ud83d\udc24 hatched_chick \ud83d\udc25 bird \ud83d\udc26 penguin \ud83d\udc27 dove \ud83d\udd4a\ufe0f eagle \ud83e\udd85 duck \ud83e\udd86 swan \ud83e\udda2 owl \ud83e\udd89 dodo \ud83e\udda4 feather \ud83e\udeb6 flamingo \ud83e\udda9 peacock \ud83e\udd9a parrot \ud83e\udd9c frog \ud83d\udc38 crocodile \ud83d\udc0a turtle \ud83d\udc22 lizard \ud83e\udd8e snake \ud83d\udc0d dragon_face \ud83d\udc32 dragon \ud83d\udc09 sauropod \ud83e\udd95 t-rex \ud83e\udd96 whale \ud83d\udc33 whale2 \ud83d\udc0b dolphin \ud83d\udc2c seal \ud83e\uddad fish \ud83d\udc1f tropical_fish \ud83d\udc20 blowfish \ud83d\udc21 shark \ud83e\udd88 octopus \ud83d\udc19 Tag Emoji octopus \ud83d\udc19 shell \ud83d\udc1a snail \ud83d\udc0c butterfly \ud83e\udd8b bug \ud83d\udc1b ant \ud83d\udc1c bee \ud83d\udc1d beetle \ud83e\udeb2 lady_beetle \ud83d\udc1e cricket \ud83e\udd97 cockroach \ud83e\udeb3 spider \ud83d\udd77\ufe0f spider_web \ud83d\udd78\ufe0f scorpion \ud83e\udd82 mosquito \ud83e\udd9f fly \ud83e\udeb0 worm \ud83e\udeb1 microbe \ud83e\udda0 bouquet \ud83d\udc90 cherry_blossom \ud83c\udf38 white_flower \ud83d\udcae rosette \ud83c\udff5\ufe0f rose \ud83c\udf39 wilted_flower \ud83e\udd40 hibiscus \ud83c\udf3a sunflower \ud83c\udf3b blossom \ud83c\udf3c tulip \ud83c\udf37 seedling \ud83c\udf31 potted_plant \ud83e\udeb4 evergreen_tree \ud83c\udf32 deciduous_tree \ud83c\udf33 palm_tree \ud83c\udf34 cactus \ud83c\udf35 ear_of_rice \ud83c\udf3e herb \ud83c\udf3f shamrock \u2618\ufe0f four_leaf_clover \ud83c\udf40 maple_leaf \ud83c\udf41 fallen_leaf \ud83c\udf42 leaves \ud83c\udf43 grapes \ud83c\udf47 melon \ud83c\udf48 watermelon \ud83c\udf49 tangerine \ud83c\udf4a lemon \ud83c\udf4b banana \ud83c\udf4c pineapple \ud83c\udf4d mango \ud83e\udd6d apple \ud83c\udf4e green_apple \ud83c\udf4f pear \ud83c\udf50 peach \ud83c\udf51 cherries \ud83c\udf52 strawberry \ud83c\udf53 blueberries \ud83e\uded0 kiwi_fruit \ud83e\udd5d tomato \ud83c\udf45 olive \ud83e\uded2 coconut \ud83e\udd65 avocado \ud83e\udd51 eggplant \ud83c\udf46 potato \ud83e\udd54 carrot \ud83e\udd55 corn \ud83c\udf3d hot_pepper \ud83c\udf36\ufe0f bell_pepper \ud83e\uded1 cucumber \ud83e\udd52 leafy_green \ud83e\udd6c broccoli \ud83e\udd66 garlic \ud83e\uddc4 onion \ud83e\uddc5 mushroom \ud83c\udf44 peanuts \ud83e\udd5c chestnut \ud83c\udf30 bread \ud83c\udf5e croissant \ud83e\udd50 baguette_bread \ud83e\udd56 flatbread \ud83e\uded3 pretzel \ud83e\udd68 bagel \ud83e\udd6f pancakes \ud83e\udd5e waffle \ud83e\uddc7 cheese \ud83e\uddc0 meat_on_bone \ud83c\udf56 poultry_leg \ud83c\udf57 cut_of_meat \ud83e\udd69 bacon \ud83e\udd53 hamburger \ud83c\udf54 fries \ud83c\udf5f pizza \ud83c\udf55 hotdog \ud83c\udf2d sandwich \ud83e\udd6a taco \ud83c\udf2e burrito \ud83c\udf2f tamale \ud83e\uded4 stuffed_flatbread \ud83e\udd59 falafel \ud83e\uddc6 egg \ud83e\udd5a fried_egg \ud83c\udf73 shallow_pan_of_food \ud83e\udd58 stew \ud83c\udf72 fondue \ud83e\uded5 bowl_with_spoon \ud83e\udd63 green_salad \ud83e\udd57 popcorn \ud83c\udf7f butter \ud83e\uddc8 salt \ud83e\uddc2 canned_food \ud83e\udd6b bento \ud83c\udf71 rice_cracker \ud83c\udf58 rice_ball \ud83c\udf59 rice \ud83c\udf5a curry \ud83c\udf5b ramen \ud83c\udf5c spaghetti \ud83c\udf5d sweet_potato \ud83c\udf60 oden \ud83c\udf62 sushi \ud83c\udf63 fried_shrimp \ud83c\udf64 fish_cake \ud83c\udf65 moon_cake \ud83e\udd6e dango \ud83c\udf61 dumpling \ud83e\udd5f fortune_cookie \ud83e\udd60 takeout_box \ud83e\udd61 crab \ud83e\udd80 lobster \ud83e\udd9e shrimp \ud83e\udd90 squid \ud83e\udd91 oyster \ud83e\uddaa icecream \ud83c\udf66 shaved_ice \ud83c\udf67 ice_cream \ud83c\udf68 doughnut \ud83c\udf69 cookie \ud83c\udf6a birthday \ud83c\udf82 cake \ud83c\udf70 cupcake \ud83e\uddc1 pie \ud83e\udd67 chocolate_bar \ud83c\udf6b candy \ud83c\udf6c lollipop \ud83c\udf6d custard \ud83c\udf6e honey_pot \ud83c\udf6f baby_bottle \ud83c\udf7c milk_glass \ud83e\udd5b coffee \u2615 teapot \ud83e\uded6 tea \ud83c\udf75 sake \ud83c\udf76 champagne \ud83c\udf7e wine_glass \ud83c\udf77 cocktail \ud83c\udf78 tropical_drink \ud83c\udf79 beer \ud83c\udf7a beers \ud83c\udf7b clinking_glasses \ud83e\udd42 tumbler_glass \ud83e\udd43 cup_with_straw \ud83e\udd64 bubble_tea \ud83e\uddcb beverage_box \ud83e\uddc3 mate \ud83e\uddc9 ice_cube \ud83e\uddca chopsticks \ud83e\udd62 plate_with_cutlery \ud83c\udf7d\ufe0f fork_and_knife \ud83c\udf74 spoon \ud83e\udd44 hocho \ud83d\udd2a amphora \ud83c\udffa earth_africa \ud83c\udf0d earth_americas \ud83c\udf0e earth_asia \ud83c\udf0f globe_with_meridians \ud83c\udf10 world_map \ud83d\uddfa\ufe0f japan \ud83d\uddfe compass \ud83e\udded mountain_snow \ud83c\udfd4\ufe0f mountain \u26f0\ufe0f volcano \ud83c\udf0b mount_fuji \ud83d\uddfb camping \ud83c\udfd5\ufe0f beach_umbrella \ud83c\udfd6\ufe0f desert \ud83c\udfdc\ufe0f desert_island \ud83c\udfdd\ufe0f national_park \ud83c\udfde\ufe0f stadium \ud83c\udfdf\ufe0f classical_building \ud83c\udfdb\ufe0f building_construction \ud83c\udfd7\ufe0f bricks \ud83e\uddf1 rock \ud83e\udea8 wood \ud83e\udeb5 hut \ud83d\uded6 houses \ud83c\udfd8\ufe0f derelict_house \ud83c\udfda\ufe0f house \ud83c\udfe0 house_with_garden \ud83c\udfe1 office \ud83c\udfe2 post_office \ud83c\udfe3 european_post_office \ud83c\udfe4 hospital \ud83c\udfe5 bank \ud83c\udfe6 hotel \ud83c\udfe8 love_hotel \ud83c\udfe9 convenience_store \ud83c\udfea school \ud83c\udfeb department_store \ud83c\udfec factory \ud83c\udfed japanese_castle \ud83c\udfef european_castle \ud83c\udff0 wedding \ud83d\udc92 tokyo_tower \ud83d\uddfc statue_of_liberty \ud83d\uddfd church \u26ea mosque \ud83d\udd4c hindu_temple \ud83d\uded5 synagogue \ud83d\udd4d shinto_shrine \u26e9\ufe0f kaaba \ud83d\udd4b fountain \u26f2 tent \u26fa foggy \ud83c\udf01 night_with_stars \ud83c\udf03 cityscape \ud83c\udfd9\ufe0f sunrise_over_mountains \ud83c\udf04 sunrise \ud83c\udf05 city_sunset \ud83c\udf06 city_sunrise \ud83c\udf07 bridge_at_night \ud83c\udf09 hotsprings \u2668\ufe0f carousel_horse \ud83c\udfa0 ferris_wheel \ud83c\udfa1 roller_coaster \ud83c\udfa2 barber \ud83d\udc88 circus_tent \ud83c\udfaa steam_locomotive \ud83d\ude82 railway_car \ud83d\ude83 bullettrain_side \ud83d\ude84 bullettrain_front \ud83d\ude85 train2 \ud83d\ude86 metro \ud83d\ude87 light_rail \ud83d\ude88 station \ud83d\ude89 tram \ud83d\ude8a monorail \ud83d\ude9d mountain_railway \ud83d\ude9e train \ud83d\ude8b bus \ud83d\ude8c oncoming_bus \ud83d\ude8d trolleybus \ud83d\ude8e minibus \ud83d\ude90 ambulance \ud83d\ude91 fire_engine \ud83d\ude92 police_car \ud83d\ude93 oncoming_police_car \ud83d\ude94 taxi \ud83d\ude95 oncoming_taxi \ud83d\ude96 car \ud83d\ude97 oncoming_automobile \ud83d\ude98 blue_car \ud83d\ude99 pickup_truck \ud83d\udefb truck \ud83d\ude9a articulated_lorry \ud83d\ude9b tractor \ud83d\ude9c racing_car \ud83c\udfce\ufe0f motorcycle \ud83c\udfcd\ufe0f motor_scooter \ud83d\udef5 manual_wheelchair \ud83e\uddbd motorized_wheelchair \ud83e\uddbc auto_rickshaw \ud83d\udefa bike \ud83d\udeb2 kick_scooter \ud83d\udef4 skateboard \ud83d\udef9 roller_skate \ud83d\udefc busstop \ud83d\ude8f motorway \ud83d\udee3\ufe0f railway_track \ud83d\udee4\ufe0f oil_drum \ud83d\udee2\ufe0f fuelpump \u26fd rotating_light \ud83d\udea8 traffic_light \ud83d\udea5 vertical_traffic_light \ud83d\udea6 stop_sign \ud83d\uded1 construction \ud83d\udea7 anchor \u2693 boat \u26f5 canoe \ud83d\udef6 speedboat \ud83d\udea4 passenger_ship \ud83d\udef3\ufe0f ferry \u26f4\ufe0f motor_boat \ud83d\udee5\ufe0f ship \ud83d\udea2 airplane \u2708\ufe0f small_airplane \ud83d\udee9\ufe0f flight_departure \ud83d\udeeb flight_arrival \ud83d\udeec parachute \ud83e\ude82 seat \ud83d\udcba helicopter \ud83d\ude81 suspension_railway \ud83d\ude9f mountain_cableway \ud83d\udea0 aerial_tramway \ud83d\udea1 artificial_satellite \ud83d\udef0\ufe0f rocket \ud83d\ude80 flying_saucer \ud83d\udef8 bellhop_bell \ud83d\udece\ufe0f luggage \ud83e\uddf3 hourglass \u231b hourglass_flowing_sand \u23f3 watch \u231a alarm_clock \u23f0 stopwatch \u23f1\ufe0f timer_clock \u23f2\ufe0f mantelpiece_clock \ud83d\udd70\ufe0f clock12 \ud83d\udd5b clock1230 \ud83d\udd67 clock1 \ud83d\udd50 clock130 \ud83d\udd5c clock2 \ud83d\udd51 clock230 \ud83d\udd5d clock3 \ud83d\udd52 clock330 \ud83d\udd5e clock4 \ud83d\udd53 clock430 \ud83d\udd5f clock5 \ud83d\udd54 clock530 \ud83d\udd60 clock6 \ud83d\udd55 clock630 \ud83d\udd61 clock7 \ud83d\udd56 clock730 \ud83d\udd62 clock8 \ud83d\udd57 clock830 \ud83d\udd63 clock9 \ud83d\udd58 clock930 \ud83d\udd64 clock10 \ud83d\udd59 clock1030 \ud83d\udd65 clock11 \ud83d\udd5a clock1130 \ud83d\udd66 new_moon \ud83c\udf11 waxing_crescent_moon \ud83c\udf12 first_quarter_moon \ud83c\udf13 moon \ud83c\udf14 full_moon \ud83c\udf15 waning_gibbous_moon \ud83c\udf16 last_quarter_moon \ud83c\udf17 waning_crescent_moon \ud83c\udf18 crescent_moon \ud83c\udf19 new_moon_with_face \ud83c\udf1a first_quarter_moon_with_face \ud83c\udf1b last_quarter_moon_with_face \ud83c\udf1c thermometer \ud83c\udf21\ufe0f sunny \u2600\ufe0f full_moon_with_face \ud83c\udf1d sun_with_face \ud83c\udf1e ringed_planet \ud83e\ude90 star \u2b50 star2 \ud83c\udf1f stars \ud83c\udf20 milky_way \ud83c\udf0c cloud \u2601\ufe0f partly_sunny \u26c5 cloud_with_lightning_and_rain \u26c8\ufe0f sun_behind_small_cloud \ud83c\udf24\ufe0f sun_behind_large_cloud \ud83c\udf25\ufe0f sun_behind_rain_cloud \ud83c\udf26\ufe0f cloud_with_rain \ud83c\udf27\ufe0f cloud_with_snow \ud83c\udf28\ufe0f cloud_with_lightning \ud83c\udf29\ufe0f tornado \ud83c\udf2a\ufe0f fog \ud83c\udf2b\ufe0f wind_face \ud83c\udf2c\ufe0f cyclone \ud83c\udf00 rainbow \ud83c\udf08 closed_umbrella \ud83c\udf02 open_umbrella \u2602\ufe0f umbrella \u2614 parasol_on_ground \u26f1\ufe0f zap \u26a1 snowflake \u2744\ufe0f snowman_with_snow \u2603\ufe0f snowman \u26c4 comet \u2604\ufe0f fire \ud83d\udd25 droplet \ud83d\udca7 ocean \ud83c\udf0a jack_o_lantern \ud83c\udf83 christmas_tree \ud83c\udf84 fireworks \ud83c\udf86 sparkler \ud83c\udf87 firecracker \ud83e\udde8 sparkles \u2728 balloon \ud83c\udf88 tada \ud83c\udf89 confetti_ball \ud83c\udf8a tanabata_tree \ud83c\udf8b bamboo \ud83c\udf8d dolls \ud83c\udf8e flags \ud83c\udf8f wind_chime \ud83c\udf90 rice_scene \ud83c\udf91 red_envelope \ud83e\udde7 ribbon \ud83c\udf80 gift \ud83c\udf81 reminder_ribbon \ud83c\udf97\ufe0f tickets \ud83c\udf9f\ufe0f ticket \ud83c\udfab medal_military \ud83c\udf96\ufe0f trophy \ud83c\udfc6 medal_sports \ud83c\udfc5 1st_place_medal \ud83e\udd47 2nd_place_medal \ud83e\udd48 3rd_place_medal \ud83e\udd49 soccer \u26bd baseball \u26be softball \ud83e\udd4e basketball \ud83c\udfc0 volleyball \ud83c\udfd0 football \ud83c\udfc8 rugby_football \ud83c\udfc9 tennis \ud83c\udfbe flying_disc \ud83e\udd4f bowling \ud83c\udfb3 cricket_game \ud83c\udfcf field_hockey \ud83c\udfd1 ice_hockey \ud83c\udfd2 lacrosse \ud83e\udd4d ping_pong \ud83c\udfd3 badminton \ud83c\udff8 boxing_glove \ud83e\udd4a martial_arts_uniform \ud83e\udd4b goal_net \ud83e\udd45 golf \u26f3 ice_skate \u26f8\ufe0f fishing_pole_and_fish \ud83c\udfa3 diving_mask \ud83e\udd3f running_shirt_with_sash \ud83c\udfbd ski \ud83c\udfbf sled \ud83d\udef7 curling_stone \ud83e\udd4c dart \ud83c\udfaf yo_yo \ud83e\ude80 kite \ud83e\ude81 8ball \ud83c\udfb1 crystal_ball \ud83d\udd2e magic_wand \ud83e\ude84 nazar_amulet \ud83e\uddff video_game \ud83c\udfae joystick \ud83d\udd79\ufe0f slot_machine \ud83c\udfb0 game_die \ud83c\udfb2 jigsaw \ud83e\udde9 teddy_bear \ud83e\uddf8 pinata \ud83e\ude85 nesting_dolls \ud83e\ude86 spades \u2660\ufe0f hearts \u2665\ufe0f diamonds \u2666\ufe0f clubs \u2663\ufe0f chess_pawn \u265f\ufe0f black_joker \ud83c\udccf mahjong \ud83c\udc04 flower_playing_cards \ud83c\udfb4 performing_arts \ud83c\udfad framed_picture \ud83d\uddbc\ufe0f art \ud83c\udfa8 thread \ud83e\uddf5 sewing_needle \ud83e\udea1 yarn \ud83e\uddf6 knot \ud83e\udea2 eyeglasses \ud83d\udc53 dark_sunglasses \ud83d\udd76\ufe0f goggles \ud83e\udd7d lab_coat \ud83e\udd7c safety_vest \ud83e\uddba necktie \ud83d\udc54 shirt \ud83d\udc55 jeans \ud83d\udc56 scarf \ud83e\udde3 gloves \ud83e\udde4 coat \ud83e\udde5 socks \ud83e\udde6 dress \ud83d\udc57 kimono \ud83d\udc58 sari \ud83e\udd7b one_piece_swimsuit \ud83e\ude71 swim_brief \ud83e\ude72 shorts \ud83e\ude73 bikini \ud83d\udc59 womans_clothes \ud83d\udc5a purse \ud83d\udc5b handbag \ud83d\udc5c pouch \ud83d\udc5d shopping \ud83d\udecd\ufe0f school_satchel \ud83c\udf92 thong_sandal \ud83e\ude74 mans_shoe \ud83d\udc5e athletic_shoe \ud83d\udc5f hiking_boot \ud83e\udd7e flat_shoe \ud83e\udd7f high_heel \ud83d\udc60 sandal \ud83d\udc61 ballet_shoes \ud83e\ude70 boot \ud83d\udc62 crown \ud83d\udc51 womans_hat \ud83d\udc52 tophat \ud83c\udfa9 mortar_board \ud83c\udf93 billed_cap \ud83e\udde2 military_helmet \ud83e\ude96 rescue_worker_helmet \u26d1\ufe0f prayer_beads \ud83d\udcff lipstick \ud83d\udc84 ring \ud83d\udc8d gem \ud83d\udc8e mute \ud83d\udd07 speaker \ud83d\udd08 sound \ud83d\udd09 loud_sound \ud83d\udd0a loudspeaker \ud83d\udce2 mega \ud83d\udce3 postal_horn \ud83d\udcef bell \ud83d\udd14 no_bell \ud83d\udd15 musical_score \ud83c\udfbc musical_note \ud83c\udfb5 notes \ud83c\udfb6 studio_microphone \ud83c\udf99\ufe0f level_slider \ud83c\udf9a\ufe0f control_knobs \ud83c\udf9b\ufe0f microphone \ud83c\udfa4 headphones \ud83c\udfa7 radio \ud83d\udcfb saxophone \ud83c\udfb7 accordion \ud83e\ude97 guitar \ud83c\udfb8 musical_keyboard \ud83c\udfb9 trumpet \ud83c\udfba violin \ud83c\udfbb banjo \ud83e\ude95 drum \ud83e\udd41 long_drum \ud83e\ude98 iphone \ud83d\udcf1 calling \ud83d\udcf2 phone \u260e\ufe0f telephone_receiver \ud83d\udcde pager \ud83d\udcdf fax \ud83d\udce0 battery \ud83d\udd0b electric_plug \ud83d\udd0c computer \ud83d\udcbb desktop_computer \ud83d\udda5\ufe0f printer \ud83d\udda8\ufe0f keyboard \u2328\ufe0f computer_mouse \ud83d\uddb1\ufe0f trackball \ud83d\uddb2\ufe0f minidisc \ud83d\udcbd floppy_disk \ud83d\udcbe cd \ud83d\udcbf dvd \ud83d\udcc0 abacus \ud83e\uddee movie_camera \ud83c\udfa5 film_strip \ud83c\udf9e\ufe0f film_projector \ud83d\udcfd\ufe0f clapper \ud83c\udfac tv \ud83d\udcfa camera \ud83d\udcf7 camera_flash \ud83d\udcf8 video_camera \ud83d\udcf9 vhs \ud83d\udcfc mag \ud83d\udd0d mag_right \ud83d\udd0e candle \ud83d\udd6f\ufe0f bulb \ud83d\udca1 flashlight \ud83d\udd26 izakaya_lantern \ud83c\udfee diya_lamp \ud83e\ude94 notebook_with_decorative_cover \ud83d\udcd4 closed_book \ud83d\udcd5 book \ud83d\udcd6 green_book \ud83d\udcd7 blue_book \ud83d\udcd8 orange_book \ud83d\udcd9 books \ud83d\udcda notebook \ud83d\udcd3 ledger \ud83d\udcd2 page_with_curl \ud83d\udcc3 scroll \ud83d\udcdc page_facing_up \ud83d\udcc4 newspaper \ud83d\udcf0 newspaper_roll \ud83d\uddde\ufe0f bookmark_tabs \ud83d\udcd1 bookmark \ud83d\udd16 label \ud83c\udff7\ufe0f moneybag \ud83d\udcb0 coin \ud83e\ude99 yen \ud83d\udcb4 dollar \ud83d\udcb5 euro \ud83d\udcb6 pound \ud83d\udcb7 money_with_wings \ud83d\udcb8 credit_card \ud83d\udcb3 receipt \ud83e\uddfe chart \ud83d\udcb9 envelope \u2709\ufe0f email \ud83d\udce7 Tag Emoji email \ud83d\udce7 incoming_envelope \ud83d\udce8 envelope_with_arrow \ud83d\udce9 outbox_tray \ud83d\udce4 inbox_tray \ud83d\udce5 package \ud83d\udce6 mailbox \ud83d\udceb mailbox_closed \ud83d\udcea mailbox_with_mail \ud83d\udcec mailbox_with_no_mail \ud83d\udced postbox \ud83d\udcee ballot_box \ud83d\uddf3\ufe0f pencil2 \u270f\ufe0f black_nib \u2712\ufe0f fountain_pen \ud83d\udd8b\ufe0f pen \ud83d\udd8a\ufe0f paintbrush \ud83d\udd8c\ufe0f crayon \ud83d\udd8d\ufe0f memo \ud83d\udcdd briefcase \ud83d\udcbc file_folder \ud83d\udcc1 open_file_folder \ud83d\udcc2 card_index_dividers \ud83d\uddc2\ufe0f date \ud83d\udcc5 calendar \ud83d\udcc6 spiral_notepad \ud83d\uddd2\ufe0f spiral_calendar \ud83d\uddd3\ufe0f card_index \ud83d\udcc7 chart_with_upwards_trend \ud83d\udcc8 chart_with_downwards_trend \ud83d\udcc9 bar_chart \ud83d\udcca clipboard \ud83d\udccb pushpin \ud83d\udccc round_pushpin \ud83d\udccd paperclip \ud83d\udcce paperclips \ud83d\udd87\ufe0f straight_ruler \ud83d\udccf triangular_ruler \ud83d\udcd0 scissors \u2702\ufe0f card_file_box \ud83d\uddc3\ufe0f file_cabinet \ud83d\uddc4\ufe0f wastebasket \ud83d\uddd1\ufe0f lock \ud83d\udd12 unlock \ud83d\udd13 lock_with_ink_pen \ud83d\udd0f closed_lock_with_key \ud83d\udd10 key \ud83d\udd11 old_key \ud83d\udddd\ufe0f hammer \ud83d\udd28 axe \ud83e\ude93 pick \u26cf\ufe0f hammer_and_pick \u2692\ufe0f hammer_and_wrench \ud83d\udee0\ufe0f dagger \ud83d\udde1\ufe0f crossed_swords \u2694\ufe0f gun \ud83d\udd2b boomerang \ud83e\ude83 bow_and_arrow \ud83c\udff9 shield \ud83d\udee1\ufe0f carpentry_saw \ud83e\ude9a wrench \ud83d\udd27 screwdriver \ud83e\ude9b nut_and_bolt \ud83d\udd29 gear \u2699\ufe0f clamp \ud83d\udddc\ufe0f balance_scale \u2696\ufe0f probing_cane \ud83e\uddaf link \ud83d\udd17 chains \u26d3\ufe0f hook \ud83e\ude9d toolbox \ud83e\uddf0 magnet \ud83e\uddf2 ladder \ud83e\ude9c alembic \u2697\ufe0f test_tube \ud83e\uddea petri_dish \ud83e\uddeb dna \ud83e\uddec microscope \ud83d\udd2c telescope \ud83d\udd2d satellite \ud83d\udce1 syringe \ud83d\udc89 drop_of_blood \ud83e\ude78 pill \ud83d\udc8a adhesive_bandage \ud83e\ude79 stethoscope \ud83e\ude7a door \ud83d\udeaa elevator \ud83d\uded7 mirror \ud83e\ude9e window \ud83e\ude9f bed \ud83d\udecf\ufe0f couch_and_lamp \ud83d\udecb\ufe0f chair \ud83e\ude91 toilet \ud83d\udebd plunger \ud83e\udea0 shower \ud83d\udebf bathtub \ud83d\udec1 mouse_trap \ud83e\udea4 razor \ud83e\ude92 lotion_bottle \ud83e\uddf4 safety_pin \ud83e\uddf7 broom \ud83e\uddf9 basket \ud83e\uddfa roll_of_paper \ud83e\uddfb bucket \ud83e\udea3 soap \ud83e\uddfc toothbrush \ud83e\udea5 sponge \ud83e\uddfd fire_extinguisher \ud83e\uddef shopping_cart \ud83d\uded2 smoking \ud83d\udeac coffin \u26b0\ufe0f headstone \ud83e\udea6 funeral_urn \u26b1\ufe0f moyai \ud83d\uddff placard \ud83e\udea7 atm \ud83c\udfe7 put_litter_in_its_place \ud83d\udeae potable_water \ud83d\udeb0 wheelchair \u267f mens \ud83d\udeb9 womens \ud83d\udeba restroom \ud83d\udebb baby_symbol \ud83d\udebc wc \ud83d\udebe passport_control \ud83d\udec2 customs \ud83d\udec3 baggage_claim \ud83d\udec4 left_luggage \ud83d\udec5 warning \u26a0\ufe0f children_crossing \ud83d\udeb8 no_entry \u26d4 no_entry_sign \ud83d\udeab no_bicycles \ud83d\udeb3 no_smoking \ud83d\udead do_not_litter \ud83d\udeaf non-potable_water \ud83d\udeb1 no_pedestrians \ud83d\udeb7 no_mobile_phones \ud83d\udcf5 underage \ud83d\udd1e radioactive \u2622\ufe0f biohazard \u2623\ufe0f arrow_up \u2b06\ufe0f arrow_upper_right \u2197\ufe0f arrow_right \u27a1\ufe0f arrow_lower_right \u2198\ufe0f arrow_down \u2b07\ufe0f arrow_lower_left \u2199\ufe0f arrow_left \u2b05\ufe0f arrow_upper_left \u2196\ufe0f arrow_up_down \u2195\ufe0f left_right_arrow \u2194\ufe0f leftwards_arrow_with_hook \u21a9\ufe0f arrow_right_hook \u21aa\ufe0f arrow_heading_up \u2934\ufe0f arrow_heading_down \u2935\ufe0f arrows_clockwise \ud83d\udd03 arrows_counterclockwise \ud83d\udd04 back \ud83d\udd19 end \ud83d\udd1a on \ud83d\udd1b soon \ud83d\udd1c top \ud83d\udd1d place_of_worship \ud83d\uded0 atom_symbol \u269b\ufe0f om \ud83d\udd49\ufe0f star_of_david \u2721\ufe0f wheel_of_dharma \u2638\ufe0f yin_yang \u262f\ufe0f latin_cross \u271d\ufe0f orthodox_cross \u2626\ufe0f star_and_crescent \u262a\ufe0f peace_symbol \u262e\ufe0f menorah \ud83d\udd4e six_pointed_star \ud83d\udd2f aries \u2648 taurus \u2649 gemini \u264a cancer \u264b leo \u264c virgo \u264d libra \u264e scorpius \u264f sagittarius \u2650 capricorn \u2651 aquarius \u2652 pisces \u2653 ophiuchus \u26ce twisted_rightwards_arrows \ud83d\udd00 repeat \ud83d\udd01 repeat_one \ud83d\udd02 arrow_forward \u25b6\ufe0f fast_forward \u23e9 next_track_button \u23ed\ufe0f play_or_pause_button \u23ef\ufe0f arrow_backward \u25c0\ufe0f rewind \u23ea previous_track_button \u23ee\ufe0f arrow_up_small \ud83d\udd3c arrow_double_up \u23eb arrow_down_small \ud83d\udd3d arrow_double_down \u23ec pause_button \u23f8\ufe0f stop_button \u23f9\ufe0f record_button \u23fa\ufe0f eject_button \u23cf\ufe0f cinema \ud83c\udfa6 low_brightness \ud83d\udd05 high_brightness \ud83d\udd06 signal_strength \ud83d\udcf6 vibration_mode \ud83d\udcf3 mobile_phone_off \ud83d\udcf4 female_sign \u2640\ufe0f male_sign \u2642\ufe0f transgender_symbol \u26a7\ufe0f heavy_multiplication_x \u2716\ufe0f heavy_plus_sign \u2795 heavy_minus_sign \u2796 heavy_division_sign \u2797 infinity \u267e\ufe0f bangbang \u203c\ufe0f interrobang \u2049\ufe0f question \u2753 grey_question \u2754 grey_exclamation \u2755 exclamation \u2757 wavy_dash \u3030\ufe0f currency_exchange \ud83d\udcb1 heavy_dollar_sign \ud83d\udcb2 medical_symbol \u2695\ufe0f recycle \u267b\ufe0f fleur_de_lis \u269c\ufe0f trident \ud83d\udd31 name_badge \ud83d\udcdb beginner \ud83d\udd30 o \u2b55 white_check_mark \u2705 ballot_box_with_check \u2611\ufe0f heavy_check_mark \u2714\ufe0f x \u274c negative_squared_cross_mark \u274e curly_loop \u27b0 loop \u27bf part_alternation_mark \u303d\ufe0f eight_spoked_asterisk \u2733\ufe0f eight_pointed_black_star \u2734\ufe0f sparkle \u2747\ufe0f copyright \u00a9\ufe0f registered \u00ae\ufe0f tm \u2122\ufe0f hash #\ufe0f\u20e3 asterisk *\ufe0f\u20e3 zero 0\ufe0f\u20e3 one 1\ufe0f\u20e3 two 2\ufe0f\u20e3 three 3\ufe0f\u20e3 four 4\ufe0f\u20e3 five 5\ufe0f\u20e3 six 6\ufe0f\u20e3 seven 7\ufe0f\u20e3 eight 8\ufe0f\u20e3 nine 9\ufe0f\u20e3 keycap_ten \ud83d\udd1f capital_abcd \ud83d\udd20 abcd \ud83d\udd21 1234 \ud83d\udd22 symbols \ud83d\udd23 abc \ud83d\udd24 a \ud83c\udd70\ufe0f ab \ud83c\udd8e b \ud83c\udd71\ufe0f cl \ud83c\udd91 cool \ud83c\udd92 free \ud83c\udd93 information_source \u2139\ufe0f id \ud83c\udd94 m \u24c2\ufe0f new \ud83c\udd95 ng \ud83c\udd96 o2 \ud83c\udd7e\ufe0f ok \ud83c\udd97 parking \ud83c\udd7f\ufe0f sos \ud83c\udd98 up \ud83c\udd99 vs \ud83c\udd9a koko \ud83c\ude01 sa \ud83c\ude02\ufe0f u6708 \ud83c\ude37\ufe0f u6709 \ud83c\ude36 u6307 \ud83c\ude2f ideograph_advantage \ud83c\ude50 u5272 \ud83c\ude39 u7121 \ud83c\ude1a u7981 \ud83c\ude32 accept \ud83c\ude51 u7533 \ud83c\ude38 u5408 \ud83c\ude34 u7a7a \ud83c\ude33 congratulations \u3297\ufe0f secret \u3299\ufe0f u55b6 \ud83c\ude3a u6e80 \ud83c\ude35 red_circle \ud83d\udd34 orange_circle \ud83d\udfe0 yellow_circle \ud83d\udfe1 green_circle \ud83d\udfe2 large_blue_circle \ud83d\udd35 purple_circle \ud83d\udfe3 brown_circle \ud83d\udfe4 black_circle \u26ab white_circle \u26aa red_square \ud83d\udfe5 orange_square \ud83d\udfe7 yellow_square \ud83d\udfe8 green_square \ud83d\udfe9 blue_square \ud83d\udfe6 purple_square \ud83d\udfea brown_square \ud83d\udfeb black_large_square \u2b1b white_large_square \u2b1c black_medium_square \u25fc\ufe0f white_medium_square \u25fb\ufe0f black_medium_small_square \u25fe white_medium_small_square \u25fd black_small_square \u25aa\ufe0f white_small_square \u25ab\ufe0f large_orange_diamond \ud83d\udd36 large_blue_diamond \ud83d\udd37 small_orange_diamond \ud83d\udd38 small_blue_diamond \ud83d\udd39 small_red_triangle \ud83d\udd3a small_red_triangle_down \ud83d\udd3b diamond_shape_with_a_dot_inside \ud83d\udca0 radio_button \ud83d\udd18 white_square_button \ud83d\udd33 black_square_button \ud83d\udd32 checkered_flag \ud83c\udfc1 triangular_flag_on_post \ud83d\udea9 crossed_flags \ud83c\udf8c black_flag \ud83c\udff4 white_flag \ud83c\udff3\ufe0f rainbow_flag \ud83c\udff3\ufe0f\u200d\ud83c\udf08 transgender_flag \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f pirate_flag \ud83c\udff4\u200d\u2620\ufe0f ascension_island \ud83c\udde6\ud83c\udde8 andorra \ud83c\udde6\ud83c\udde9 united_arab_emirates \ud83c\udde6\ud83c\uddea afghanistan \ud83c\udde6\ud83c\uddeb antigua_barbuda \ud83c\udde6\ud83c\uddec anguilla \ud83c\udde6\ud83c\uddee albania \ud83c\udde6\ud83c\uddf1 armenia \ud83c\udde6\ud83c\uddf2 angola \ud83c\udde6\ud83c\uddf4 antarctica \ud83c\udde6\ud83c\uddf6 argentina \ud83c\udde6\ud83c\uddf7 american_samoa \ud83c\udde6\ud83c\uddf8 austria \ud83c\udde6\ud83c\uddf9 australia \ud83c\udde6\ud83c\uddfa aruba \ud83c\udde6\ud83c\uddfc aland_islands \ud83c\udde6\ud83c\uddfd azerbaijan \ud83c\udde6\ud83c\uddff bosnia_herzegovina \ud83c\udde7\ud83c\udde6 barbados \ud83c\udde7\ud83c\udde7 bangladesh \ud83c\udde7\ud83c\udde9 belgium \ud83c\udde7\ud83c\uddea burkina_faso \ud83c\udde7\ud83c\uddeb bulgaria \ud83c\udde7\ud83c\uddec bahrain \ud83c\udde7\ud83c\udded burundi \ud83c\udde7\ud83c\uddee benin \ud83c\udde7\ud83c\uddef st_barthelemy \ud83c\udde7\ud83c\uddf1 bermuda \ud83c\udde7\ud83c\uddf2 brunei \ud83c\udde7\ud83c\uddf3 bolivia \ud83c\udde7\ud83c\uddf4 caribbean_netherlands \ud83c\udde7\ud83c\uddf6 brazil \ud83c\udde7\ud83c\uddf7 bahamas \ud83c\udde7\ud83c\uddf8 bhutan \ud83c\udde7\ud83c\uddf9 bouvet_island \ud83c\udde7\ud83c\uddfb botswana \ud83c\udde7\ud83c\uddfc belarus \ud83c\udde7\ud83c\uddfe belize \ud83c\udde7\ud83c\uddff canada \ud83c\udde8\ud83c\udde6 cocos_islands \ud83c\udde8\ud83c\udde8 congo_kinshasa \ud83c\udde8\ud83c\udde9 central_african_republic \ud83c\udde8\ud83c\uddeb congo_brazzaville \ud83c\udde8\ud83c\uddec switzerland \ud83c\udde8\ud83c\udded cote_divoire \ud83c\udde8\ud83c\uddee cook_islands \ud83c\udde8\ud83c\uddf0 chile \ud83c\udde8\ud83c\uddf1 cameroon \ud83c\udde8\ud83c\uddf2 cn \ud83c\udde8\ud83c\uddf3 colombia \ud83c\udde8\ud83c\uddf4 clipperton_island \ud83c\udde8\ud83c\uddf5 costa_rica \ud83c\udde8\ud83c\uddf7 cuba \ud83c\udde8\ud83c\uddfa cape_verde \ud83c\udde8\ud83c\uddfb curacao \ud83c\udde8\ud83c\uddfc christmas_island \ud83c\udde8\ud83c\uddfd cyprus \ud83c\udde8\ud83c\uddfe czech_republic \ud83c\udde8\ud83c\uddff de \ud83c\udde9\ud83c\uddea diego_garcia \ud83c\udde9\ud83c\uddec djibouti \ud83c\udde9\ud83c\uddef denmark \ud83c\udde9\ud83c\uddf0 dominica \ud83c\udde9\ud83c\uddf2 dominican_republic \ud83c\udde9\ud83c\uddf4 algeria \ud83c\udde9\ud83c\uddff ceuta_melilla \ud83c\uddea\ud83c\udde6 ecuador \ud83c\uddea\ud83c\udde8 estonia \ud83c\uddea\ud83c\uddea egypt \ud83c\uddea\ud83c\uddec western_sahara \ud83c\uddea\ud83c\udded eritrea \ud83c\uddea\ud83c\uddf7 es \ud83c\uddea\ud83c\uddf8 ethiopia \ud83c\uddea\ud83c\uddf9 eu \ud83c\uddea\ud83c\uddfa finland \ud83c\uddeb\ud83c\uddee fiji \ud83c\uddeb\ud83c\uddef falkland_islands \ud83c\uddeb\ud83c\uddf0 micronesia \ud83c\uddeb\ud83c\uddf2 faroe_islands \ud83c\uddeb\ud83c\uddf4 fr \ud83c\uddeb\ud83c\uddf7 gabon \ud83c\uddec\ud83c\udde6 gb \ud83c\uddec\ud83c\udde7 grenada \ud83c\uddec\ud83c\udde9 georgia \ud83c\uddec\ud83c\uddea french_guiana \ud83c\uddec\ud83c\uddeb guernsey \ud83c\uddec\ud83c\uddec ghana \ud83c\uddec\ud83c\udded gibraltar \ud83c\uddec\ud83c\uddee greenland \ud83c\uddec\ud83c\uddf1 gambia \ud83c\uddec\ud83c\uddf2 guinea \ud83c\uddec\ud83c\uddf3 guadeloupe \ud83c\uddec\ud83c\uddf5 equatorial_guinea \ud83c\uddec\ud83c\uddf6 greece \ud83c\uddec\ud83c\uddf7 south_georgia_south_sandwich_islands \ud83c\uddec\ud83c\uddf8 guatemala \ud83c\uddec\ud83c\uddf9 guam \ud83c\uddec\ud83c\uddfa guinea_bissau \ud83c\uddec\ud83c\uddfc guyana \ud83c\uddec\ud83c\uddfe hong_kong \ud83c\udded\ud83c\uddf0 heard_mcdonald_islands \ud83c\udded\ud83c\uddf2 honduras \ud83c\udded\ud83c\uddf3 croatia \ud83c\udded\ud83c\uddf7 haiti \ud83c\udded\ud83c\uddf9 hungary \ud83c\udded\ud83c\uddfa canary_islands \ud83c\uddee\ud83c\udde8 indonesia \ud83c\uddee\ud83c\udde9 ireland \ud83c\uddee\ud83c\uddea israel \ud83c\uddee\ud83c\uddf1 isle_of_man \ud83c\uddee\ud83c\uddf2 india \ud83c\uddee\ud83c\uddf3 british_indian_ocean_territory \ud83c\uddee\ud83c\uddf4 iraq \ud83c\uddee\ud83c\uddf6 iran \ud83c\uddee\ud83c\uddf7 iceland \ud83c\uddee\ud83c\uddf8 it \ud83c\uddee\ud83c\uddf9 jersey \ud83c\uddef\ud83c\uddea jamaica \ud83c\uddef\ud83c\uddf2 jordan \ud83c\uddef\ud83c\uddf4 jp \ud83c\uddef\ud83c\uddf5 kenya \ud83c\uddf0\ud83c\uddea kyrgyzstan \ud83c\uddf0\ud83c\uddec cambodia \ud83c\uddf0\ud83c\udded kiribati \ud83c\uddf0\ud83c\uddee comoros \ud83c\uddf0\ud83c\uddf2 st_kitts_nevis \ud83c\uddf0\ud83c\uddf3 north_korea \ud83c\uddf0\ud83c\uddf5 kr \ud83c\uddf0\ud83c\uddf7 kuwait \ud83c\uddf0\ud83c\uddfc cayman_islands \ud83c\uddf0\ud83c\uddfe kazakhstan \ud83c\uddf0\ud83c\uddff laos \ud83c\uddf1\ud83c\udde6 lebanon \ud83c\uddf1\ud83c\udde7 st_lucia \ud83c\uddf1\ud83c\udde8 liechtenstein \ud83c\uddf1\ud83c\uddee sri_lanka \ud83c\uddf1\ud83c\uddf0 liberia \ud83c\uddf1\ud83c\uddf7 lesotho \ud83c\uddf1\ud83c\uddf8 lithuania \ud83c\uddf1\ud83c\uddf9 luxembourg \ud83c\uddf1\ud83c\uddfa latvia \ud83c\uddf1\ud83c\uddfb libya \ud83c\uddf1\ud83c\uddfe morocco \ud83c\uddf2\ud83c\udde6 monaco \ud83c\uddf2\ud83c\udde8 moldova \ud83c\uddf2\ud83c\udde9 montenegro \ud83c\uddf2\ud83c\uddea st_martin \ud83c\uddf2\ud83c\uddeb madagascar \ud83c\uddf2\ud83c\uddec marshall_islands \ud83c\uddf2\ud83c\udded macedonia \ud83c\uddf2\ud83c\uddf0 mali \ud83c\uddf2\ud83c\uddf1 myanmar \ud83c\uddf2\ud83c\uddf2 mongolia \ud83c\uddf2\ud83c\uddf3 macau \ud83c\uddf2\ud83c\uddf4 northern_mariana_islands \ud83c\uddf2\ud83c\uddf5 martinique \ud83c\uddf2\ud83c\uddf6 mauritania \ud83c\uddf2\ud83c\uddf7 montserrat \ud83c\uddf2\ud83c\uddf8 malta \ud83c\uddf2\ud83c\uddf9 mauritius \ud83c\uddf2\ud83c\uddfa maldives \ud83c\uddf2\ud83c\uddfb malawi \ud83c\uddf2\ud83c\uddfc mexico \ud83c\uddf2\ud83c\uddfd malaysia \ud83c\uddf2\ud83c\uddfe mozambique \ud83c\uddf2\ud83c\uddff namibia \ud83c\uddf3\ud83c\udde6 new_caledonia \ud83c\uddf3\ud83c\udde8 niger \ud83c\uddf3\ud83c\uddea norfolk_island \ud83c\uddf3\ud83c\uddeb nigeria \ud83c\uddf3\ud83c\uddec nicaragua \ud83c\uddf3\ud83c\uddee netherlands \ud83c\uddf3\ud83c\uddf1 norway \ud83c\uddf3\ud83c\uddf4 nepal \ud83c\uddf3\ud83c\uddf5 nauru \ud83c\uddf3\ud83c\uddf7 niue \ud83c\uddf3\ud83c\uddfa new_zealand \ud83c\uddf3\ud83c\uddff oman \ud83c\uddf4\ud83c\uddf2 panama \ud83c\uddf5\ud83c\udde6 peru \ud83c\uddf5\ud83c\uddea french_polynesia \ud83c\uddf5\ud83c\uddeb papua_new_guinea \ud83c\uddf5\ud83c\uddec philippines \ud83c\uddf5\ud83c\udded pakistan \ud83c\uddf5\ud83c\uddf0 poland \ud83c\uddf5\ud83c\uddf1 st_pierre_miquelon \ud83c\uddf5\ud83c\uddf2 pitcairn_islands \ud83c\uddf5\ud83c\uddf3 puerto_rico \ud83c\uddf5\ud83c\uddf7 palestinian_territories \ud83c\uddf5\ud83c\uddf8 portugal \ud83c\uddf5\ud83c\uddf9 palau \ud83c\uddf5\ud83c\uddfc paraguay \ud83c\uddf5\ud83c\uddfe qatar \ud83c\uddf6\ud83c\udde6 reunion \ud83c\uddf7\ud83c\uddea romania \ud83c\uddf7\ud83c\uddf4 serbia \ud83c\uddf7\ud83c\uddf8 ru \ud83c\uddf7\ud83c\uddfa rwanda \ud83c\uddf7\ud83c\uddfc saudi_arabia \ud83c\uddf8\ud83c\udde6 solomon_islands \ud83c\uddf8\ud83c\udde7 seychelles \ud83c\uddf8\ud83c\udde8 sudan \ud83c\uddf8\ud83c\udde9 sweden \ud83c\uddf8\ud83c\uddea singapore \ud83c\uddf8\ud83c\uddec st_helena \ud83c\uddf8\ud83c\udded slovenia \ud83c\uddf8\ud83c\uddee svalbard_jan_mayen \ud83c\uddf8\ud83c\uddef slovakia \ud83c\uddf8\ud83c\uddf0 sierra_leone \ud83c\uddf8\ud83c\uddf1 san_marino \ud83c\uddf8\ud83c\uddf2 senegal \ud83c\uddf8\ud83c\uddf3 somalia \ud83c\uddf8\ud83c\uddf4 suriname \ud83c\uddf8\ud83c\uddf7 south_sudan \ud83c\uddf8\ud83c\uddf8 sao_tome_principe \ud83c\uddf8\ud83c\uddf9 el_salvador \ud83c\uddf8\ud83c\uddfb sint_maarten \ud83c\uddf8\ud83c\uddfd syria \ud83c\uddf8\ud83c\uddfe swaziland \ud83c\uddf8\ud83c\uddff tristan_da_cunha \ud83c\uddf9\ud83c\udde6 turks_caicos_islands \ud83c\uddf9\ud83c\udde8 chad \ud83c\uddf9\ud83c\udde9 french_southern_territories \ud83c\uddf9\ud83c\uddeb togo \ud83c\uddf9\ud83c\uddec thailand \ud83c\uddf9\ud83c\udded tajikistan \ud83c\uddf9\ud83c\uddef tokelau \ud83c\uddf9\ud83c\uddf0 timor_leste \ud83c\uddf9\ud83c\uddf1 turkmenistan \ud83c\uddf9\ud83c\uddf2 tunisia \ud83c\uddf9\ud83c\uddf3 tonga \ud83c\uddf9\ud83c\uddf4 tr \ud83c\uddf9\ud83c\uddf7 trinidad_tobago \ud83c\uddf9\ud83c\uddf9 tuvalu \ud83c\uddf9\ud83c\uddfb taiwan \ud83c\uddf9\ud83c\uddfc tanzania \ud83c\uddf9\ud83c\uddff ukraine \ud83c\uddfa\ud83c\udde6 uganda \ud83c\uddfa\ud83c\uddec us_outlying_islands \ud83c\uddfa\ud83c\uddf2 united_nations \ud83c\uddfa\ud83c\uddf3 us \ud83c\uddfa\ud83c\uddf8 uruguay \ud83c\uddfa\ud83c\uddfe uzbekistan \ud83c\uddfa\ud83c\uddff vatican_city \ud83c\uddfb\ud83c\udde6 st_vincent_grenadines \ud83c\uddfb\ud83c\udde8 venezuela \ud83c\uddfb\ud83c\uddea british_virgin_islands \ud83c\uddfb\ud83c\uddec us_virgin_islands \ud83c\uddfb\ud83c\uddee vietnam \ud83c\uddfb\ud83c\uddf3 vanuatu \ud83c\uddfb\ud83c\uddfa wallis_futuna \ud83c\uddfc\ud83c\uddeb samoa \ud83c\uddfc\ud83c\uddf8 kosovo \ud83c\uddfd\ud83c\uddf0 yemen \ud83c\uddfe\ud83c\uddea mayotte \ud83c\uddfe\ud83c\uddf9 south_africa \ud83c\uddff\ud83c\udde6 zambia \ud83c\uddff\ud83c\uddf2 zimbabwe \ud83c\uddff\ud83c\uddfc england \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f scotland \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f wales \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f","title":"Emojis \ud83e\udd73 \ud83c\udf89"},{"location":"emojis/#emoji-reference","text":"You can tag messages with emojis \ud83e\udd73 \ud83c\udf89 and other relevant strings. Matching tags are automatically converted to emojis. This is a reference of all supported emojis. To learn more about the feature, please refer to the tagging and emojis page . Tag Emoji grinning \ud83d\ude00 smiley \ud83d\ude03 smile \ud83d\ude04 grin \ud83d\ude01 laughing \ud83d\ude06 sweat_smile \ud83d\ude05 rofl \ud83e\udd23 joy \ud83d\ude02 slightly_smiling_face \ud83d\ude42 upside_down_face \ud83d\ude43 wink \ud83d\ude09 blush \ud83d\ude0a innocent \ud83d\ude07 smiling_face_with_three_hearts \ud83e\udd70 heart_eyes \ud83d\ude0d star_struck \ud83e\udd29 kissing_heart \ud83d\ude18 kissing \ud83d\ude17 relaxed \u263a\ufe0f kissing_closed_eyes \ud83d\ude1a kissing_smiling_eyes \ud83d\ude19 smiling_face_with_tear \ud83e\udd72 yum \ud83d\ude0b stuck_out_tongue \ud83d\ude1b stuck_out_tongue_winking_eye \ud83d\ude1c zany_face \ud83e\udd2a stuck_out_tongue_closed_eyes \ud83d\ude1d money_mouth_face \ud83e\udd11 hugs \ud83e\udd17 hand_over_mouth \ud83e\udd2d shushing_face \ud83e\udd2b thinking \ud83e\udd14 zipper_mouth_face \ud83e\udd10 raised_eyebrow \ud83e\udd28 neutral_face \ud83d\ude10 expressionless \ud83d\ude11 no_mouth \ud83d\ude36 face_in_clouds \ud83d\ude36\u200d\ud83c\udf2b\ufe0f smirk \ud83d\ude0f unamused \ud83d\ude12 roll_eyes \ud83d\ude44 grimacing \ud83d\ude2c face_exhaling \ud83d\ude2e\u200d\ud83d\udca8 lying_face \ud83e\udd25 relieved \ud83d\ude0c pensive \ud83d\ude14 sleepy \ud83d\ude2a drooling_face \ud83e\udd24 sleeping \ud83d\ude34 mask \ud83d\ude37 face_with_thermometer \ud83e\udd12 face_with_head_bandage \ud83e\udd15 nauseated_face \ud83e\udd22 vomiting_face \ud83e\udd2e sneezing_face \ud83e\udd27 hot_face \ud83e\udd75 cold_face \ud83e\udd76 woozy_face \ud83e\udd74 dizzy_face \ud83d\ude35 face_with_spiral_eyes \ud83d\ude35\u200d\ud83d\udcab exploding_head \ud83e\udd2f cowboy_hat_face \ud83e\udd20 partying_face \ud83e\udd73 disguised_face \ud83e\udd78 sunglasses \ud83d\ude0e nerd_face \ud83e\udd13 monocle_face \ud83e\uddd0 confused \ud83d\ude15 worried \ud83d\ude1f slightly_frowning_face \ud83d\ude41 frowning_face \u2639\ufe0f open_mouth \ud83d\ude2e hushed \ud83d\ude2f astonished \ud83d\ude32 flushed \ud83d\ude33 pleading_face \ud83e\udd7a frowning \ud83d\ude26 anguished \ud83d\ude27 fearful \ud83d\ude28 cold_sweat \ud83d\ude30 disappointed_relieved \ud83d\ude25 cry \ud83d\ude22 sob \ud83d\ude2d scream \ud83d\ude31 confounded \ud83d\ude16 persevere \ud83d\ude23 disappointed \ud83d\ude1e sweat \ud83d\ude13 weary \ud83d\ude29 tired_face \ud83d\ude2b yawning_face \ud83e\udd71 triumph \ud83d\ude24 rage \ud83d\ude21 angry \ud83d\ude20 cursing_face \ud83e\udd2c smiling_imp \ud83d\ude08 imp \ud83d\udc7f skull \ud83d\udc80 skull_and_crossbones \u2620\ufe0f hankey \ud83d\udca9 clown_face \ud83e\udd21 japanese_ogre \ud83d\udc79 japanese_goblin \ud83d\udc7a ghost \ud83d\udc7b alien \ud83d\udc7d space_invader \ud83d\udc7e robot \ud83e\udd16 smiley_cat \ud83d\ude3a smile_cat \ud83d\ude38 joy_cat \ud83d\ude39 heart_eyes_cat \ud83d\ude3b smirk_cat \ud83d\ude3c kissing_cat \ud83d\ude3d scream_cat \ud83d\ude40 crying_cat_face \ud83d\ude3f pouting_cat \ud83d\ude3e see_no_evil \ud83d\ude48 hear_no_evil \ud83d\ude49 speak_no_evil \ud83d\ude4a kiss \ud83d\udc8b love_letter \ud83d\udc8c cupid \ud83d\udc98 gift_heart \ud83d\udc9d sparkling_heart \ud83d\udc96 heartpulse \ud83d\udc97 heartbeat \ud83d\udc93 revolving_hearts \ud83d\udc9e two_hearts \ud83d\udc95 heart_decoration \ud83d\udc9f heavy_heart_exclamation \u2763\ufe0f broken_heart \ud83d\udc94 heart_on_fire \u2764\ufe0f\u200d\ud83d\udd25 mending_heart \u2764\ufe0f\u200d\ud83e\ude79 heart \u2764\ufe0f orange_heart \ud83e\udde1 yellow_heart \ud83d\udc9b green_heart \ud83d\udc9a blue_heart \ud83d\udc99 purple_heart \ud83d\udc9c brown_heart \ud83e\udd0e black_heart \ud83d\udda4 white_heart \ud83e\udd0d 100 \ud83d\udcaf anger \ud83d\udca2 boom \ud83d\udca5 dizzy \ud83d\udcab sweat_drops \ud83d\udca6 dash \ud83d\udca8 hole \ud83d\udd73\ufe0f bomb \ud83d\udca3 speech_balloon \ud83d\udcac eye_speech_bubble \ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f left_speech_bubble \ud83d\udde8\ufe0f right_anger_bubble \ud83d\uddef\ufe0f thought_balloon \ud83d\udcad zzz \ud83d\udca4 wave \ud83d\udc4b raised_back_of_hand \ud83e\udd1a raised_hand_with_fingers_splayed \ud83d\udd90\ufe0f hand \u270b vulcan_salute \ud83d\udd96 ok_hand \ud83d\udc4c pinched_fingers \ud83e\udd0c pinching_hand \ud83e\udd0f v \u270c\ufe0f crossed_fingers \ud83e\udd1e love_you_gesture \ud83e\udd1f metal \ud83e\udd18 call_me_hand \ud83e\udd19 point_left \ud83d\udc48 point_right \ud83d\udc49 point_up_2 \ud83d\udc46 middle_finger \ud83d\udd95 point_down \ud83d\udc47 point_up \u261d\ufe0f +1 \ud83d\udc4d -1 \ud83d\udc4e fist_raised \u270a fist_oncoming \ud83d\udc4a fist_left \ud83e\udd1b fist_right \ud83e\udd1c clap \ud83d\udc4f raised_hands \ud83d\ude4c open_hands \ud83d\udc50 palms_up_together \ud83e\udd32 handshake \ud83e\udd1d pray \ud83d\ude4f writing_hand \u270d\ufe0f nail_care \ud83d\udc85 selfie \ud83e\udd33 muscle \ud83d\udcaa mechanical_arm \ud83e\uddbe mechanical_leg \ud83e\uddbf leg \ud83e\uddb5 foot \ud83e\uddb6 ear \ud83d\udc42 ear_with_hearing_aid \ud83e\uddbb nose \ud83d\udc43 brain \ud83e\udde0 anatomical_heart \ud83e\udec0 lungs \ud83e\udec1 tooth \ud83e\uddb7 bone \ud83e\uddb4 eyes \ud83d\udc40 eye \ud83d\udc41\ufe0f tongue \ud83d\udc45 lips \ud83d\udc44 baby \ud83d\udc76 child \ud83e\uddd2 boy \ud83d\udc66 girl \ud83d\udc67 adult \ud83e\uddd1 blond_haired_person \ud83d\udc71 man \ud83d\udc68 bearded_person \ud83e\uddd4 man_beard \ud83e\uddd4\u200d\u2642\ufe0f woman_beard \ud83e\uddd4\u200d\u2640\ufe0f red_haired_man \ud83d\udc68\u200d\ud83e\uddb0 curly_haired_man \ud83d\udc68\u200d\ud83e\uddb1 white_haired_man \ud83d\udc68\u200d\ud83e\uddb3 bald_man \ud83d\udc68\u200d\ud83e\uddb2 woman \ud83d\udc69 red_haired_woman \ud83d\udc69\u200d\ud83e\uddb0 person_red_hair \ud83e\uddd1\u200d\ud83e\uddb0 curly_haired_woman \ud83d\udc69\u200d\ud83e\uddb1 person_curly_hair \ud83e\uddd1\u200d\ud83e\uddb1 white_haired_woman \ud83d\udc69\u200d\ud83e\uddb3 person_white_hair \ud83e\uddd1\u200d\ud83e\uddb3 bald_woman \ud83d\udc69\u200d\ud83e\uddb2 person_bald \ud83e\uddd1\u200d\ud83e\uddb2 blond_haired_woman \ud83d\udc71\u200d\u2640\ufe0f blond_haired_man \ud83d\udc71\u200d\u2642\ufe0f older_adult \ud83e\uddd3 older_man \ud83d\udc74 older_woman \ud83d\udc75 frowning_person \ud83d\ude4d frowning_man \ud83d\ude4d\u200d\u2642\ufe0f frowning_woman \ud83d\ude4d\u200d\u2640\ufe0f pouting_face \ud83d\ude4e pouting_man \ud83d\ude4e\u200d\u2642\ufe0f pouting_woman \ud83d\ude4e\u200d\u2640\ufe0f no_good \ud83d\ude45 no_good_man \ud83d\ude45\u200d\u2642\ufe0f no_good_woman \ud83d\ude45\u200d\u2640\ufe0f ok_person \ud83d\ude46 ok_man \ud83d\ude46\u200d\u2642\ufe0f ok_woman \ud83d\ude46\u200d\u2640\ufe0f tipping_hand_person \ud83d\udc81 tipping_hand_man \ud83d\udc81\u200d\u2642\ufe0f tipping_hand_woman \ud83d\udc81\u200d\u2640\ufe0f raising_hand \ud83d\ude4b raising_hand_man \ud83d\ude4b\u200d\u2642\ufe0f raising_hand_woman \ud83d\ude4b\u200d\u2640\ufe0f deaf_person \ud83e\uddcf deaf_man \ud83e\uddcf\u200d\u2642\ufe0f deaf_woman \ud83e\uddcf\u200d\u2640\ufe0f bow \ud83d\ude47 bowing_man \ud83d\ude47\u200d\u2642\ufe0f bowing_woman \ud83d\ude47\u200d\u2640\ufe0f facepalm \ud83e\udd26 man_facepalming \ud83e\udd26\u200d\u2642\ufe0f woman_facepalming \ud83e\udd26\u200d\u2640\ufe0f shrug \ud83e\udd37 man_shrugging \ud83e\udd37\u200d\u2642\ufe0f woman_shrugging \ud83e\udd37\u200d\u2640\ufe0f health_worker \ud83e\uddd1\u200d\u2695\ufe0f man_health_worker \ud83d\udc68\u200d\u2695\ufe0f woman_health_worker \ud83d\udc69\u200d\u2695\ufe0f student \ud83e\uddd1\u200d\ud83c\udf93 man_student \ud83d\udc68\u200d\ud83c\udf93 woman_student \ud83d\udc69\u200d\ud83c\udf93 teacher \ud83e\uddd1\u200d\ud83c\udfeb man_teacher \ud83d\udc68\u200d\ud83c\udfeb woman_teacher \ud83d\udc69\u200d\ud83c\udfeb judge \ud83e\uddd1\u200d\u2696\ufe0f man_judge \ud83d\udc68\u200d\u2696\ufe0f woman_judge \ud83d\udc69\u200d\u2696\ufe0f farmer \ud83e\uddd1\u200d\ud83c\udf3e man_farmer \ud83d\udc68\u200d\ud83c\udf3e woman_farmer \ud83d\udc69\u200d\ud83c\udf3e cook \ud83e\uddd1\u200d\ud83c\udf73 man_cook \ud83d\udc68\u200d\ud83c\udf73 woman_cook \ud83d\udc69\u200d\ud83c\udf73 mechanic \ud83e\uddd1\u200d\ud83d\udd27 man_mechanic \ud83d\udc68\u200d\ud83d\udd27 woman_mechanic \ud83d\udc69\u200d\ud83d\udd27 factory_worker \ud83e\uddd1\u200d\ud83c\udfed man_factory_worker \ud83d\udc68\u200d\ud83c\udfed woman_factory_worker \ud83d\udc69\u200d\ud83c\udfed office_worker \ud83e\uddd1\u200d\ud83d\udcbc man_office_worker \ud83d\udc68\u200d\ud83d\udcbc woman_office_worker \ud83d\udc69\u200d\ud83d\udcbc scientist \ud83e\uddd1\u200d\ud83d\udd2c man_scientist \ud83d\udc68\u200d\ud83d\udd2c woman_scientist \ud83d\udc69\u200d\ud83d\udd2c technologist \ud83e\uddd1\u200d\ud83d\udcbb man_technologist \ud83d\udc68\u200d\ud83d\udcbb woman_technologist \ud83d\udc69\u200d\ud83d\udcbb singer \ud83e\uddd1\u200d\ud83c\udfa4 man_singer \ud83d\udc68\u200d\ud83c\udfa4 woman_singer \ud83d\udc69\u200d\ud83c\udfa4 artist \ud83e\uddd1\u200d\ud83c\udfa8 man_artist \ud83d\udc68\u200d\ud83c\udfa8 woman_artist \ud83d\udc69\u200d\ud83c\udfa8 pilot \ud83e\uddd1\u200d\u2708\ufe0f man_pilot \ud83d\udc68\u200d\u2708\ufe0f woman_pilot \ud83d\udc69\u200d\u2708\ufe0f astronaut \ud83e\uddd1\u200d\ud83d\ude80 man_astronaut \ud83d\udc68\u200d\ud83d\ude80 woman_astronaut \ud83d\udc69\u200d\ud83d\ude80 firefighter \ud83e\uddd1\u200d\ud83d\ude92 man_firefighter \ud83d\udc68\u200d\ud83d\ude92 woman_firefighter \ud83d\udc69\u200d\ud83d\ude92 police_officer \ud83d\udc6e policeman \ud83d\udc6e\u200d\u2642\ufe0f policewoman \ud83d\udc6e\u200d\u2640\ufe0f detective \ud83d\udd75\ufe0f male_detective \ud83d\udd75\ufe0f\u200d\u2642\ufe0f female_detective \ud83d\udd75\ufe0f\u200d\u2640\ufe0f guard \ud83d\udc82 guardsman \ud83d\udc82\u200d\u2642\ufe0f guardswoman \ud83d\udc82\u200d\u2640\ufe0f ninja \ud83e\udd77 construction_worker \ud83d\udc77 construction_worker_man \ud83d\udc77\u200d\u2642\ufe0f construction_worker_woman \ud83d\udc77\u200d\u2640\ufe0f prince \ud83e\udd34 princess \ud83d\udc78 person_with_turban \ud83d\udc73 man_with_turban \ud83d\udc73\u200d\u2642\ufe0f woman_with_turban \ud83d\udc73\u200d\u2640\ufe0f man_with_gua_pi_mao \ud83d\udc72 woman_with_headscarf \ud83e\uddd5 person_in_tuxedo \ud83e\udd35 man_in_tuxedo \ud83e\udd35\u200d\u2642\ufe0f woman_in_tuxedo \ud83e\udd35\u200d\u2640\ufe0f person_with_veil \ud83d\udc70 man_with_veil \ud83d\udc70\u200d\u2642\ufe0f woman_with_veil \ud83d\udc70\u200d\u2640\ufe0f pregnant_woman \ud83e\udd30 breast_feeding \ud83e\udd31 woman_feeding_baby \ud83d\udc69\u200d\ud83c\udf7c man_feeding_baby \ud83d\udc68\u200d\ud83c\udf7c person_feeding_baby \ud83e\uddd1\u200d\ud83c\udf7c angel \ud83d\udc7c santa \ud83c\udf85 mrs_claus \ud83e\udd36 mx_claus \ud83e\uddd1\u200d\ud83c\udf84 superhero \ud83e\uddb8 superhero_man \ud83e\uddb8\u200d\u2642\ufe0f superhero_woman \ud83e\uddb8\u200d\u2640\ufe0f supervillain \ud83e\uddb9 supervillain_man \ud83e\uddb9\u200d\u2642\ufe0f supervillain_woman \ud83e\uddb9\u200d\u2640\ufe0f mage \ud83e\uddd9 mage_man \ud83e\uddd9\u200d\u2642\ufe0f mage_woman \ud83e\uddd9\u200d\u2640\ufe0f fairy \ud83e\uddda fairy_man \ud83e\uddda\u200d\u2642\ufe0f fairy_woman \ud83e\uddda\u200d\u2640\ufe0f vampire \ud83e\udddb vampire_man \ud83e\udddb\u200d\u2642\ufe0f vampire_woman \ud83e\udddb\u200d\u2640\ufe0f merperson \ud83e\udddc merman \ud83e\udddc\u200d\u2642\ufe0f mermaid \ud83e\udddc\u200d\u2640\ufe0f elf \ud83e\udddd elf_man \ud83e\udddd\u200d\u2642\ufe0f elf_woman \ud83e\udddd\u200d\u2640\ufe0f genie \ud83e\uddde genie_man \ud83e\uddde\u200d\u2642\ufe0f genie_woman \ud83e\uddde\u200d\u2640\ufe0f zombie \ud83e\udddf zombie_man \ud83e\udddf\u200d\u2642\ufe0f zombie_woman \ud83e\udddf\u200d\u2640\ufe0f massage \ud83d\udc86 massage_man \ud83d\udc86\u200d\u2642\ufe0f massage_woman \ud83d\udc86\u200d\u2640\ufe0f haircut \ud83d\udc87 haircut_man \ud83d\udc87\u200d\u2642\ufe0f haircut_woman \ud83d\udc87\u200d\u2640\ufe0f walking \ud83d\udeb6 walking_man \ud83d\udeb6\u200d\u2642\ufe0f walking_woman \ud83d\udeb6\u200d\u2640\ufe0f standing_person \ud83e\uddcd standing_man \ud83e\uddcd\u200d\u2642\ufe0f standing_woman \ud83e\uddcd\u200d\u2640\ufe0f kneeling_person \ud83e\uddce kneeling_man \ud83e\uddce\u200d\u2642\ufe0f kneeling_woman \ud83e\uddce\u200d\u2640\ufe0f person_with_probing_cane \ud83e\uddd1\u200d\ud83e\uddaf man_with_probing_cane \ud83d\udc68\u200d\ud83e\uddaf woman_with_probing_cane \ud83d\udc69\u200d\ud83e\uddaf person_in_motorized_wheelchair \ud83e\uddd1\u200d\ud83e\uddbc man_in_motorized_wheelchair \ud83d\udc68\u200d\ud83e\uddbc woman_in_motorized_wheelchair \ud83d\udc69\u200d\ud83e\uddbc person_in_manual_wheelchair \ud83e\uddd1\u200d\ud83e\uddbd man_in_manual_wheelchair \ud83d\udc68\u200d\ud83e\uddbd woman_in_manual_wheelchair \ud83d\udc69\u200d\ud83e\uddbd runner \ud83c\udfc3 running_man \ud83c\udfc3\u200d\u2642\ufe0f running_woman \ud83c\udfc3\u200d\u2640\ufe0f woman_dancing \ud83d\udc83 man_dancing \ud83d\udd7a business_suit_levitating \ud83d\udd74\ufe0f dancers \ud83d\udc6f dancing_men \ud83d\udc6f\u200d\u2642\ufe0f dancing_women \ud83d\udc6f\u200d\u2640\ufe0f sauna_person \ud83e\uddd6 sauna_man \ud83e\uddd6\u200d\u2642\ufe0f sauna_woman \ud83e\uddd6\u200d\u2640\ufe0f climbing \ud83e\uddd7 climbing_man \ud83e\uddd7\u200d\u2642\ufe0f climbing_woman \ud83e\uddd7\u200d\u2640\ufe0f person_fencing \ud83e\udd3a horse_racing \ud83c\udfc7 skier \u26f7\ufe0f snowboarder \ud83c\udfc2 golfing \ud83c\udfcc\ufe0f golfing_man \ud83c\udfcc\ufe0f\u200d\u2642\ufe0f golfing_woman \ud83c\udfcc\ufe0f\u200d\u2640\ufe0f surfer \ud83c\udfc4 surfing_man \ud83c\udfc4\u200d\u2642\ufe0f surfing_woman \ud83c\udfc4\u200d\u2640\ufe0f rowboat \ud83d\udea3 rowing_man \ud83d\udea3\u200d\u2642\ufe0f rowing_woman \ud83d\udea3\u200d\u2640\ufe0f swimmer \ud83c\udfca swimming_man \ud83c\udfca\u200d\u2642\ufe0f swimming_woman \ud83c\udfca\u200d\u2640\ufe0f bouncing_ball_person \u26f9\ufe0f bouncing_ball_man \u26f9\ufe0f\u200d\u2642\ufe0f bouncing_ball_woman \u26f9\ufe0f\u200d\u2640\ufe0f weight_lifting \ud83c\udfcb\ufe0f weight_lifting_man \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f weight_lifting_woman \ud83c\udfcb\ufe0f\u200d\u2640\ufe0f bicyclist \ud83d\udeb4 biking_man \ud83d\udeb4\u200d\u2642\ufe0f biking_woman \ud83d\udeb4\u200d\u2640\ufe0f mountain_bicyclist \ud83d\udeb5 mountain_biking_man \ud83d\udeb5\u200d\u2642\ufe0f mountain_biking_woman \ud83d\udeb5\u200d\u2640\ufe0f cartwheeling \ud83e\udd38 man_cartwheeling \ud83e\udd38\u200d\u2642\ufe0f woman_cartwheeling \ud83e\udd38\u200d\u2640\ufe0f wrestling \ud83e\udd3c men_wrestling \ud83e\udd3c\u200d\u2642\ufe0f women_wrestling \ud83e\udd3c\u200d\u2640\ufe0f water_polo \ud83e\udd3d man_playing_water_polo \ud83e\udd3d\u200d\u2642\ufe0f woman_playing_water_polo \ud83e\udd3d\u200d\u2640\ufe0f handball_person \ud83e\udd3e man_playing_handball \ud83e\udd3e\u200d\u2642\ufe0f woman_playing_handball \ud83e\udd3e\u200d\u2640\ufe0f juggling_person \ud83e\udd39 man_juggling \ud83e\udd39\u200d\u2642\ufe0f woman_juggling \ud83e\udd39\u200d\u2640\ufe0f lotus_position \ud83e\uddd8 lotus_position_man \ud83e\uddd8\u200d\u2642\ufe0f lotus_position_woman \ud83e\uddd8\u200d\u2640\ufe0f bath \ud83d\udec0 sleeping_bed \ud83d\udecc people_holding_hands \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 two_women_holding_hands \ud83d\udc6d couple \ud83d\udc6b two_men_holding_hands \ud83d\udc6c couplekiss \ud83d\udc8f couplekiss_man_woman \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 couplekiss_man_man \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 couplekiss_woman_woman \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69 couple_with_heart \ud83d\udc91 couple_with_heart_woman_man \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68 couple_with_heart_man_man \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68 couple_with_heart_woman_woman \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 family \ud83d\udc6a family_man_woman_boy \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 family_man_woman_girl \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 family_man_woman_girl_boy \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 family_man_woman_boy_boy \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 family_man_woman_girl_girl \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 family_man_man_boy \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 family_man_man_girl \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 family_man_man_girl_boy \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 family_man_man_boy_boy \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 family_man_man_girl_girl \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 family_woman_woman_boy \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 family_woman_woman_girl \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 family_woman_woman_girl_boy \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 family_woman_woman_boy_boy \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 family_woman_woman_girl_girl \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 family_man_boy \ud83d\udc68\u200d\ud83d\udc66 family_man_boy_boy \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 family_man_girl \ud83d\udc68\u200d\ud83d\udc67 family_man_girl_boy \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 family_man_girl_girl \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 family_woman_boy \ud83d\udc69\u200d\ud83d\udc66 family_woman_boy_boy \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 family_woman_girl \ud83d\udc69\u200d\ud83d\udc67 family_woman_girl_boy \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 family_woman_girl_girl \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 speaking_head \ud83d\udde3\ufe0f bust_in_silhouette \ud83d\udc64 busts_in_silhouette \ud83d\udc65 people_hugging \ud83e\udec2 footprints \ud83d\udc63 monkey_face \ud83d\udc35 monkey \ud83d\udc12 gorilla \ud83e\udd8d orangutan \ud83e\udda7 dog \ud83d\udc36 dog2 \ud83d\udc15 guide_dog \ud83e\uddae service_dog \ud83d\udc15\u200d\ud83e\uddba poodle \ud83d\udc29 wolf \ud83d\udc3a fox_face \ud83e\udd8a raccoon \ud83e\udd9d cat \ud83d\udc31 cat2 \ud83d\udc08 black_cat \ud83d\udc08\u200d\u2b1b lion \ud83e\udd81 tiger \ud83d\udc2f tiger2 \ud83d\udc05 leopard \ud83d\udc06 horse \ud83d\udc34 racehorse \ud83d\udc0e unicorn \ud83e\udd84 zebra \ud83e\udd93 deer \ud83e\udd8c bison \ud83e\uddac cow \ud83d\udc2e ox \ud83d\udc02 water_buffalo \ud83d\udc03 cow2 \ud83d\udc04 pig \ud83d\udc37 pig2 \ud83d\udc16 boar \ud83d\udc17 pig_nose \ud83d\udc3d ram \ud83d\udc0f sheep \ud83d\udc11 goat \ud83d\udc10 dromedary_camel \ud83d\udc2a camel \ud83d\udc2b llama \ud83e\udd99 giraffe \ud83e\udd92 elephant \ud83d\udc18 mammoth \ud83e\udda3 rhinoceros \ud83e\udd8f hippopotamus \ud83e\udd9b mouse \ud83d\udc2d mouse2 \ud83d\udc01 rat \ud83d\udc00 hamster \ud83d\udc39 rabbit \ud83d\udc30 rabbit2 \ud83d\udc07 chipmunk \ud83d\udc3f\ufe0f beaver \ud83e\uddab hedgehog \ud83e\udd94 bat \ud83e\udd87 bear \ud83d\udc3b polar_bear \ud83d\udc3b\u200d\u2744\ufe0f koala \ud83d\udc28 panda_face \ud83d\udc3c sloth \ud83e\udda5 otter \ud83e\udda6 skunk \ud83e\udda8 kangaroo \ud83e\udd98 badger \ud83e\udda1 feet \ud83d\udc3e turkey \ud83e\udd83 chicken \ud83d\udc14 rooster \ud83d\udc13 hatching_chick \ud83d\udc23 baby_chick \ud83d\udc24 hatched_chick \ud83d\udc25 bird \ud83d\udc26 penguin \ud83d\udc27 dove \ud83d\udd4a\ufe0f eagle \ud83e\udd85 duck \ud83e\udd86 swan \ud83e\udda2 owl \ud83e\udd89 dodo \ud83e\udda4 feather \ud83e\udeb6 flamingo \ud83e\udda9 peacock \ud83e\udd9a parrot \ud83e\udd9c frog \ud83d\udc38 crocodile \ud83d\udc0a turtle \ud83d\udc22 lizard \ud83e\udd8e snake \ud83d\udc0d dragon_face \ud83d\udc32 dragon \ud83d\udc09 sauropod \ud83e\udd95 t-rex \ud83e\udd96 whale \ud83d\udc33 whale2 \ud83d\udc0b dolphin \ud83d\udc2c seal \ud83e\uddad fish \ud83d\udc1f tropical_fish \ud83d\udc20 blowfish \ud83d\udc21 shark \ud83e\udd88 octopus \ud83d\udc19 Tag Emoji octopus \ud83d\udc19 shell \ud83d\udc1a snail \ud83d\udc0c butterfly \ud83e\udd8b bug \ud83d\udc1b ant \ud83d\udc1c bee \ud83d\udc1d beetle \ud83e\udeb2 lady_beetle \ud83d\udc1e cricket \ud83e\udd97 cockroach \ud83e\udeb3 spider \ud83d\udd77\ufe0f spider_web \ud83d\udd78\ufe0f scorpion \ud83e\udd82 mosquito \ud83e\udd9f fly \ud83e\udeb0 worm \ud83e\udeb1 microbe \ud83e\udda0 bouquet \ud83d\udc90 cherry_blossom \ud83c\udf38 white_flower \ud83d\udcae rosette \ud83c\udff5\ufe0f rose \ud83c\udf39 wilted_flower \ud83e\udd40 hibiscus \ud83c\udf3a sunflower \ud83c\udf3b blossom \ud83c\udf3c tulip \ud83c\udf37 seedling \ud83c\udf31 potted_plant \ud83e\udeb4 evergreen_tree \ud83c\udf32 deciduous_tree \ud83c\udf33 palm_tree \ud83c\udf34 cactus \ud83c\udf35 ear_of_rice \ud83c\udf3e herb \ud83c\udf3f shamrock \u2618\ufe0f four_leaf_clover \ud83c\udf40 maple_leaf \ud83c\udf41 fallen_leaf \ud83c\udf42 leaves \ud83c\udf43 grapes \ud83c\udf47 melon \ud83c\udf48 watermelon \ud83c\udf49 tangerine \ud83c\udf4a lemon \ud83c\udf4b banana \ud83c\udf4c pineapple \ud83c\udf4d mango \ud83e\udd6d apple \ud83c\udf4e green_apple \ud83c\udf4f pear \ud83c\udf50 peach \ud83c\udf51 cherries \ud83c\udf52 strawberry \ud83c\udf53 blueberries \ud83e\uded0 kiwi_fruit \ud83e\udd5d tomato \ud83c\udf45 olive \ud83e\uded2 coconut \ud83e\udd65 avocado \ud83e\udd51 eggplant \ud83c\udf46 potato \ud83e\udd54 carrot \ud83e\udd55 corn \ud83c\udf3d hot_pepper \ud83c\udf36\ufe0f bell_pepper \ud83e\uded1 cucumber \ud83e\udd52 leafy_green \ud83e\udd6c broccoli \ud83e\udd66 garlic \ud83e\uddc4 onion \ud83e\uddc5 mushroom \ud83c\udf44 peanuts \ud83e\udd5c chestnut \ud83c\udf30 bread \ud83c\udf5e croissant \ud83e\udd50 baguette_bread \ud83e\udd56 flatbread \ud83e\uded3 pretzel \ud83e\udd68 bagel \ud83e\udd6f pancakes \ud83e\udd5e waffle \ud83e\uddc7 cheese \ud83e\uddc0 meat_on_bone \ud83c\udf56 poultry_leg \ud83c\udf57 cut_of_meat \ud83e\udd69 bacon \ud83e\udd53 hamburger \ud83c\udf54 fries \ud83c\udf5f pizza \ud83c\udf55 hotdog \ud83c\udf2d sandwich \ud83e\udd6a taco \ud83c\udf2e burrito \ud83c\udf2f tamale \ud83e\uded4 stuffed_flatbread \ud83e\udd59 falafel \ud83e\uddc6 egg \ud83e\udd5a fried_egg \ud83c\udf73 shallow_pan_of_food \ud83e\udd58 stew \ud83c\udf72 fondue \ud83e\uded5 bowl_with_spoon \ud83e\udd63 green_salad \ud83e\udd57 popcorn \ud83c\udf7f butter \ud83e\uddc8 salt \ud83e\uddc2 canned_food \ud83e\udd6b bento \ud83c\udf71 rice_cracker \ud83c\udf58 rice_ball \ud83c\udf59 rice \ud83c\udf5a curry \ud83c\udf5b ramen \ud83c\udf5c spaghetti \ud83c\udf5d sweet_potato \ud83c\udf60 oden \ud83c\udf62 sushi \ud83c\udf63 fried_shrimp \ud83c\udf64 fish_cake \ud83c\udf65 moon_cake \ud83e\udd6e dango \ud83c\udf61 dumpling \ud83e\udd5f fortune_cookie \ud83e\udd60 takeout_box \ud83e\udd61 crab \ud83e\udd80 lobster \ud83e\udd9e shrimp \ud83e\udd90 squid \ud83e\udd91 oyster \ud83e\uddaa icecream \ud83c\udf66 shaved_ice \ud83c\udf67 ice_cream \ud83c\udf68 doughnut \ud83c\udf69 cookie \ud83c\udf6a birthday \ud83c\udf82 cake \ud83c\udf70 cupcake \ud83e\uddc1 pie \ud83e\udd67 chocolate_bar \ud83c\udf6b candy \ud83c\udf6c lollipop \ud83c\udf6d custard \ud83c\udf6e honey_pot \ud83c\udf6f baby_bottle \ud83c\udf7c milk_glass \ud83e\udd5b coffee \u2615 teapot \ud83e\uded6 tea \ud83c\udf75 sake \ud83c\udf76 champagne \ud83c\udf7e wine_glass \ud83c\udf77 cocktail \ud83c\udf78 tropical_drink \ud83c\udf79 beer \ud83c\udf7a beers \ud83c\udf7b clinking_glasses \ud83e\udd42 tumbler_glass \ud83e\udd43 cup_with_straw \ud83e\udd64 bubble_tea \ud83e\uddcb beverage_box \ud83e\uddc3 mate \ud83e\uddc9 ice_cube \ud83e\uddca chopsticks \ud83e\udd62 plate_with_cutlery \ud83c\udf7d\ufe0f fork_and_knife \ud83c\udf74 spoon \ud83e\udd44 hocho \ud83d\udd2a amphora \ud83c\udffa earth_africa \ud83c\udf0d earth_americas \ud83c\udf0e earth_asia \ud83c\udf0f globe_with_meridians \ud83c\udf10 world_map \ud83d\uddfa\ufe0f japan \ud83d\uddfe compass \ud83e\udded mountain_snow \ud83c\udfd4\ufe0f mountain \u26f0\ufe0f volcano \ud83c\udf0b mount_fuji \ud83d\uddfb camping \ud83c\udfd5\ufe0f beach_umbrella \ud83c\udfd6\ufe0f desert \ud83c\udfdc\ufe0f desert_island \ud83c\udfdd\ufe0f national_park \ud83c\udfde\ufe0f stadium \ud83c\udfdf\ufe0f classical_building \ud83c\udfdb\ufe0f building_construction \ud83c\udfd7\ufe0f bricks \ud83e\uddf1 rock \ud83e\udea8 wood \ud83e\udeb5 hut \ud83d\uded6 houses \ud83c\udfd8\ufe0f derelict_house \ud83c\udfda\ufe0f house \ud83c\udfe0 house_with_garden \ud83c\udfe1 office \ud83c\udfe2 post_office \ud83c\udfe3 european_post_office \ud83c\udfe4 hospital \ud83c\udfe5 bank \ud83c\udfe6 hotel \ud83c\udfe8 love_hotel \ud83c\udfe9 convenience_store \ud83c\udfea school \ud83c\udfeb department_store \ud83c\udfec factory \ud83c\udfed japanese_castle \ud83c\udfef european_castle \ud83c\udff0 wedding \ud83d\udc92 tokyo_tower \ud83d\uddfc statue_of_liberty \ud83d\uddfd church \u26ea mosque \ud83d\udd4c hindu_temple \ud83d\uded5 synagogue \ud83d\udd4d shinto_shrine \u26e9\ufe0f kaaba \ud83d\udd4b fountain \u26f2 tent \u26fa foggy \ud83c\udf01 night_with_stars \ud83c\udf03 cityscape \ud83c\udfd9\ufe0f sunrise_over_mountains \ud83c\udf04 sunrise \ud83c\udf05 city_sunset \ud83c\udf06 city_sunrise \ud83c\udf07 bridge_at_night \ud83c\udf09 hotsprings \u2668\ufe0f carousel_horse \ud83c\udfa0 ferris_wheel \ud83c\udfa1 roller_coaster \ud83c\udfa2 barber \ud83d\udc88 circus_tent \ud83c\udfaa steam_locomotive \ud83d\ude82 railway_car \ud83d\ude83 bullettrain_side \ud83d\ude84 bullettrain_front \ud83d\ude85 train2 \ud83d\ude86 metro \ud83d\ude87 light_rail \ud83d\ude88 station \ud83d\ude89 tram \ud83d\ude8a monorail \ud83d\ude9d mountain_railway \ud83d\ude9e train \ud83d\ude8b bus \ud83d\ude8c oncoming_bus \ud83d\ude8d trolleybus \ud83d\ude8e minibus \ud83d\ude90 ambulance \ud83d\ude91 fire_engine \ud83d\ude92 police_car \ud83d\ude93 oncoming_police_car \ud83d\ude94 taxi \ud83d\ude95 oncoming_taxi \ud83d\ude96 car \ud83d\ude97 oncoming_automobile \ud83d\ude98 blue_car \ud83d\ude99 pickup_truck \ud83d\udefb truck \ud83d\ude9a articulated_lorry \ud83d\ude9b tractor \ud83d\ude9c racing_car \ud83c\udfce\ufe0f motorcycle \ud83c\udfcd\ufe0f motor_scooter \ud83d\udef5 manual_wheelchair \ud83e\uddbd motorized_wheelchair \ud83e\uddbc auto_rickshaw \ud83d\udefa bike \ud83d\udeb2 kick_scooter \ud83d\udef4 skateboard \ud83d\udef9 roller_skate \ud83d\udefc busstop \ud83d\ude8f motorway \ud83d\udee3\ufe0f railway_track \ud83d\udee4\ufe0f oil_drum \ud83d\udee2\ufe0f fuelpump \u26fd rotating_light \ud83d\udea8 traffic_light \ud83d\udea5 vertical_traffic_light \ud83d\udea6 stop_sign \ud83d\uded1 construction \ud83d\udea7 anchor \u2693 boat \u26f5 canoe \ud83d\udef6 speedboat \ud83d\udea4 passenger_ship \ud83d\udef3\ufe0f ferry \u26f4\ufe0f motor_boat \ud83d\udee5\ufe0f ship \ud83d\udea2 airplane \u2708\ufe0f small_airplane \ud83d\udee9\ufe0f flight_departure \ud83d\udeeb flight_arrival \ud83d\udeec parachute \ud83e\ude82 seat \ud83d\udcba helicopter \ud83d\ude81 suspension_railway \ud83d\ude9f mountain_cableway \ud83d\udea0 aerial_tramway \ud83d\udea1 artificial_satellite \ud83d\udef0\ufe0f rocket \ud83d\ude80 flying_saucer \ud83d\udef8 bellhop_bell \ud83d\udece\ufe0f luggage \ud83e\uddf3 hourglass \u231b hourglass_flowing_sand \u23f3 watch \u231a alarm_clock \u23f0 stopwatch \u23f1\ufe0f timer_clock \u23f2\ufe0f mantelpiece_clock \ud83d\udd70\ufe0f clock12 \ud83d\udd5b clock1230 \ud83d\udd67 clock1 \ud83d\udd50 clock130 \ud83d\udd5c clock2 \ud83d\udd51 clock230 \ud83d\udd5d clock3 \ud83d\udd52 clock330 \ud83d\udd5e clock4 \ud83d\udd53 clock430 \ud83d\udd5f clock5 \ud83d\udd54 clock530 \ud83d\udd60 clock6 \ud83d\udd55 clock630 \ud83d\udd61 clock7 \ud83d\udd56 clock730 \ud83d\udd62 clock8 \ud83d\udd57 clock830 \ud83d\udd63 clock9 \ud83d\udd58 clock930 \ud83d\udd64 clock10 \ud83d\udd59 clock1030 \ud83d\udd65 clock11 \ud83d\udd5a clock1130 \ud83d\udd66 new_moon \ud83c\udf11 waxing_crescent_moon \ud83c\udf12 first_quarter_moon \ud83c\udf13 moon \ud83c\udf14 full_moon \ud83c\udf15 waning_gibbous_moon \ud83c\udf16 last_quarter_moon \ud83c\udf17 waning_crescent_moon \ud83c\udf18 crescent_moon \ud83c\udf19 new_moon_with_face \ud83c\udf1a first_quarter_moon_with_face \ud83c\udf1b last_quarter_moon_with_face \ud83c\udf1c thermometer \ud83c\udf21\ufe0f sunny \u2600\ufe0f full_moon_with_face \ud83c\udf1d sun_with_face \ud83c\udf1e ringed_planet \ud83e\ude90 star \u2b50 star2 \ud83c\udf1f stars \ud83c\udf20 milky_way \ud83c\udf0c cloud \u2601\ufe0f partly_sunny \u26c5 cloud_with_lightning_and_rain \u26c8\ufe0f sun_behind_small_cloud \ud83c\udf24\ufe0f sun_behind_large_cloud \ud83c\udf25\ufe0f sun_behind_rain_cloud \ud83c\udf26\ufe0f cloud_with_rain \ud83c\udf27\ufe0f cloud_with_snow \ud83c\udf28\ufe0f cloud_with_lightning \ud83c\udf29\ufe0f tornado \ud83c\udf2a\ufe0f fog \ud83c\udf2b\ufe0f wind_face \ud83c\udf2c\ufe0f cyclone \ud83c\udf00 rainbow \ud83c\udf08 closed_umbrella \ud83c\udf02 open_umbrella \u2602\ufe0f umbrella \u2614 parasol_on_ground \u26f1\ufe0f zap \u26a1 snowflake \u2744\ufe0f snowman_with_snow \u2603\ufe0f snowman \u26c4 comet \u2604\ufe0f fire \ud83d\udd25 droplet \ud83d\udca7 ocean \ud83c\udf0a jack_o_lantern \ud83c\udf83 christmas_tree \ud83c\udf84 fireworks \ud83c\udf86 sparkler \ud83c\udf87 firecracker \ud83e\udde8 sparkles \u2728 balloon \ud83c\udf88 tada \ud83c\udf89 confetti_ball \ud83c\udf8a tanabata_tree \ud83c\udf8b bamboo \ud83c\udf8d dolls \ud83c\udf8e flags \ud83c\udf8f wind_chime \ud83c\udf90 rice_scene \ud83c\udf91 red_envelope \ud83e\udde7 ribbon \ud83c\udf80 gift \ud83c\udf81 reminder_ribbon \ud83c\udf97\ufe0f tickets \ud83c\udf9f\ufe0f ticket \ud83c\udfab medal_military \ud83c\udf96\ufe0f trophy \ud83c\udfc6 medal_sports \ud83c\udfc5 1st_place_medal \ud83e\udd47 2nd_place_medal \ud83e\udd48 3rd_place_medal \ud83e\udd49 soccer \u26bd baseball \u26be softball \ud83e\udd4e basketball \ud83c\udfc0 volleyball \ud83c\udfd0 football \ud83c\udfc8 rugby_football \ud83c\udfc9 tennis \ud83c\udfbe flying_disc \ud83e\udd4f bowling \ud83c\udfb3 cricket_game \ud83c\udfcf field_hockey \ud83c\udfd1 ice_hockey \ud83c\udfd2 lacrosse \ud83e\udd4d ping_pong \ud83c\udfd3 badminton \ud83c\udff8 boxing_glove \ud83e\udd4a martial_arts_uniform \ud83e\udd4b goal_net \ud83e\udd45 golf \u26f3 ice_skate \u26f8\ufe0f fishing_pole_and_fish \ud83c\udfa3 diving_mask \ud83e\udd3f running_shirt_with_sash \ud83c\udfbd ski \ud83c\udfbf sled \ud83d\udef7 curling_stone \ud83e\udd4c dart \ud83c\udfaf yo_yo \ud83e\ude80 kite \ud83e\ude81 8ball \ud83c\udfb1 crystal_ball \ud83d\udd2e magic_wand \ud83e\ude84 nazar_amulet \ud83e\uddff video_game \ud83c\udfae joystick \ud83d\udd79\ufe0f slot_machine \ud83c\udfb0 game_die \ud83c\udfb2 jigsaw \ud83e\udde9 teddy_bear \ud83e\uddf8 pinata \ud83e\ude85 nesting_dolls \ud83e\ude86 spades \u2660\ufe0f hearts \u2665\ufe0f diamonds \u2666\ufe0f clubs \u2663\ufe0f chess_pawn \u265f\ufe0f black_joker \ud83c\udccf mahjong \ud83c\udc04 flower_playing_cards \ud83c\udfb4 performing_arts \ud83c\udfad framed_picture \ud83d\uddbc\ufe0f art \ud83c\udfa8 thread \ud83e\uddf5 sewing_needle \ud83e\udea1 yarn \ud83e\uddf6 knot \ud83e\udea2 eyeglasses \ud83d\udc53 dark_sunglasses \ud83d\udd76\ufe0f goggles \ud83e\udd7d lab_coat \ud83e\udd7c safety_vest \ud83e\uddba necktie \ud83d\udc54 shirt \ud83d\udc55 jeans \ud83d\udc56 scarf \ud83e\udde3 gloves \ud83e\udde4 coat \ud83e\udde5 socks \ud83e\udde6 dress \ud83d\udc57 kimono \ud83d\udc58 sari \ud83e\udd7b one_piece_swimsuit \ud83e\ude71 swim_brief \ud83e\ude72 shorts \ud83e\ude73 bikini \ud83d\udc59 womans_clothes \ud83d\udc5a purse \ud83d\udc5b handbag \ud83d\udc5c pouch \ud83d\udc5d shopping \ud83d\udecd\ufe0f school_satchel \ud83c\udf92 thong_sandal \ud83e\ude74 mans_shoe \ud83d\udc5e athletic_shoe \ud83d\udc5f hiking_boot \ud83e\udd7e flat_shoe \ud83e\udd7f high_heel \ud83d\udc60 sandal \ud83d\udc61 ballet_shoes \ud83e\ude70 boot \ud83d\udc62 crown \ud83d\udc51 womans_hat \ud83d\udc52 tophat \ud83c\udfa9 mortar_board \ud83c\udf93 billed_cap \ud83e\udde2 military_helmet \ud83e\ude96 rescue_worker_helmet \u26d1\ufe0f prayer_beads \ud83d\udcff lipstick \ud83d\udc84 ring \ud83d\udc8d gem \ud83d\udc8e mute \ud83d\udd07 speaker \ud83d\udd08 sound \ud83d\udd09 loud_sound \ud83d\udd0a loudspeaker \ud83d\udce2 mega \ud83d\udce3 postal_horn \ud83d\udcef bell \ud83d\udd14 no_bell \ud83d\udd15 musical_score \ud83c\udfbc musical_note \ud83c\udfb5 notes \ud83c\udfb6 studio_microphone \ud83c\udf99\ufe0f level_slider \ud83c\udf9a\ufe0f control_knobs \ud83c\udf9b\ufe0f microphone \ud83c\udfa4 headphones \ud83c\udfa7 radio \ud83d\udcfb saxophone \ud83c\udfb7 accordion \ud83e\ude97 guitar \ud83c\udfb8 musical_keyboard \ud83c\udfb9 trumpet \ud83c\udfba violin \ud83c\udfbb banjo \ud83e\ude95 drum \ud83e\udd41 long_drum \ud83e\ude98 iphone \ud83d\udcf1 calling \ud83d\udcf2 phone \u260e\ufe0f telephone_receiver \ud83d\udcde pager \ud83d\udcdf fax \ud83d\udce0 battery \ud83d\udd0b electric_plug \ud83d\udd0c computer \ud83d\udcbb desktop_computer \ud83d\udda5\ufe0f printer \ud83d\udda8\ufe0f keyboard \u2328\ufe0f computer_mouse \ud83d\uddb1\ufe0f trackball \ud83d\uddb2\ufe0f minidisc \ud83d\udcbd floppy_disk \ud83d\udcbe cd \ud83d\udcbf dvd \ud83d\udcc0 abacus \ud83e\uddee movie_camera \ud83c\udfa5 film_strip \ud83c\udf9e\ufe0f film_projector \ud83d\udcfd\ufe0f clapper \ud83c\udfac tv \ud83d\udcfa camera \ud83d\udcf7 camera_flash \ud83d\udcf8 video_camera \ud83d\udcf9 vhs \ud83d\udcfc mag \ud83d\udd0d mag_right \ud83d\udd0e candle \ud83d\udd6f\ufe0f bulb \ud83d\udca1 flashlight \ud83d\udd26 izakaya_lantern \ud83c\udfee diya_lamp \ud83e\ude94 notebook_with_decorative_cover \ud83d\udcd4 closed_book \ud83d\udcd5 book \ud83d\udcd6 green_book \ud83d\udcd7 blue_book \ud83d\udcd8 orange_book \ud83d\udcd9 books \ud83d\udcda notebook \ud83d\udcd3 ledger \ud83d\udcd2 page_with_curl \ud83d\udcc3 scroll \ud83d\udcdc page_facing_up \ud83d\udcc4 newspaper \ud83d\udcf0 newspaper_roll \ud83d\uddde\ufe0f bookmark_tabs \ud83d\udcd1 bookmark \ud83d\udd16 label \ud83c\udff7\ufe0f moneybag \ud83d\udcb0 coin \ud83e\ude99 yen \ud83d\udcb4 dollar \ud83d\udcb5 euro \ud83d\udcb6 pound \ud83d\udcb7 money_with_wings \ud83d\udcb8 credit_card \ud83d\udcb3 receipt \ud83e\uddfe chart \ud83d\udcb9 envelope \u2709\ufe0f email \ud83d\udce7 Tag Emoji email \ud83d\udce7 incoming_envelope \ud83d\udce8 envelope_with_arrow \ud83d\udce9 outbox_tray \ud83d\udce4 inbox_tray \ud83d\udce5 package \ud83d\udce6 mailbox \ud83d\udceb mailbox_closed \ud83d\udcea mailbox_with_mail \ud83d\udcec mailbox_with_no_mail \ud83d\udced postbox \ud83d\udcee ballot_box \ud83d\uddf3\ufe0f pencil2 \u270f\ufe0f black_nib \u2712\ufe0f fountain_pen \ud83d\udd8b\ufe0f pen \ud83d\udd8a\ufe0f paintbrush \ud83d\udd8c\ufe0f crayon \ud83d\udd8d\ufe0f memo \ud83d\udcdd briefcase \ud83d\udcbc file_folder \ud83d\udcc1 open_file_folder \ud83d\udcc2 card_index_dividers \ud83d\uddc2\ufe0f date \ud83d\udcc5 calendar \ud83d\udcc6 spiral_notepad \ud83d\uddd2\ufe0f spiral_calendar \ud83d\uddd3\ufe0f card_index \ud83d\udcc7 chart_with_upwards_trend \ud83d\udcc8 chart_with_downwards_trend \ud83d\udcc9 bar_chart \ud83d\udcca clipboard \ud83d\udccb pushpin \ud83d\udccc round_pushpin \ud83d\udccd paperclip \ud83d\udcce paperclips \ud83d\udd87\ufe0f straight_ruler \ud83d\udccf triangular_ruler \ud83d\udcd0 scissors \u2702\ufe0f card_file_box \ud83d\uddc3\ufe0f file_cabinet \ud83d\uddc4\ufe0f wastebasket \ud83d\uddd1\ufe0f lock \ud83d\udd12 unlock \ud83d\udd13 lock_with_ink_pen \ud83d\udd0f closed_lock_with_key \ud83d\udd10 key \ud83d\udd11 old_key \ud83d\udddd\ufe0f hammer \ud83d\udd28 axe \ud83e\ude93 pick \u26cf\ufe0f hammer_and_pick \u2692\ufe0f hammer_and_wrench \ud83d\udee0\ufe0f dagger \ud83d\udde1\ufe0f crossed_swords \u2694\ufe0f gun \ud83d\udd2b boomerang \ud83e\ude83 bow_and_arrow \ud83c\udff9 shield \ud83d\udee1\ufe0f carpentry_saw \ud83e\ude9a wrench \ud83d\udd27 screwdriver \ud83e\ude9b nut_and_bolt \ud83d\udd29 gear \u2699\ufe0f clamp \ud83d\udddc\ufe0f balance_scale \u2696\ufe0f probing_cane \ud83e\uddaf link \ud83d\udd17 chains \u26d3\ufe0f hook \ud83e\ude9d toolbox \ud83e\uddf0 magnet \ud83e\uddf2 ladder \ud83e\ude9c alembic \u2697\ufe0f test_tube \ud83e\uddea petri_dish \ud83e\uddeb dna \ud83e\uddec microscope \ud83d\udd2c telescope \ud83d\udd2d satellite \ud83d\udce1 syringe \ud83d\udc89 drop_of_blood \ud83e\ude78 pill \ud83d\udc8a adhesive_bandage \ud83e\ude79 stethoscope \ud83e\ude7a door \ud83d\udeaa elevator \ud83d\uded7 mirror \ud83e\ude9e window \ud83e\ude9f bed \ud83d\udecf\ufe0f couch_and_lamp \ud83d\udecb\ufe0f chair \ud83e\ude91 toilet \ud83d\udebd plunger \ud83e\udea0 shower \ud83d\udebf bathtub \ud83d\udec1 mouse_trap \ud83e\udea4 razor \ud83e\ude92 lotion_bottle \ud83e\uddf4 safety_pin \ud83e\uddf7 broom \ud83e\uddf9 basket \ud83e\uddfa roll_of_paper \ud83e\uddfb bucket \ud83e\udea3 soap \ud83e\uddfc toothbrush \ud83e\udea5 sponge \ud83e\uddfd fire_extinguisher \ud83e\uddef shopping_cart \ud83d\uded2 smoking \ud83d\udeac coffin \u26b0\ufe0f headstone \ud83e\udea6 funeral_urn \u26b1\ufe0f moyai \ud83d\uddff placard \ud83e\udea7 atm \ud83c\udfe7 put_litter_in_its_place \ud83d\udeae potable_water \ud83d\udeb0 wheelchair \u267f mens \ud83d\udeb9 womens \ud83d\udeba restroom \ud83d\udebb baby_symbol \ud83d\udebc wc \ud83d\udebe passport_control \ud83d\udec2 customs \ud83d\udec3 baggage_claim \ud83d\udec4 left_luggage \ud83d\udec5 warning \u26a0\ufe0f children_crossing \ud83d\udeb8 no_entry \u26d4 no_entry_sign \ud83d\udeab no_bicycles \ud83d\udeb3 no_smoking \ud83d\udead do_not_litter \ud83d\udeaf non-potable_water \ud83d\udeb1 no_pedestrians \ud83d\udeb7 no_mobile_phones \ud83d\udcf5 underage \ud83d\udd1e radioactive \u2622\ufe0f biohazard \u2623\ufe0f arrow_up \u2b06\ufe0f arrow_upper_right \u2197\ufe0f arrow_right \u27a1\ufe0f arrow_lower_right \u2198\ufe0f arrow_down \u2b07\ufe0f arrow_lower_left \u2199\ufe0f arrow_left \u2b05\ufe0f arrow_upper_left \u2196\ufe0f arrow_up_down \u2195\ufe0f left_right_arrow \u2194\ufe0f leftwards_arrow_with_hook \u21a9\ufe0f arrow_right_hook \u21aa\ufe0f arrow_heading_up \u2934\ufe0f arrow_heading_down \u2935\ufe0f arrows_clockwise \ud83d\udd03 arrows_counterclockwise \ud83d\udd04 back \ud83d\udd19 end \ud83d\udd1a on \ud83d\udd1b soon \ud83d\udd1c top \ud83d\udd1d place_of_worship \ud83d\uded0 atom_symbol \u269b\ufe0f om \ud83d\udd49\ufe0f star_of_david \u2721\ufe0f wheel_of_dharma \u2638\ufe0f yin_yang \u262f\ufe0f latin_cross \u271d\ufe0f orthodox_cross \u2626\ufe0f star_and_crescent \u262a\ufe0f peace_symbol \u262e\ufe0f menorah \ud83d\udd4e six_pointed_star \ud83d\udd2f aries \u2648 taurus \u2649 gemini \u264a cancer \u264b leo \u264c virgo \u264d libra \u264e scorpius \u264f sagittarius \u2650 capricorn \u2651 aquarius \u2652 pisces \u2653 ophiuchus \u26ce twisted_rightwards_arrows \ud83d\udd00 repeat \ud83d\udd01 repeat_one \ud83d\udd02 arrow_forward \u25b6\ufe0f fast_forward \u23e9 next_track_button \u23ed\ufe0f play_or_pause_button \u23ef\ufe0f arrow_backward \u25c0\ufe0f rewind \u23ea previous_track_button \u23ee\ufe0f arrow_up_small \ud83d\udd3c arrow_double_up \u23eb arrow_down_small \ud83d\udd3d arrow_double_down \u23ec pause_button \u23f8\ufe0f stop_button \u23f9\ufe0f record_button \u23fa\ufe0f eject_button \u23cf\ufe0f cinema \ud83c\udfa6 low_brightness \ud83d\udd05 high_brightness \ud83d\udd06 signal_strength \ud83d\udcf6 vibration_mode \ud83d\udcf3 mobile_phone_off \ud83d\udcf4 female_sign \u2640\ufe0f male_sign \u2642\ufe0f transgender_symbol \u26a7\ufe0f heavy_multiplication_x \u2716\ufe0f heavy_plus_sign \u2795 heavy_minus_sign \u2796 heavy_division_sign \u2797 infinity \u267e\ufe0f bangbang \u203c\ufe0f interrobang \u2049\ufe0f question \u2753 grey_question \u2754 grey_exclamation \u2755 exclamation \u2757 wavy_dash \u3030\ufe0f currency_exchange \ud83d\udcb1 heavy_dollar_sign \ud83d\udcb2 medical_symbol \u2695\ufe0f recycle \u267b\ufe0f fleur_de_lis \u269c\ufe0f trident \ud83d\udd31 name_badge \ud83d\udcdb beginner \ud83d\udd30 o \u2b55 white_check_mark \u2705 ballot_box_with_check \u2611\ufe0f heavy_check_mark \u2714\ufe0f x \u274c negative_squared_cross_mark \u274e curly_loop \u27b0 loop \u27bf part_alternation_mark \u303d\ufe0f eight_spoked_asterisk \u2733\ufe0f eight_pointed_black_star \u2734\ufe0f sparkle \u2747\ufe0f copyright \u00a9\ufe0f registered \u00ae\ufe0f tm \u2122\ufe0f hash #\ufe0f\u20e3 asterisk *\ufe0f\u20e3 zero 0\ufe0f\u20e3 one 1\ufe0f\u20e3 two 2\ufe0f\u20e3 three 3\ufe0f\u20e3 four 4\ufe0f\u20e3 five 5\ufe0f\u20e3 six 6\ufe0f\u20e3 seven 7\ufe0f\u20e3 eight 8\ufe0f\u20e3 nine 9\ufe0f\u20e3 keycap_ten \ud83d\udd1f capital_abcd \ud83d\udd20 abcd \ud83d\udd21 1234 \ud83d\udd22 symbols \ud83d\udd23 abc \ud83d\udd24 a \ud83c\udd70\ufe0f ab \ud83c\udd8e b \ud83c\udd71\ufe0f cl \ud83c\udd91 cool \ud83c\udd92 free \ud83c\udd93 information_source \u2139\ufe0f id \ud83c\udd94 m \u24c2\ufe0f new \ud83c\udd95 ng \ud83c\udd96 o2 \ud83c\udd7e\ufe0f ok \ud83c\udd97 parking \ud83c\udd7f\ufe0f sos \ud83c\udd98 up \ud83c\udd99 vs \ud83c\udd9a koko \ud83c\ude01 sa \ud83c\ude02\ufe0f u6708 \ud83c\ude37\ufe0f u6709 \ud83c\ude36 u6307 \ud83c\ude2f ideograph_advantage \ud83c\ude50 u5272 \ud83c\ude39 u7121 \ud83c\ude1a u7981 \ud83c\ude32 accept \ud83c\ude51 u7533 \ud83c\ude38 u5408 \ud83c\ude34 u7a7a \ud83c\ude33 congratulations \u3297\ufe0f secret \u3299\ufe0f u55b6 \ud83c\ude3a u6e80 \ud83c\ude35 red_circle \ud83d\udd34 orange_circle \ud83d\udfe0 yellow_circle \ud83d\udfe1 green_circle \ud83d\udfe2 large_blue_circle \ud83d\udd35 purple_circle \ud83d\udfe3 brown_circle \ud83d\udfe4 black_circle \u26ab white_circle \u26aa red_square \ud83d\udfe5 orange_square \ud83d\udfe7 yellow_square \ud83d\udfe8 green_square \ud83d\udfe9 blue_square \ud83d\udfe6 purple_square \ud83d\udfea brown_square \ud83d\udfeb black_large_square \u2b1b white_large_square \u2b1c black_medium_square \u25fc\ufe0f white_medium_square \u25fb\ufe0f black_medium_small_square \u25fe white_medium_small_square \u25fd black_small_square \u25aa\ufe0f white_small_square \u25ab\ufe0f large_orange_diamond \ud83d\udd36 large_blue_diamond \ud83d\udd37 small_orange_diamond \ud83d\udd38 small_blue_diamond \ud83d\udd39 small_red_triangle \ud83d\udd3a small_red_triangle_down \ud83d\udd3b diamond_shape_with_a_dot_inside \ud83d\udca0 radio_button \ud83d\udd18 white_square_button \ud83d\udd33 black_square_button \ud83d\udd32 checkered_flag \ud83c\udfc1 triangular_flag_on_post \ud83d\udea9 crossed_flags \ud83c\udf8c black_flag \ud83c\udff4 white_flag \ud83c\udff3\ufe0f rainbow_flag \ud83c\udff3\ufe0f\u200d\ud83c\udf08 transgender_flag \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f pirate_flag \ud83c\udff4\u200d\u2620\ufe0f ascension_island \ud83c\udde6\ud83c\udde8 andorra \ud83c\udde6\ud83c\udde9 united_arab_emirates \ud83c\udde6\ud83c\uddea afghanistan \ud83c\udde6\ud83c\uddeb antigua_barbuda \ud83c\udde6\ud83c\uddec anguilla \ud83c\udde6\ud83c\uddee albania \ud83c\udde6\ud83c\uddf1 armenia \ud83c\udde6\ud83c\uddf2 angola \ud83c\udde6\ud83c\uddf4 antarctica \ud83c\udde6\ud83c\uddf6 argentina \ud83c\udde6\ud83c\uddf7 american_samoa \ud83c\udde6\ud83c\uddf8 austria \ud83c\udde6\ud83c\uddf9 australia \ud83c\udde6\ud83c\uddfa aruba \ud83c\udde6\ud83c\uddfc aland_islands \ud83c\udde6\ud83c\uddfd azerbaijan \ud83c\udde6\ud83c\uddff bosnia_herzegovina \ud83c\udde7\ud83c\udde6 barbados \ud83c\udde7\ud83c\udde7 bangladesh \ud83c\udde7\ud83c\udde9 belgium \ud83c\udde7\ud83c\uddea burkina_faso \ud83c\udde7\ud83c\uddeb bulgaria \ud83c\udde7\ud83c\uddec bahrain \ud83c\udde7\ud83c\udded burundi \ud83c\udde7\ud83c\uddee benin \ud83c\udde7\ud83c\uddef st_barthelemy \ud83c\udde7\ud83c\uddf1 bermuda \ud83c\udde7\ud83c\uddf2 brunei \ud83c\udde7\ud83c\uddf3 bolivia \ud83c\udde7\ud83c\uddf4 caribbean_netherlands \ud83c\udde7\ud83c\uddf6 brazil \ud83c\udde7\ud83c\uddf7 bahamas \ud83c\udde7\ud83c\uddf8 bhutan \ud83c\udde7\ud83c\uddf9 bouvet_island \ud83c\udde7\ud83c\uddfb botswana \ud83c\udde7\ud83c\uddfc belarus \ud83c\udde7\ud83c\uddfe belize \ud83c\udde7\ud83c\uddff canada \ud83c\udde8\ud83c\udde6 cocos_islands \ud83c\udde8\ud83c\udde8 congo_kinshasa \ud83c\udde8\ud83c\udde9 central_african_republic \ud83c\udde8\ud83c\uddeb congo_brazzaville \ud83c\udde8\ud83c\uddec switzerland \ud83c\udde8\ud83c\udded cote_divoire \ud83c\udde8\ud83c\uddee cook_islands \ud83c\udde8\ud83c\uddf0 chile \ud83c\udde8\ud83c\uddf1 cameroon \ud83c\udde8\ud83c\uddf2 cn \ud83c\udde8\ud83c\uddf3 colombia \ud83c\udde8\ud83c\uddf4 clipperton_island \ud83c\udde8\ud83c\uddf5 costa_rica \ud83c\udde8\ud83c\uddf7 cuba \ud83c\udde8\ud83c\uddfa cape_verde \ud83c\udde8\ud83c\uddfb curacao \ud83c\udde8\ud83c\uddfc christmas_island \ud83c\udde8\ud83c\uddfd cyprus \ud83c\udde8\ud83c\uddfe czech_republic \ud83c\udde8\ud83c\uddff de \ud83c\udde9\ud83c\uddea diego_garcia \ud83c\udde9\ud83c\uddec djibouti \ud83c\udde9\ud83c\uddef denmark \ud83c\udde9\ud83c\uddf0 dominica \ud83c\udde9\ud83c\uddf2 dominican_republic \ud83c\udde9\ud83c\uddf4 algeria \ud83c\udde9\ud83c\uddff ceuta_melilla \ud83c\uddea\ud83c\udde6 ecuador \ud83c\uddea\ud83c\udde8 estonia \ud83c\uddea\ud83c\uddea egypt \ud83c\uddea\ud83c\uddec western_sahara \ud83c\uddea\ud83c\udded eritrea \ud83c\uddea\ud83c\uddf7 es \ud83c\uddea\ud83c\uddf8 ethiopia \ud83c\uddea\ud83c\uddf9 eu \ud83c\uddea\ud83c\uddfa finland \ud83c\uddeb\ud83c\uddee fiji \ud83c\uddeb\ud83c\uddef falkland_islands \ud83c\uddeb\ud83c\uddf0 micronesia \ud83c\uddeb\ud83c\uddf2 faroe_islands \ud83c\uddeb\ud83c\uddf4 fr \ud83c\uddeb\ud83c\uddf7 gabon \ud83c\uddec\ud83c\udde6 gb \ud83c\uddec\ud83c\udde7 grenada \ud83c\uddec\ud83c\udde9 georgia \ud83c\uddec\ud83c\uddea french_guiana \ud83c\uddec\ud83c\uddeb guernsey \ud83c\uddec\ud83c\uddec ghana \ud83c\uddec\ud83c\udded gibraltar \ud83c\uddec\ud83c\uddee greenland \ud83c\uddec\ud83c\uddf1 gambia \ud83c\uddec\ud83c\uddf2 guinea \ud83c\uddec\ud83c\uddf3 guadeloupe \ud83c\uddec\ud83c\uddf5 equatorial_guinea \ud83c\uddec\ud83c\uddf6 greece \ud83c\uddec\ud83c\uddf7 south_georgia_south_sandwich_islands \ud83c\uddec\ud83c\uddf8 guatemala \ud83c\uddec\ud83c\uddf9 guam \ud83c\uddec\ud83c\uddfa guinea_bissau \ud83c\uddec\ud83c\uddfc guyana \ud83c\uddec\ud83c\uddfe hong_kong \ud83c\udded\ud83c\uddf0 heard_mcdonald_islands \ud83c\udded\ud83c\uddf2 honduras \ud83c\udded\ud83c\uddf3 croatia \ud83c\udded\ud83c\uddf7 haiti \ud83c\udded\ud83c\uddf9 hungary \ud83c\udded\ud83c\uddfa canary_islands \ud83c\uddee\ud83c\udde8 indonesia \ud83c\uddee\ud83c\udde9 ireland \ud83c\uddee\ud83c\uddea israel \ud83c\uddee\ud83c\uddf1 isle_of_man \ud83c\uddee\ud83c\uddf2 india \ud83c\uddee\ud83c\uddf3 british_indian_ocean_territory \ud83c\uddee\ud83c\uddf4 iraq \ud83c\uddee\ud83c\uddf6 iran \ud83c\uddee\ud83c\uddf7 iceland \ud83c\uddee\ud83c\uddf8 it \ud83c\uddee\ud83c\uddf9 jersey \ud83c\uddef\ud83c\uddea jamaica \ud83c\uddef\ud83c\uddf2 jordan \ud83c\uddef\ud83c\uddf4 jp \ud83c\uddef\ud83c\uddf5 kenya \ud83c\uddf0\ud83c\uddea kyrgyzstan \ud83c\uddf0\ud83c\uddec cambodia \ud83c\uddf0\ud83c\udded kiribati \ud83c\uddf0\ud83c\uddee comoros \ud83c\uddf0\ud83c\uddf2 st_kitts_nevis \ud83c\uddf0\ud83c\uddf3 north_korea \ud83c\uddf0\ud83c\uddf5 kr \ud83c\uddf0\ud83c\uddf7 kuwait \ud83c\uddf0\ud83c\uddfc cayman_islands \ud83c\uddf0\ud83c\uddfe kazakhstan \ud83c\uddf0\ud83c\uddff laos \ud83c\uddf1\ud83c\udde6 lebanon \ud83c\uddf1\ud83c\udde7 st_lucia \ud83c\uddf1\ud83c\udde8 liechtenstein \ud83c\uddf1\ud83c\uddee sri_lanka \ud83c\uddf1\ud83c\uddf0 liberia \ud83c\uddf1\ud83c\uddf7 lesotho \ud83c\uddf1\ud83c\uddf8 lithuania \ud83c\uddf1\ud83c\uddf9 luxembourg \ud83c\uddf1\ud83c\uddfa latvia \ud83c\uddf1\ud83c\uddfb libya \ud83c\uddf1\ud83c\uddfe morocco \ud83c\uddf2\ud83c\udde6 monaco \ud83c\uddf2\ud83c\udde8 moldova \ud83c\uddf2\ud83c\udde9 montenegro \ud83c\uddf2\ud83c\uddea st_martin \ud83c\uddf2\ud83c\uddeb madagascar \ud83c\uddf2\ud83c\uddec marshall_islands \ud83c\uddf2\ud83c\udded macedonia \ud83c\uddf2\ud83c\uddf0 mali \ud83c\uddf2\ud83c\uddf1 myanmar \ud83c\uddf2\ud83c\uddf2 mongolia \ud83c\uddf2\ud83c\uddf3 macau \ud83c\uddf2\ud83c\uddf4 northern_mariana_islands \ud83c\uddf2\ud83c\uddf5 martinique \ud83c\uddf2\ud83c\uddf6 mauritania \ud83c\uddf2\ud83c\uddf7 montserrat \ud83c\uddf2\ud83c\uddf8 malta \ud83c\uddf2\ud83c\uddf9 mauritius \ud83c\uddf2\ud83c\uddfa maldives \ud83c\uddf2\ud83c\uddfb malawi \ud83c\uddf2\ud83c\uddfc mexico \ud83c\uddf2\ud83c\uddfd malaysia \ud83c\uddf2\ud83c\uddfe mozambique \ud83c\uddf2\ud83c\uddff namibia \ud83c\uddf3\ud83c\udde6 new_caledonia \ud83c\uddf3\ud83c\udde8 niger \ud83c\uddf3\ud83c\uddea norfolk_island \ud83c\uddf3\ud83c\uddeb nigeria \ud83c\uddf3\ud83c\uddec nicaragua \ud83c\uddf3\ud83c\uddee netherlands \ud83c\uddf3\ud83c\uddf1 norway \ud83c\uddf3\ud83c\uddf4 nepal \ud83c\uddf3\ud83c\uddf5 nauru \ud83c\uddf3\ud83c\uddf7 niue \ud83c\uddf3\ud83c\uddfa new_zealand \ud83c\uddf3\ud83c\uddff oman \ud83c\uddf4\ud83c\uddf2 panama \ud83c\uddf5\ud83c\udde6 peru \ud83c\uddf5\ud83c\uddea french_polynesia \ud83c\uddf5\ud83c\uddeb papua_new_guinea \ud83c\uddf5\ud83c\uddec philippines \ud83c\uddf5\ud83c\udded pakistan \ud83c\uddf5\ud83c\uddf0 poland \ud83c\uddf5\ud83c\uddf1 st_pierre_miquelon \ud83c\uddf5\ud83c\uddf2 pitcairn_islands \ud83c\uddf5\ud83c\uddf3 puerto_rico \ud83c\uddf5\ud83c\uddf7 palestinian_territories \ud83c\uddf5\ud83c\uddf8 portugal \ud83c\uddf5\ud83c\uddf9 palau \ud83c\uddf5\ud83c\uddfc paraguay \ud83c\uddf5\ud83c\uddfe qatar \ud83c\uddf6\ud83c\udde6 reunion \ud83c\uddf7\ud83c\uddea romania \ud83c\uddf7\ud83c\uddf4 serbia \ud83c\uddf7\ud83c\uddf8 ru \ud83c\uddf7\ud83c\uddfa rwanda \ud83c\uddf7\ud83c\uddfc saudi_arabia \ud83c\uddf8\ud83c\udde6 solomon_islands \ud83c\uddf8\ud83c\udde7 seychelles \ud83c\uddf8\ud83c\udde8 sudan \ud83c\uddf8\ud83c\udde9 sweden \ud83c\uddf8\ud83c\uddea singapore \ud83c\uddf8\ud83c\uddec st_helena \ud83c\uddf8\ud83c\udded slovenia \ud83c\uddf8\ud83c\uddee svalbard_jan_mayen \ud83c\uddf8\ud83c\uddef slovakia \ud83c\uddf8\ud83c\uddf0 sierra_leone \ud83c\uddf8\ud83c\uddf1 san_marino \ud83c\uddf8\ud83c\uddf2 senegal \ud83c\uddf8\ud83c\uddf3 somalia \ud83c\uddf8\ud83c\uddf4 suriname \ud83c\uddf8\ud83c\uddf7 south_sudan \ud83c\uddf8\ud83c\uddf8 sao_tome_principe \ud83c\uddf8\ud83c\uddf9 el_salvador \ud83c\uddf8\ud83c\uddfb sint_maarten \ud83c\uddf8\ud83c\uddfd syria \ud83c\uddf8\ud83c\uddfe swaziland \ud83c\uddf8\ud83c\uddff tristan_da_cunha \ud83c\uddf9\ud83c\udde6 turks_caicos_islands \ud83c\uddf9\ud83c\udde8 chad \ud83c\uddf9\ud83c\udde9 french_southern_territories \ud83c\uddf9\ud83c\uddeb togo \ud83c\uddf9\ud83c\uddec thailand \ud83c\uddf9\ud83c\udded tajikistan \ud83c\uddf9\ud83c\uddef tokelau \ud83c\uddf9\ud83c\uddf0 timor_leste \ud83c\uddf9\ud83c\uddf1 turkmenistan \ud83c\uddf9\ud83c\uddf2 tunisia \ud83c\uddf9\ud83c\uddf3 tonga \ud83c\uddf9\ud83c\uddf4 tr \ud83c\uddf9\ud83c\uddf7 trinidad_tobago \ud83c\uddf9\ud83c\uddf9 tuvalu \ud83c\uddf9\ud83c\uddfb taiwan \ud83c\uddf9\ud83c\uddfc tanzania \ud83c\uddf9\ud83c\uddff ukraine \ud83c\uddfa\ud83c\udde6 uganda \ud83c\uddfa\ud83c\uddec us_outlying_islands \ud83c\uddfa\ud83c\uddf2 united_nations \ud83c\uddfa\ud83c\uddf3 us \ud83c\uddfa\ud83c\uddf8 uruguay \ud83c\uddfa\ud83c\uddfe uzbekistan \ud83c\uddfa\ud83c\uddff vatican_city \ud83c\uddfb\ud83c\udde6 st_vincent_grenadines \ud83c\uddfb\ud83c\udde8 venezuela \ud83c\uddfb\ud83c\uddea british_virgin_islands \ud83c\uddfb\ud83c\uddec us_virgin_islands \ud83c\uddfb\ud83c\uddee vietnam \ud83c\uddfb\ud83c\uddf3 vanuatu \ud83c\uddfb\ud83c\uddfa wallis_futuna \ud83c\uddfc\ud83c\uddeb samoa \ud83c\uddfc\ud83c\uddf8 kosovo \ud83c\uddfd\ud83c\uddf0 yemen \ud83c\uddfe\ud83c\uddea mayotte \ud83c\uddfe\ud83c\uddf9 south_africa \ud83c\uddff\ud83c\udde6 zambia \ud83c\uddff\ud83c\uddf2 zimbabwe \ud83c\uddff\ud83c\uddfc england \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f scotland \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f wales \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f","title":"Emoji reference"},{"location":"examples/","text":"Examples \u00b6 There are a million ways to use ntfy, but here are some inspirations. I try to collect examples on GitHub , so be sure to check those out, too. Info Many of these examples were contributed by ntfy users. If you have other examples of how you use ntfy, please create a pull request , and I'll happily include it. Also note, that I cannot guarantee that all of these examples are functional. Many of them I have not tried myself. Cronjobs \u00b6 ntfy is perfect for any kind of cronjobs or just when long processes are done (backups, pipelines, rsync copy commands, ...). I started adding notifications pretty much all of my scripts. Typically, I just chain the curl call directly to the command I'm running. The following example will either send Laptop backup succeeded or \u26a0\ufe0f Laptop backup failed directly to my phone: rsync -a root@laptop /backups/laptop \\ && zfs snapshot ... \\ && curl -H prio:low -d \"Laptop backup succeeded\" ntfy.sh/backups \\ || curl -H tags:warning -H prio:high -d \"Laptop backup failed\" ntfy.sh/backups Here's one for the history books. I desperately want the github.com/ntfy organization, but all my tickets with GitHub have been hopeless. In case it ever becomes available, I want to know immediately. # Check github/ntfy user */6 * * * * if curl -s https://api.github.com/users/ntfy | grep \"Not Found\"; then curl -d \"github.com/ntfy is available\" -H \"Tags: tada\" -H \"Prio: high\" ntfy.sh/my-alerts; fi Low disk space alerts \u00b6 Here's a simple cronjob that I use to alert me when the disk space on the root disk is running low. It's simple, but effective. #!/bin/bash mingigs = 10 avail = $( df | awk '$6 == \"/\" && $4 < ' $mingigs ' * 1024*1024 { print $4/1024/1024 }' ) topicurl = https://ntfy.sh/mytopic if [ -n \" $avail \" ] ; then curl \\ -d \"Only $avail GB available on the root disk. Better clean that up.\" \\ -H \"Title: Low disk space alert on $( hostname ) \" \\ -H \"Priority: high\" \\ -H \"Tags: warning,cd\" \\ $topicurl fi SSH login alerts \u00b6 Years ago my home server was broken into. That shook me hard, so every time someone logs into any machine that I own, I now message myself. Here's an example of how to use PAM to notify yourself on SSH login. /etc/pam.d/sshd /usr/bin/ntfy-ssh-login.sh # at the end of the file session optional pam_exec.so /usr/bin/ntfy-ssh-login.sh #!/bin/bash if [ \" ${ PAM_TYPE } \" = \"open_session\" ] ; then curl \\ -H prio:high \\ -H tags:warning \\ -d \"SSH login: ${ PAM_USER } from ${ PAM_RHOST } \" \\ ntfy.sh/alerts fi Collect data from multiple machines \u00b6 The other day I was running tasks on 20 servers, and I wanted to collect the interim results as a CSV in one place. Each of the servers was publishing to a topic as the results completed ( publish-result.sh ), and I had one central collector to grab the results as they came in ( collect-results.sh ). It looked something like this: collect-results.sh publish-result.sh while read result ; do [ -n \" $result \" ] && echo \" $result \" >> results.csv done < < ( stdbuf -i0 -o0 curl -s ntfy.sh/results/raw ) // This script was run on each of the 20 servers. It was doing heavy processing ... // Publish script results curl -d \" $( hostname ) , $count , $time \" ntfy.sh/results Ansible, Salt and Puppet \u00b6 You can easily integrate ntfy into Ansible, Salt, or Puppet to notify you when runs are done or are highstated. One of my co-workers uses the following Ansible task to let him know when things are done: - name : Send ntfy.sh update uri : url : \"https://ntfy.sh/{{ ntfy_channel }}\" method : POST body : \"{{ inventory_hostname }} reseeding complete\" There's also a dedicated Ansible action plugin (one which runs on the Ansible controller) called ansible-ntfy . The following task posts a message to ntfy at its default URL ( attrs and other attributes are optional): - name : \"Notify ntfy that we're done\" ntfy : msg : \"deployment on {{ inventory_hostname }} is complete. \ud83d\udc04\" attrs : tags : [ heavy_check_mark ] priority : 1 GitHub Actions \u00b6 You can send a message during a workflow run with curl. Here is an example sending info about the repo, commit and job status. - name : Actions Ntfy run : | curl \\ -u ${{ secrets.NTFY_CRED }} \\ -H \"Title: Title here\" \\ -H \"Content-Type: text/plain\" \\ -d $'Repo: ${{ github.repository }}\\nCommit: ${{ github.sha }}\\nRef: ${{ github.ref }}\\nStatus: ${{ job.status}}' \\ ${{ secrets.NTFY_URL }} Watchtower (shoutrrr) \u00b6 You can use shoutrrr generic webhook support to send Watchtower notifications to your ntfy topic. Example docker-compose.yml: services : watchtower : image : containrrr/watchtower environment : - WATCHTOWER_NOTIFICATIONS=shoutrrr - WATCHTOWER_NOTIFICATION_URL=generic+https://ntfy.sh/my_watchtower_topic?title=WatchtowerUpdates Or, if you only want to send notifications using shoutrrr: shoutrrr send -u \"generic+https://ntfy.sh/my_watchtower_topic?title=WatchtowerUpdates\" -m \"testMessage\" Sonarr, Radarr, Lidarr, Readarr, Prowlarr, SABnzbd \u00b6 It's possible to use custom scripts for all the *arr services, plus SABnzbd. Notifications for downloads, warnings, grabs etc. Some simple bash scripts to achieve this are kindly provided in nickexyz's repository . Node-RED \u00b6 You can use the HTTP request node to send messages with Node-RED , some examples: Example: Send a message (click to expand) [ { \"id\" : \"c956e688cc74ad8e\" , \"type\" : \"http request\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"ntfy.sh\" , \"method\" : \"POST\" , \"ret\" : \"txt\" , \"paytoqs\" : \"ignore\" , \"url\" : \"https://ntfy.sh/mytopic\" , \"tls\" : \"\" , \"persist\" : false , \"proxy\" : \"\" , \"authType\" : \"\" , \"senderr\" : false , \"credentials\" : { \"user\" : \"\" , \"password\" : \"\" }, \"x\" : 590 , \"y\" : 3160 , \"wires\" : [ [] ] }, { \"id\" : \"32ee1eade51fae50\" , \"type\" : \"function\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"data\" , \"func\" : \"msg.payload = \\\"Something happened\\\";\\nmsg.headers = {};\\nmsg.headers['tags'] = 'house';\\nmsg.headers['X-Title'] = 'Home Assistant';\\n\\nreturn msg;\" , \"outputs\" : 1 , \"noerr\" : 0 , \"initialize\" : \"\" , \"finalize\" : \"\" , \"libs\" : [], \"x\" : 470 , \"y\" : 3160 , \"wires\" : [ [ \"c956e688cc74ad8e\" ] ] }, { \"id\" : \"b287e59cd2311815\" , \"type\" : \"inject\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"Manual start\" , \"props\" : [ { \"p\" : \"payload\" }, { \"p\" : \"topic\" , \"vt\" : \"str\" } ], \"repeat\" : \"\" , \"crontab\" : \"\" , \"once\" : false , \"onceDelay\" : \"20\" , \"topic\" : \"\" , \"payload\" : \"\" , \"payloadType\" : \"date\" , \"x\" : 330 , \"y\" : 3160 , \"wires\" : [ [ \"32ee1eade51fae50\" ] ] } ] Example: Send a picture (click to expand) [ { \"id\" : \"d135a13eadeb9d6d\" , \"type\" : \"http request\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"Download image\" , \"method\" : \"GET\" , \"ret\" : \"bin\" , \"paytoqs\" : \"ignore\" , \"url\" : \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\" , \"tls\" : \"\" , \"persist\" : false , \"proxy\" : \"\" , \"authType\" : \"\" , \"senderr\" : false , \"credentials\" : { \"user\" : \"\" , \"password\" : \"\" }, \"x\" : 490 , \"y\" : 3320 , \"wires\" : [ [ \"6e75bc41d2ec4a03\" ] ] }, { \"id\" : \"6e75bc41d2ec4a03\" , \"type\" : \"function\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"data\" , \"func\" : \"msg.payload = msg.payload;\\nmsg.headers = {};\\nmsg.headers['tags'] = 'house';\\nmsg.headers['X-Title'] = 'Home Assistant - Picture';\\n\\nreturn msg;\" , \"outputs\" : 1 , \"noerr\" : 0 , \"initialize\" : \"\" , \"finalize\" : \"\" , \"libs\" : [], \"x\" : 650 , \"y\" : 3320 , \"wires\" : [ [ \"eb160615b6ceda98\" ] ] }, { \"id\" : \"eb160615b6ceda98\" , \"type\" : \"http request\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"ntfy.sh\" , \"method\" : \"PUT\" , \"ret\" : \"bin\" , \"paytoqs\" : \"ignore\" , \"url\" : \"https://ntfy.sh/mytopic\" , \"tls\" : \"\" , \"persist\" : false , \"proxy\" : \"\" , \"authType\" : \"\" , \"senderr\" : false , \"credentials\" : { \"user\" : \"\" , \"password\" : \"\" }, \"x\" : 770 , \"y\" : 3320 , \"wires\" : [ [] ] }, { \"id\" : \"5b8dbf15c8a7a3a5\" , \"type\" : \"inject\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"Manual start\" , \"props\" : [ { \"p\" : \"payload\" }, { \"p\" : \"topic\" , \"vt\" : \"str\" } ], \"repeat\" : \"\" , \"crontab\" : \"\" , \"once\" : false , \"onceDelay\" : \"20\" , \"topic\" : \"\" , \"payload\" : \"\" , \"payloadType\" : \"date\" , \"x\" : 310 , \"y\" : 3320 , \"wires\" : [ [ \"d135a13eadeb9d6d\" ] ] } ] Gatus \u00b6 To use ntfy with Gatus , you can use the ntfy alerting provider like so: alerting : ntfy : url : \"https://ntfy.sh\" topic : \"YOUR_NTFY_TOPIC\" priority : 3 For more information on using ntfy with Gatus, refer to Configuring ntfy alerts . Alternative: Using the custom alerting provider alerting : custom : url : \"https://ntfy.sh\" method : \"POST\" body : | { \"topic\": \"mytopic\", \"message\": \"[ENDPOINT_NAME] - [ALERT_DESCRIPTION]\", \"title\": \"Gatus\", \"tags\": [\"[ALERT_TRIGGERED_OR_RESOLVED]\"], \"priority\": 3 } default-alert : enabled : true description : \"health check failed\" send-on-resolved : true failure-threshold : 3 success-threshold : 3 placeholders : ALERT_TRIGGERED_OR_RESOLVED : TRIGGERED : \"warning\" RESOLVED : \"white_check_mark\" Jellyseerr/Overseerr webhook \u00b6 Here is an example for jellyseerr / overseerr webhook JSON payload. Remember to change the https://requests.example.com to your jellyseerr/overseerr URL. { \"topic\" : \"requests\" , \"title\" : \"{{event}}\" , \"message\" : \"{{subject}}\\n{{message}}\\n\\nRequested by: {{requestedBy_username}}\\n\\nStatus: {{media_status}}\\nRequest Id: {{request_id}}\" , \"priority\" : 4 , \"attach\" : \"{{image}}\" , \"click\" : \"https://requests.example.com/{{media_type}}/{{media_tmdbid}}\" } Home Assistant \u00b6 Here is an example for the configuration.yml file to setup a REST notify component. Since Home Assistant is going to POST JSON, you need to specify the root of your ntfy resource. notify : - name : ntfy platform : rest method : POST_JSON data : topic : YOUR_NTFY_TOPIC title_param_name : title message_param_name : message resource : https://ntfy.sh If you need to authenticate to your ntfy resource, define the authentication, username and password as below: notify : - name : ntfy platform : rest method : POST_JSON authentication : basic username : YOUR_USERNAME password : YOUR_PASSWORD data : topic : YOUR_NTFY_TOPIC title_param_name : title message_param_name : message resource : https://ntfy.sh If you need to add any other ntfy specific parameters such as priority, tags, etc., add them to the data array in the example yml. For example: notify : - name : ntfy platform : rest method : POST_JSON data : topic : YOUR_NTFY_TOPIC priority : 4 title_param_name : title message_param_name : message resource : https://ntfy.sh Uptime Kuma \u00b6 Go to your Uptime Kuma Settings > Notifications, click on Setup Notification . Then set your desired title (e.g. \"Uptime Kuma\"), ntfy topic , Server URL and priority (1-5) : You can now test the notifications and apply them to monitors: UptimeRobot \u00b6 Go to your UptimeRobot My Settings > Alert Contacts > Add Alert Contact Select Alert Contact Type = Webhook. Then set your desired Friendly Name (e.g. \"ntfy-sh-UP\"), URL to Notify , POST value and select checkbox Send as JSON (application/json) . Make sure to send the JSON POST request to ntfy.domain.com without the topic name in the url and include the \"topic\" name in the JSON body. { \"topic\" : \"myTopic\" , \"title\" : \"*monitorFriendlyName* *alertTypeFriendlyName*\" , \"message\" : \"*alertDetails*\" , \"tags\" : [ \"green_circle\" ], \"priority\" : 3 , \"click\" : h tt ps : //uptimerobot.com/dashboard#*monitorID* } You can create two Alert Contacts each with a different icon and priority, for example: { \"topic\" : \"myTopic\" , \"title\" : \"*monitorFriendlyName* *alertTypeFriendlyName*\" , \"message\" : \"*alertDetails*\" , \"tags\" : [ \"red_circle\" ], \"priority\" : 3 , \"click\" : h tt ps : //uptimerobot.com/dashboard#*monitorID* } You can now add the created Alerts Contact(s) to the monitor(s) and test the notifications: Apprise \u00b6 ntfy is integrated natively into Apprise (also check out the Apprise/ntfy wiki page ). You can use it like this: apprise -vv -t \"Test Message Title\" -b \"Test Message Body\" \\ ntfy://mytopic Or with your own server like this: apprise -vv -t \"Test Message Title\" -b \"Test Message Body\" \\ ntfy://ntfy.example.com/mytopic Rundeck \u00b6 Rundeck by default sends only HTML email which is not processed by ntfy SMTP server. Append following configurations to rundeck-config.properties : # Template rundeck.mail.template.file=/path/to/template.html rundeck.mail.template.log.formatted=false Example template.html : < div > Execution ${execution.id} was < b > ${execution.status} </ b ></ div > < ul > < li >< a href = \"${execution.href}\" > Execution result </ a ></ li > < li >< a href = \"${job.href}\" > Job </ a ></ li > < li >< a href = \"${execution.projectHref}\" > Project: ${execution.project} </ a ></ li > < li >< a href = \"${rundeck.href}\" > Rundeck </ a ></ li > </ ul > Add notification on Rundeck (attachment type must be: Attached as file to email ):","title":"Examples"},{"location":"examples/#examples","text":"There are a million ways to use ntfy, but here are some inspirations. I try to collect examples on GitHub , so be sure to check those out, too. Info Many of these examples were contributed by ntfy users. If you have other examples of how you use ntfy, please create a pull request , and I'll happily include it. Also note, that I cannot guarantee that all of these examples are functional. Many of them I have not tried myself.","title":"Examples"},{"location":"examples/#cronjobs","text":"ntfy is perfect for any kind of cronjobs or just when long processes are done (backups, pipelines, rsync copy commands, ...). I started adding notifications pretty much all of my scripts. Typically, I just chain the curl call directly to the command I'm running. The following example will either send Laptop backup succeeded or \u26a0\ufe0f Laptop backup failed directly to my phone: rsync -a root@laptop /backups/laptop \\ && zfs snapshot ... \\ && curl -H prio:low -d \"Laptop backup succeeded\" ntfy.sh/backups \\ || curl -H tags:warning -H prio:high -d \"Laptop backup failed\" ntfy.sh/backups Here's one for the history books. I desperately want the github.com/ntfy organization, but all my tickets with GitHub have been hopeless. In case it ever becomes available, I want to know immediately. # Check github/ntfy user */6 * * * * if curl -s https://api.github.com/users/ntfy | grep \"Not Found\"; then curl -d \"github.com/ntfy is available\" -H \"Tags: tada\" -H \"Prio: high\" ntfy.sh/my-alerts; fi","title":"Cronjobs"},{"location":"examples/#low-disk-space-alerts","text":"Here's a simple cronjob that I use to alert me when the disk space on the root disk is running low. It's simple, but effective. #!/bin/bash mingigs = 10 avail = $( df | awk '$6 == \"/\" && $4 < ' $mingigs ' * 1024*1024 { print $4/1024/1024 }' ) topicurl = https://ntfy.sh/mytopic if [ -n \" $avail \" ] ; then curl \\ -d \"Only $avail GB available on the root disk. Better clean that up.\" \\ -H \"Title: Low disk space alert on $( hostname ) \" \\ -H \"Priority: high\" \\ -H \"Tags: warning,cd\" \\ $topicurl fi","title":"Low disk space alerts"},{"location":"examples/#ssh-login-alerts","text":"Years ago my home server was broken into. That shook me hard, so every time someone logs into any machine that I own, I now message myself. Here's an example of how to use PAM to notify yourself on SSH login. /etc/pam.d/sshd /usr/bin/ntfy-ssh-login.sh # at the end of the file session optional pam_exec.so /usr/bin/ntfy-ssh-login.sh #!/bin/bash if [ \" ${ PAM_TYPE } \" = \"open_session\" ] ; then curl \\ -H prio:high \\ -H tags:warning \\ -d \"SSH login: ${ PAM_USER } from ${ PAM_RHOST } \" \\ ntfy.sh/alerts fi","title":"SSH login alerts"},{"location":"examples/#collect-data-from-multiple-machines","text":"The other day I was running tasks on 20 servers, and I wanted to collect the interim results as a CSV in one place. Each of the servers was publishing to a topic as the results completed ( publish-result.sh ), and I had one central collector to grab the results as they came in ( collect-results.sh ). It looked something like this: collect-results.sh publish-result.sh while read result ; do [ -n \" $result \" ] && echo \" $result \" >> results.csv done < < ( stdbuf -i0 -o0 curl -s ntfy.sh/results/raw ) // This script was run on each of the 20 servers. It was doing heavy processing ... // Publish script results curl -d \" $( hostname ) , $count , $time \" ntfy.sh/results","title":"Collect data from multiple machines"},{"location":"examples/#ansible-salt-and-puppet","text":"You can easily integrate ntfy into Ansible, Salt, or Puppet to notify you when runs are done or are highstated. One of my co-workers uses the following Ansible task to let him know when things are done: - name : Send ntfy.sh update uri : url : \"https://ntfy.sh/{{ ntfy_channel }}\" method : POST body : \"{{ inventory_hostname }} reseeding complete\" There's also a dedicated Ansible action plugin (one which runs on the Ansible controller) called ansible-ntfy . The following task posts a message to ntfy at its default URL ( attrs and other attributes are optional): - name : \"Notify ntfy that we're done\" ntfy : msg : \"deployment on {{ inventory_hostname }} is complete. \ud83d\udc04\" attrs : tags : [ heavy_check_mark ] priority : 1","title":"Ansible, Salt and Puppet"},{"location":"examples/#github-actions","text":"You can send a message during a workflow run with curl. Here is an example sending info about the repo, commit and job status. - name : Actions Ntfy run : | curl \\ -u ${{ secrets.NTFY_CRED }} \\ -H \"Title: Title here\" \\ -H \"Content-Type: text/plain\" \\ -d $'Repo: ${{ github.repository }}\\nCommit: ${{ github.sha }}\\nRef: ${{ github.ref }}\\nStatus: ${{ job.status}}' \\ ${{ secrets.NTFY_URL }}","title":"GitHub Actions"},{"location":"examples/#watchtower-shoutrrr","text":"You can use shoutrrr generic webhook support to send Watchtower notifications to your ntfy topic. Example docker-compose.yml: services : watchtower : image : containrrr/watchtower environment : - WATCHTOWER_NOTIFICATIONS=shoutrrr - WATCHTOWER_NOTIFICATION_URL=generic+https://ntfy.sh/my_watchtower_topic?title=WatchtowerUpdates Or, if you only want to send notifications using shoutrrr: shoutrrr send -u \"generic+https://ntfy.sh/my_watchtower_topic?title=WatchtowerUpdates\" -m \"testMessage\"","title":"Watchtower (shoutrrr)"},{"location":"examples/#sonarr-radarr-lidarr-readarr-prowlarr-sabnzbd","text":"It's possible to use custom scripts for all the *arr services, plus SABnzbd. Notifications for downloads, warnings, grabs etc. Some simple bash scripts to achieve this are kindly provided in nickexyz's repository .","title":"Sonarr, Radarr, Lidarr, Readarr, Prowlarr, SABnzbd"},{"location":"examples/#node-red","text":"You can use the HTTP request node to send messages with Node-RED , some examples: Example: Send a message (click to expand) [ { \"id\" : \"c956e688cc74ad8e\" , \"type\" : \"http request\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"ntfy.sh\" , \"method\" : \"POST\" , \"ret\" : \"txt\" , \"paytoqs\" : \"ignore\" , \"url\" : \"https://ntfy.sh/mytopic\" , \"tls\" : \"\" , \"persist\" : false , \"proxy\" : \"\" , \"authType\" : \"\" , \"senderr\" : false , \"credentials\" : { \"user\" : \"\" , \"password\" : \"\" }, \"x\" : 590 , \"y\" : 3160 , \"wires\" : [ [] ] }, { \"id\" : \"32ee1eade51fae50\" , \"type\" : \"function\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"data\" , \"func\" : \"msg.payload = \\\"Something happened\\\";\\nmsg.headers = {};\\nmsg.headers['tags'] = 'house';\\nmsg.headers['X-Title'] = 'Home Assistant';\\n\\nreturn msg;\" , \"outputs\" : 1 , \"noerr\" : 0 , \"initialize\" : \"\" , \"finalize\" : \"\" , \"libs\" : [], \"x\" : 470 , \"y\" : 3160 , \"wires\" : [ [ \"c956e688cc74ad8e\" ] ] }, { \"id\" : \"b287e59cd2311815\" , \"type\" : \"inject\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"Manual start\" , \"props\" : [ { \"p\" : \"payload\" }, { \"p\" : \"topic\" , \"vt\" : \"str\" } ], \"repeat\" : \"\" , \"crontab\" : \"\" , \"once\" : false , \"onceDelay\" : \"20\" , \"topic\" : \"\" , \"payload\" : \"\" , \"payloadType\" : \"date\" , \"x\" : 330 , \"y\" : 3160 , \"wires\" : [ [ \"32ee1eade51fae50\" ] ] } ] Example: Send a picture (click to expand) [ { \"id\" : \"d135a13eadeb9d6d\" , \"type\" : \"http request\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"Download image\" , \"method\" : \"GET\" , \"ret\" : \"bin\" , \"paytoqs\" : \"ignore\" , \"url\" : \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\" , \"tls\" : \"\" , \"persist\" : false , \"proxy\" : \"\" , \"authType\" : \"\" , \"senderr\" : false , \"credentials\" : { \"user\" : \"\" , \"password\" : \"\" }, \"x\" : 490 , \"y\" : 3320 , \"wires\" : [ [ \"6e75bc41d2ec4a03\" ] ] }, { \"id\" : \"6e75bc41d2ec4a03\" , \"type\" : \"function\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"data\" , \"func\" : \"msg.payload = msg.payload;\\nmsg.headers = {};\\nmsg.headers['tags'] = 'house';\\nmsg.headers['X-Title'] = 'Home Assistant - Picture';\\n\\nreturn msg;\" , \"outputs\" : 1 , \"noerr\" : 0 , \"initialize\" : \"\" , \"finalize\" : \"\" , \"libs\" : [], \"x\" : 650 , \"y\" : 3320 , \"wires\" : [ [ \"eb160615b6ceda98\" ] ] }, { \"id\" : \"eb160615b6ceda98\" , \"type\" : \"http request\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"ntfy.sh\" , \"method\" : \"PUT\" , \"ret\" : \"bin\" , \"paytoqs\" : \"ignore\" , \"url\" : \"https://ntfy.sh/mytopic\" , \"tls\" : \"\" , \"persist\" : false , \"proxy\" : \"\" , \"authType\" : \"\" , \"senderr\" : false , \"credentials\" : { \"user\" : \"\" , \"password\" : \"\" }, \"x\" : 770 , \"y\" : 3320 , \"wires\" : [ [] ] }, { \"id\" : \"5b8dbf15c8a7a3a5\" , \"type\" : \"inject\" , \"z\" : \"fabdd7a3.4045a\" , \"name\" : \"Manual start\" , \"props\" : [ { \"p\" : \"payload\" }, { \"p\" : \"topic\" , \"vt\" : \"str\" } ], \"repeat\" : \"\" , \"crontab\" : \"\" , \"once\" : false , \"onceDelay\" : \"20\" , \"topic\" : \"\" , \"payload\" : \"\" , \"payloadType\" : \"date\" , \"x\" : 310 , \"y\" : 3320 , \"wires\" : [ [ \"d135a13eadeb9d6d\" ] ] } ]","title":"Node-RED"},{"location":"examples/#gatus","text":"To use ntfy with Gatus , you can use the ntfy alerting provider like so: alerting : ntfy : url : \"https://ntfy.sh\" topic : \"YOUR_NTFY_TOPIC\" priority : 3 For more information on using ntfy with Gatus, refer to Configuring ntfy alerts . Alternative: Using the custom alerting provider alerting : custom : url : \"https://ntfy.sh\" method : \"POST\" body : | { \"topic\": \"mytopic\", \"message\": \"[ENDPOINT_NAME] - [ALERT_DESCRIPTION]\", \"title\": \"Gatus\", \"tags\": [\"[ALERT_TRIGGERED_OR_RESOLVED]\"], \"priority\": 3 } default-alert : enabled : true description : \"health check failed\" send-on-resolved : true failure-threshold : 3 success-threshold : 3 placeholders : ALERT_TRIGGERED_OR_RESOLVED : TRIGGERED : \"warning\" RESOLVED : \"white_check_mark\"","title":"Gatus"},{"location":"examples/#jellyseerroverseerr-webhook","text":"Here is an example for jellyseerr / overseerr webhook JSON payload. Remember to change the https://requests.example.com to your jellyseerr/overseerr URL. { \"topic\" : \"requests\" , \"title\" : \"{{event}}\" , \"message\" : \"{{subject}}\\n{{message}}\\n\\nRequested by: {{requestedBy_username}}\\n\\nStatus: {{media_status}}\\nRequest Id: {{request_id}}\" , \"priority\" : 4 , \"attach\" : \"{{image}}\" , \"click\" : \"https://requests.example.com/{{media_type}}/{{media_tmdbid}}\" }","title":"Jellyseerr/Overseerr webhook"},{"location":"examples/#home-assistant","text":"Here is an example for the configuration.yml file to setup a REST notify component. Since Home Assistant is going to POST JSON, you need to specify the root of your ntfy resource. notify : - name : ntfy platform : rest method : POST_JSON data : topic : YOUR_NTFY_TOPIC title_param_name : title message_param_name : message resource : https://ntfy.sh If you need to authenticate to your ntfy resource, define the authentication, username and password as below: notify : - name : ntfy platform : rest method : POST_JSON authentication : basic username : YOUR_USERNAME password : YOUR_PASSWORD data : topic : YOUR_NTFY_TOPIC title_param_name : title message_param_name : message resource : https://ntfy.sh If you need to add any other ntfy specific parameters such as priority, tags, etc., add them to the data array in the example yml. For example: notify : - name : ntfy platform : rest method : POST_JSON data : topic : YOUR_NTFY_TOPIC priority : 4 title_param_name : title message_param_name : message resource : https://ntfy.sh","title":"Home Assistant"},{"location":"examples/#uptime-kuma","text":"Go to your Uptime Kuma Settings > Notifications, click on Setup Notification . Then set your desired title (e.g. \"Uptime Kuma\"), ntfy topic , Server URL and priority (1-5) : You can now test the notifications and apply them to monitors:","title":"Uptime Kuma"},{"location":"examples/#uptimerobot","text":"Go to your UptimeRobot My Settings > Alert Contacts > Add Alert Contact Select Alert Contact Type = Webhook. Then set your desired Friendly Name (e.g. \"ntfy-sh-UP\"), URL to Notify , POST value and select checkbox Send as JSON (application/json) . Make sure to send the JSON POST request to ntfy.domain.com without the topic name in the url and include the \"topic\" name in the JSON body. { \"topic\" : \"myTopic\" , \"title\" : \"*monitorFriendlyName* *alertTypeFriendlyName*\" , \"message\" : \"*alertDetails*\" , \"tags\" : [ \"green_circle\" ], \"priority\" : 3 , \"click\" : h tt ps : //uptimerobot.com/dashboard#*monitorID* } You can create two Alert Contacts each with a different icon and priority, for example: { \"topic\" : \"myTopic\" , \"title\" : \"*monitorFriendlyName* *alertTypeFriendlyName*\" , \"message\" : \"*alertDetails*\" , \"tags\" : [ \"red_circle\" ], \"priority\" : 3 , \"click\" : h tt ps : //uptimerobot.com/dashboard#*monitorID* } You can now add the created Alerts Contact(s) to the monitor(s) and test the notifications:","title":"UptimeRobot"},{"location":"examples/#apprise","text":"ntfy is integrated natively into Apprise (also check out the Apprise/ntfy wiki page ). You can use it like this: apprise -vv -t \"Test Message Title\" -b \"Test Message Body\" \\ ntfy://mytopic Or with your own server like this: apprise -vv -t \"Test Message Title\" -b \"Test Message Body\" \\ ntfy://ntfy.example.com/mytopic","title":"Apprise"},{"location":"examples/#rundeck","text":"Rundeck by default sends only HTML email which is not processed by ntfy SMTP server. Append following configurations to rundeck-config.properties : # Template rundeck.mail.template.file=/path/to/template.html rundeck.mail.template.log.formatted=false Example template.html : < div > Execution ${execution.id} was < b > ${execution.status} </ b ></ div > < ul > < li >< a href = \"${execution.href}\" > Execution result </ a ></ li > < li >< a href = \"${job.href}\" > Job </ a ></ li > < li >< a href = \"${execution.projectHref}\" > Project: ${execution.project} </ a ></ li > < li >< a href = \"${rundeck.href}\" > Rundeck </ a ></ li > </ ul > Add notification on Rundeck (attachment type must be: Attached as file to email ):","title":"Rundeck"},{"location":"faq/","text":"Frequently asked questions (FAQ) \u00b6 Isn't this like ...? \u00b6 Who knows. I didn't do a lot of research before making this. It was fun making it. Can I use this in my app? Will it stay free? \u00b6 Yes. As long as you don't abuse it, it'll be available and free of charge. I do not plan on monetizing the service. What are the uptime guarantees? \u00b6 Best effort. What happens if there are multiple subscribers to the same topic? \u00b6 As per usual with pub-sub, all subscribers receive notifications if they are subscribed to a topic. Will you know what topics exist, can you spy on me? \u00b6 If you don't trust me or your messages are sensitive, run your own server. It's open source. That said, the logs do contain topic names and IP addresses, but I don't use them for anything other than troubleshooting and rate limiting. Messages are cached for the duration configured in server.yml (12h by default) to facilitate service restarts, message polling and to overcome client network disruptions. Can I self-host it? \u00b6 Yes. The server (including this Web UI) can be self-hosted, and the Android/iOS app supports adding topics from your own server as well. Check out the install instructions . Is Firebase used? \u00b6 In addition to caching messages locally and delivering them to long-polling subscribers, all messages are also published to Firebase Cloud Messaging (FCM) (if FirebaseKeyFile is set, which it is on ntfy.sh). This is to facilitate notifications on Android. If you do not care for Firebase, I suggest you install the F-Droid version of the app and self-host your own ntfy server . How much battery does the Android app use? \u00b6 If you use the ntfy.sh server, and you don't use the instant delivery feature, the Android/iOS app uses no additional battery, since Firebase Cloud Messaging (FCM) is used. If you use your own server, or you use instant delivery (Android only), the app has to maintain a constant connection to the server, which consumes about 0-1% of battery in 17h of use (on my phone). There has been a ton of testing and improvement around this. I think it's pretty decent now. What is instant delivery? \u00b6 Instant delivery is a feature in the Android app. If turned on, the app maintains a constant connection to the server and listens for incoming notifications. This consumes additional battery (see above), but delivers notifications instantly. Can I disable the web app? Can I protect it with a login screen? \u00b6 The web app is a static website without a backend (other than the ntfy API). All data is stored locally in the browser cache and local storage. That means it does not need to be protected with a login screen, and it poses no additional security risk. So technically, it does not need to be disabled. However, if you still want to disable it, you can do so with the web-root: disable option in the server.yml file. Think of the ntfy web app like an Android/iOS app. It is freely available and accessible to anyone, yet useless without a proper backend. So as long as you secure your backend with ACLs, exposing the ntfy web app to the Internet is harmless. Where can I donate? \u00b6 I have just very recently started accepting donations via GitHub Sponsors . I would be humbled if you helped me carry the server and developer account costs. Even small donations are very much appreciated.","title":"FAQs"},{"location":"faq/#frequently-asked-questions-faq","text":"","title":"Frequently asked questions (FAQ)"},{"location":"faq/#isnt-this-like","text":"Who knows. I didn't do a lot of research before making this. It was fun making it.","title":"Isn't this like ...?"},{"location":"faq/#can-i-use-this-in-my-app-will-it-stay-free","text":"Yes. As long as you don't abuse it, it'll be available and free of charge. I do not plan on monetizing the service.","title":"Can I use this in my app? Will it stay free?"},{"location":"faq/#what-are-the-uptime-guarantees","text":"Best effort.","title":"What are the uptime guarantees?"},{"location":"faq/#what-happens-if-there-are-multiple-subscribers-to-the-same-topic","text":"As per usual with pub-sub, all subscribers receive notifications if they are subscribed to a topic.","title":"What happens if there are multiple subscribers to the same topic?"},{"location":"faq/#will-you-know-what-topics-exist-can-you-spy-on-me","text":"If you don't trust me or your messages are sensitive, run your own server. It's open source. That said, the logs do contain topic names and IP addresses, but I don't use them for anything other than troubleshooting and rate limiting. Messages are cached for the duration configured in server.yml (12h by default) to facilitate service restarts, message polling and to overcome client network disruptions.","title":"Will you know what topics exist, can you spy on me?"},{"location":"faq/#can-i-self-host-it","text":"Yes. The server (including this Web UI) can be self-hosted, and the Android/iOS app supports adding topics from your own server as well. Check out the install instructions .","title":"Can I self-host it?"},{"location":"faq/#is-firebase-used","text":"In addition to caching messages locally and delivering them to long-polling subscribers, all messages are also published to Firebase Cloud Messaging (FCM) (if FirebaseKeyFile is set, which it is on ntfy.sh). This is to facilitate notifications on Android. If you do not care for Firebase, I suggest you install the F-Droid version of the app and self-host your own ntfy server .","title":"Is Firebase used?"},{"location":"faq/#how-much-battery-does-the-android-app-use","text":"If you use the ntfy.sh server, and you don't use the instant delivery feature, the Android/iOS app uses no additional battery, since Firebase Cloud Messaging (FCM) is used. If you use your own server, or you use instant delivery (Android only), the app has to maintain a constant connection to the server, which consumes about 0-1% of battery in 17h of use (on my phone). There has been a ton of testing and improvement around this. I think it's pretty decent now.","title":"How much battery does the Android app use?"},{"location":"faq/#what-is-instant-delivery","text":"Instant delivery is a feature in the Android app. If turned on, the app maintains a constant connection to the server and listens for incoming notifications. This consumes additional battery (see above), but delivers notifications instantly.","title":"What is instant delivery?"},{"location":"faq/#can-i-disable-the-web-app-can-i-protect-it-with-a-login-screen","text":"The web app is a static website without a backend (other than the ntfy API). All data is stored locally in the browser cache and local storage. That means it does not need to be protected with a login screen, and it poses no additional security risk. So technically, it does not need to be disabled. However, if you still want to disable it, you can do so with the web-root: disable option in the server.yml file. Think of the ntfy web app like an Android/iOS app. It is freely available and accessible to anyone, yet useless without a proper backend. So as long as you secure your backend with ACLs, exposing the ntfy web app to the Internet is harmless.","title":"Can I disable the web app? Can I protect it with a login screen?"},{"location":"faq/#where-can-i-donate","text":"I have just very recently started accepting donations via GitHub Sponsors . I would be humbled if you helped me carry the server and developer account costs. Even small donations are very much appreciated.","title":"Where can I donate?"},{"location":"install/","text":"Installing ntfy \u00b6 The ntfy CLI allows you to publish messages , subscribe to topics as well as to self-host your own ntfy server. It's all pretty straight forward. Just install the binary, package or Docker image, configure it and run it. Just like any other software. No fuzz. Info The following steps are only required if you want to self-host your own ntfy server or you want to use the ntfy CLI . If you just want to send messages using ntfy.sh , you don't need to install anything. You can just use curl . General steps \u00b6 The ntfy server comes as a statically linked binary and is shipped as tarball, deb/rpm packages and as a Docker image. We support amd64, armv7 and arm64. Install ntfy using one of the methods described below Then (optionally) edit /etc/ntfy/server.yml for the server (Linux only, see configuration or sample server.yml ) Or (optionally) create/edit ~/.config/ntfy/client.yml (or /etc/ntfy/client.yml , see sample client.yml ) To run the ntfy server, then just run ntfy serve (or systemctl start ntfy when using the deb/rpm). To send messages, use ntfy publish . To subscribe to topics, use ntfy subscribe (see subscribing via CLI for details). Linux binaries \u00b6 Please check out the releases page for binaries and deb/rpm packages. x86_64/amd64 armv6 armv7/armhf arm64 wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_x86_64.tar.gz tar zxvf ntfy_1.29.1_linux_x86_64.tar.gz sudo cp -a ntfy_1.29.1_linux_x86_64/ntfy /usr/bin/ntfy sudo mkdir /etc/ntfy && sudo cp ntfy_1.29.1_linux_x86_64/ { client,server } /*.yml /etc/ntfy sudo ntfy serve wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv6.tar.gz tar zxvf ntfy_1.29.1_linux_armv6.tar.gz sudo cp -a ntfy_1.29.1_linux_armv6/ntfy /usr/bin/ntfy sudo mkdir /etc/ntfy && sudo cp ntfy_1.29.1_linux_armv6/ { client,server } /*.yml /etc/ntfy sudo ntfy serve wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv7.tar.gz tar zxvf ntfy_1.29.1_linux_armv7.tar.gz sudo cp -a ntfy_1.29.1_linux_armv7/ntfy /usr/bin/ntfy sudo mkdir /etc/ntfy && sudo cp ntfy_1.29.1_linux_armv7/ { client,server } /*.yml /etc/ntfy sudo ntfy serve wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_arm64.tar.gz tar zxvf ntfy_1.29.1_linux_arm64.tar.gz sudo cp -a ntfy_1.29.1_linux_arm64/ntfy /usr/bin/ntfy sudo mkdir /etc/ntfy && sudo cp ntfy_1.29.1_linux_arm64/ { client,server } /*.yml /etc/ntfy sudo ntfy serve Debian/Ubuntu repository \u00b6 Installation via Debian repository: x86_64/amd64 armv7/armhf arm64 sudo mkdir -p /etc/apt/keyrings curl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg sudo apt install apt-transport-https sudo sh -c \"echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\ > /etc/apt/sources.list.d/archive.heckel.io.list\" sudo apt update sudo apt install ntfy sudo systemctl enable ntfy sudo systemctl start ntfy sudo mkdir -p /etc/apt/keyrings curl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg sudo apt install apt-transport-https sudo sh -c \"echo 'deb [arch=armhf signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\ > /etc/apt/sources.list.d/archive.heckel.io.list\" sudo apt update sudo apt install ntfy sudo systemctl enable ntfy sudo systemctl start ntfy sudo mkdir -p /etc/apt/keyrings curl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg sudo apt install apt-transport-https sudo sh -c \"echo 'deb [arch=arm64 signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\ > /etc/apt/sources.list.d/archive.heckel.io.list\" sudo apt update sudo apt install ntfy sudo systemctl enable ntfy sudo systemctl start ntfy Manually installing the .deb file: x86_64/amd64 armv6 armv7/armhf arm64 wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_amd64.deb sudo dpkg -i ntfy_*.deb sudo systemctl enable ntfy sudo systemctl start ntfy wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv6.deb sudo dpkg -i ntfy_*.deb sudo systemctl enable ntfy sudo systemctl start ntfy wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv7.deb sudo dpkg -i ntfy_*.deb sudo systemctl enable ntfy sudo systemctl start ntfy wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_arm64.deb sudo dpkg -i ntfy_*.deb sudo systemctl enable ntfy sudo systemctl start ntfy Fedora/RHEL/CentOS \u00b6 x86_64/amd64 armv6 armv7/armhf arm64 sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_amd64.rpm sudo systemctl enable ntfy sudo systemctl start ntfy sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv6.rpm sudo systemctl enable ntfy sudo systemctl start ntfy sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv7.rpm sudo systemctl enable ntfy sudo systemctl start ntfy sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_arm64.rpm sudo systemctl enable ntfy sudo systemctl start ntfy Arch Linux \u00b6 ntfy can be installed using an AUR package . You can use an AUR helper like paru , yay or others to download, build and install ntfy and keep it up to date. paru -S ntfysh-bin Alternatively, run the following commands to install ntfy manually: curl https://aur.archlinux.org/cgit/aur.git/snapshot/ntfysh-bin.tar.gz | tar xzv cd ntfysh-bin makepkg -si NixOS / Nix \u00b6 ntfy is packaged in nixpkgs as ntfy-sh . It can be installed by adding the package name to the configuration file and calling nixos-rebuild . Alternatively, the following command can be used to install ntfy in the current user environment: nix-env -iA ntfy-sh NixOS also supports declarative setup of the ntfy server . macOS \u00b6 The ntfy CLI ( ntfy publish and ntfy subscribe only) is supported on macOS as well. To install, please download the tarball , extract it and place it somewhere in your PATH (e.g. /usr/local/bin/ntfy ). If run as root , ntfy will look for its config at /etc/ntfy/client.yml . For all other users, it'll look for it at ~/Library/Application Support/ntfy/client.yml (sample included in the tarball). curl -L https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_macOS_all.tar.gz > ntfy_1.29.1_macOS_all.tar.gz tar zxvf ntfy_1.29.1_macOS_all.tar.gz sudo cp -a ntfy_1.29.1_macOS_all/ntfy /usr/local/bin/ntfy mkdir ~/Library/Application \\ Support/ntfy cp ntfy_1.29.1_macOS_all/client/client.yml ~/Library/Application \\ Support/ntfy/client.yml ntfy --help Info There is a GitHub issue about making ntfy installable via Homebrew . I'll eventually get to that, but I'd also love if somebody else stepped up to do it. Also, you can build and run the ntfy server on macOS as well, though I don't officially support that. Check out the build instructions for details. Windows \u00b6 The ntfy CLI ( ntfy publish and ntfy subscribe only) is supported on Windows as well. To install, please download the latest ZIP , extract it and place the ntfy.exe binary somewhere in your %Path% . The default path for the client config file is at %AppData%\\ntfy\\client.yml (not created automatically, sample in the ZIP file). Also available in Scoop's Main repository: scoop install ntfy Info There is currently no installer for Windows, and the binary is not signed. If this is desired, please create a GitHub issue to let me know. Docker \u00b6 The ntfy image is available for amd64, armv6, armv7 and arm64. It should be pretty straight forward to use. The server exposes its web UI and the API on port 80, so you need to expose that in Docker. To use the persistent message cache , you also need to map a volume to /var/cache/ntfy . To change other settings, you should map /etc/ntfy , so you can edit /etc/ntfy/server.yml . Info Note that the Docker image does not contain a /etc/ntfy/server.yml file . If you'd like to use a config file, please manually create one outside the image and map it as a volume, e.g. via -v /etc/ntfy:/etc/ntfy . You may use the server.yml file on GitHub as a template. Basic usage (no cache or additional config): docker run -p 80:80 -it binwiederhier/ntfy serve With persistent cache (configured as command line arguments): docker run \\ -v /var/cache/ntfy:/var/cache/ntfy \\ -p 80 :80 \\ -it \\ binwiederhier/ntfy \\ serve \\ --cache-file /var/cache/ntfy/cache.db With other config options, timezone, and non-root user (configured via /etc/ntfy/server.yml , see configuration for details): docker run \\ -v /etc/ntfy:/etc/ntfy \\ -e TZ = UTC \\ -p 80 :80 \\ -u UID:GID \\ -it \\ binwiederhier/ntfy \\ serve Using docker-compose with non-root user: version : \"2.1\" services : ntfy : image : binwiederhier/ntfy container_name : ntfy command : - serve environment : - TZ=UTC # optional: set desired timezone user : UID:GID # optional: replace with your own user/group or uid/gid volumes : - /var/cache/ntfy:/var/cache/ntfy - /etc/ntfy:/etc/ntfy ports : - 80:80 restart : unless-stopped If using a non-root user when running the docker version, be sure to chown the server.yml, user.db, and cache.db files to the same uid/gid. Alternatively, you may wish to build a customized Docker image that can be run with fewer command-line arguments and without delivering the configuration file separately. FROM binwiederhier/ntfy COPY server.yml /etc/ntfy/server.yml ENTRYPOINT [\"ntfy\", \"serve\"] This image can be pushed to a container registry and shipped independently. All that's needed when running it is mapping ntfy's port to a host port. Kubernetes \u00b6 The setup for Kubernetes is very similar to that for Docker, and requires a fairly minimal deployment or pod definition to function. There are a few options to mix and match, including a deployment without a cache file, a stateful set with a persistent cache, and a standalone unmanned pod. deployment stateful set pod apiVersion : apps/v1 kind : Deployment metadata : name : ntfy spec : selector : matchLabels : app : ntfy template : metadata : labels : app : ntfy spec : containers : - name : ntfy image : binwiederhier/ntfy args : [ \"serve\" ] resources : limits : memory : \"128Mi\" cpu : \"500m\" ports : - containerPort : 80 name : http volumeMounts : - name : config mountPath : \"/etc/ntfy\" readOnly : true volumes : - name : config configMap : name : ntfy --- # Basic service for port 80 apiVersion : v1 kind : Service metadata : name : ntfy spec : selector : app : ntfy ports : - port : 80 targetPort : 80 apiVersion : apps/v1 kind : StatefulSet metadata : name : ntfy spec : selector : matchLabels : app : ntfy serviceName : ntfy template : metadata : labels : app : ntfy spec : containers : - name : ntfy image : binwiederhier/ntfy args : [ \"serve\" , \"--cache-file /var/cache/ntfy/cache.db\" ] ports : - containerPort : 80 name : http volumeMounts : - name : config mountPath : \"/etc/ntfy\" readOnly : true volumes : - name : config configMap : name : ntfy volumeClaimTemplates : - metadata : name : cache spec : accessModes : [ \"ReadWriteOnce\" ] resources : requests : storage : 1Gi apiVersion : v1 kind : Pod metadata : labels : app : ntfy spec : containers : - name : ntfy image : binwiederhier/ntfy args : [ \"serve\" ] resources : limits : memory : \"128Mi\" cpu : \"500m\" ports : - containerPort : 80 name : http volumeMounts : - name : config mountPath : \"/etc/ntfy\" readOnly : true volumes : - name : config configMap : name : ntfy Configuration is relatively straightforward. As an example, a minimal configuration is provided. resource definition from-file apiVersion : v1 kind : ConfigMap metadata : name : ntfy data : server.yml : | # Template: https://github.com/binwiederhier/ntfy/blob/main/server/server.yml base-url: https://ntfy.sh kubectl create configmap ntfy --from-file = server.yml Kustomize \u00b6 ntfy can be deployed in a Kubernetes cluster with Kustomize , a tool used to customize Kubernetes objects using a kustomization.yaml file. Create new folder - ntfy Add all files listed below kustomization.yaml - stores all configmaps and resources used in a deployment ntfy-deployment.yaml - define deployment type and its parameters ntfy-pvc.yaml - describes how persistent volumes will be created ntfy-svc.yaml - expose application to the internal kubernetes network ntfy-ingress.yaml - expose service to outside the network using ingress controller server.yaml - simple server configuration Replace TESTNAMESPACE within kustomization.yaml with designated namespace Replace ntfy.test within ntfy-ingress.yaml with desired DNS name Apply configuration to cluster set in current context: kubectl apply -k /ntfy kustomization.yaml ntfy-deployment.yaml ntfy-pvc.yaml ntfy-svc.yaml ntfy-ingress.yaml server.yml apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization resources : - ntfy-deployment.yaml # deployment definition - ntfy-svc.yaml # service connecting pods to cluster network - ntfy-pvc.yaml # pvc used to store cache and attachment - ntfy-ingress.yaml # ingress definition configMapGenerator : # will parse config from raw config to configmap,it allows for dynamic reload of application if additional app is deployed ie https://github.com/stakater/Reloader - name : server-config files : - server.yml namespace : TESTNAMESPACE # select namespace for whole application apiVersion : apps/v1 kind : Deployment metadata : name : ntfy-deployment labels : app : ntfy-deployment spec : revisionHistoryLimit : 1 replicas : 1 selector : matchLabels : app : ntfy-pod template : metadata : labels : app : ntfy-pod spec : containers : - name : ntfy image : binwiederhier/ntfy:v1.28.0 # set deployed version args : [ \"serve\" ] env : #example of adjustments made in environmental variables - name : TZ # set timezone value : XXXXXXX - name : NTFY_DEBUG # enable/disable debug value : \"false\" - name : NTFY_LOG_LEVEL # adjust log level value : INFO - name : NTFY_BASE_URL # add base url value : XXXXXXXXXX ports : - containerPort : 80 name : http-ntfy resources : limits : memory : 300Mi cpu : 200m requests : cpu : 150m memory : 150Mi volumeMounts : - mountPath : /etc/ntfy/server.yml subPath : server.yml name : config-volume # generated vie configMapGenerator from kustomization file - mountPath : /var/cache/ntfy name : cache-volume #cache volume mounted to persistent volume volumes : - name : config-volume configMap : # uses configmap generator to parse server.yml to configmap name : server-config - name : cache-volume persistentVolumeClaim : # stores /cache/ntfy in defined pv claimName : ntfy-pvc apiVersion : v1 kind : PersistentVolumeClaim metadata : name : ntfy-pvc spec : accessModes : - ReadWriteOnce storageClassName : local-path # adjust storage if needed resources : requests : storage : 1Gi apiVersion : v1 kind : Service metadata : name : ntfy-svc spec : type : ClusterIP selector : app : ntfy-pod ports : - name : http-ntfy-out protocol : TCP port : 80 targetPort : http-ntfy apiVersion : networking.k8s.io/v1 kind : Ingress metadata : name : ntfy-ingress spec : rules : - host : ntfy.test #select own http : paths : - path : / pathType : Prefix backend : service : name : ntfy-svc port : number : 80 cache-file : \"/var/cache/ntfy/cache.db\" attachment-cache-dir : \"/var/cache/ntfy/attachments\"","title":"Installation"},{"location":"install/#installing-ntfy","text":"The ntfy CLI allows you to publish messages , subscribe to topics as well as to self-host your own ntfy server. It's all pretty straight forward. Just install the binary, package or Docker image, configure it and run it. Just like any other software. No fuzz. Info The following steps are only required if you want to self-host your own ntfy server or you want to use the ntfy CLI . If you just want to send messages using ntfy.sh , you don't need to install anything. You can just use curl .","title":"Installing ntfy"},{"location":"install/#general-steps","text":"The ntfy server comes as a statically linked binary and is shipped as tarball, deb/rpm packages and as a Docker image. We support amd64, armv7 and arm64. Install ntfy using one of the methods described below Then (optionally) edit /etc/ntfy/server.yml for the server (Linux only, see configuration or sample server.yml ) Or (optionally) create/edit ~/.config/ntfy/client.yml (or /etc/ntfy/client.yml , see sample client.yml ) To run the ntfy server, then just run ntfy serve (or systemctl start ntfy when using the deb/rpm). To send messages, use ntfy publish . To subscribe to topics, use ntfy subscribe (see subscribing via CLI for details).","title":"General steps"},{"location":"install/#linux-binaries","text":"Please check out the releases page for binaries and deb/rpm packages. x86_64/amd64 armv6 armv7/armhf arm64 wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_x86_64.tar.gz tar zxvf ntfy_1.29.1_linux_x86_64.tar.gz sudo cp -a ntfy_1.29.1_linux_x86_64/ntfy /usr/bin/ntfy sudo mkdir /etc/ntfy && sudo cp ntfy_1.29.1_linux_x86_64/ { client,server } /*.yml /etc/ntfy sudo ntfy serve wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv6.tar.gz tar zxvf ntfy_1.29.1_linux_armv6.tar.gz sudo cp -a ntfy_1.29.1_linux_armv6/ntfy /usr/bin/ntfy sudo mkdir /etc/ntfy && sudo cp ntfy_1.29.1_linux_armv6/ { client,server } /*.yml /etc/ntfy sudo ntfy serve wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv7.tar.gz tar zxvf ntfy_1.29.1_linux_armv7.tar.gz sudo cp -a ntfy_1.29.1_linux_armv7/ntfy /usr/bin/ntfy sudo mkdir /etc/ntfy && sudo cp ntfy_1.29.1_linux_armv7/ { client,server } /*.yml /etc/ntfy sudo ntfy serve wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_arm64.tar.gz tar zxvf ntfy_1.29.1_linux_arm64.tar.gz sudo cp -a ntfy_1.29.1_linux_arm64/ntfy /usr/bin/ntfy sudo mkdir /etc/ntfy && sudo cp ntfy_1.29.1_linux_arm64/ { client,server } /*.yml /etc/ntfy sudo ntfy serve","title":"Linux binaries"},{"location":"install/#debianubuntu-repository","text":"Installation via Debian repository: x86_64/amd64 armv7/armhf arm64 sudo mkdir -p /etc/apt/keyrings curl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg sudo apt install apt-transport-https sudo sh -c \"echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\ > /etc/apt/sources.list.d/archive.heckel.io.list\" sudo apt update sudo apt install ntfy sudo systemctl enable ntfy sudo systemctl start ntfy sudo mkdir -p /etc/apt/keyrings curl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg sudo apt install apt-transport-https sudo sh -c \"echo 'deb [arch=armhf signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\ > /etc/apt/sources.list.d/archive.heckel.io.list\" sudo apt update sudo apt install ntfy sudo systemctl enable ntfy sudo systemctl start ntfy sudo mkdir -p /etc/apt/keyrings curl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg sudo apt install apt-transport-https sudo sh -c \"echo 'deb [arch=arm64 signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\ > /etc/apt/sources.list.d/archive.heckel.io.list\" sudo apt update sudo apt install ntfy sudo systemctl enable ntfy sudo systemctl start ntfy Manually installing the .deb file: x86_64/amd64 armv6 armv7/armhf arm64 wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_amd64.deb sudo dpkg -i ntfy_*.deb sudo systemctl enable ntfy sudo systemctl start ntfy wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv6.deb sudo dpkg -i ntfy_*.deb sudo systemctl enable ntfy sudo systemctl start ntfy wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv7.deb sudo dpkg -i ntfy_*.deb sudo systemctl enable ntfy sudo systemctl start ntfy wget https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_arm64.deb sudo dpkg -i ntfy_*.deb sudo systemctl enable ntfy sudo systemctl start ntfy","title":"Debian/Ubuntu repository"},{"location":"install/#fedorarhelcentos","text":"x86_64/amd64 armv6 armv7/armhf arm64 sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_amd64.rpm sudo systemctl enable ntfy sudo systemctl start ntfy sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv6.rpm sudo systemctl enable ntfy sudo systemctl start ntfy sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_armv7.rpm sudo systemctl enable ntfy sudo systemctl start ntfy sudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_linux_arm64.rpm sudo systemctl enable ntfy sudo systemctl start ntfy","title":"Fedora/RHEL/CentOS"},{"location":"install/#arch-linux","text":"ntfy can be installed using an AUR package . You can use an AUR helper like paru , yay or others to download, build and install ntfy and keep it up to date. paru -S ntfysh-bin Alternatively, run the following commands to install ntfy manually: curl https://aur.archlinux.org/cgit/aur.git/snapshot/ntfysh-bin.tar.gz | tar xzv cd ntfysh-bin makepkg -si","title":"Arch Linux"},{"location":"install/#nixos-nix","text":"ntfy is packaged in nixpkgs as ntfy-sh . It can be installed by adding the package name to the configuration file and calling nixos-rebuild . Alternatively, the following command can be used to install ntfy in the current user environment: nix-env -iA ntfy-sh NixOS also supports declarative setup of the ntfy server .","title":"NixOS / Nix"},{"location":"install/#macos","text":"The ntfy CLI ( ntfy publish and ntfy subscribe only) is supported on macOS as well. To install, please download the tarball , extract it and place it somewhere in your PATH (e.g. /usr/local/bin/ntfy ). If run as root , ntfy will look for its config at /etc/ntfy/client.yml . For all other users, it'll look for it at ~/Library/Application Support/ntfy/client.yml (sample included in the tarball). curl -L https://github.com/binwiederhier/ntfy/releases/download/v1.29.1/ntfy_1.29.1_macOS_all.tar.gz > ntfy_1.29.1_macOS_all.tar.gz tar zxvf ntfy_1.29.1_macOS_all.tar.gz sudo cp -a ntfy_1.29.1_macOS_all/ntfy /usr/local/bin/ntfy mkdir ~/Library/Application \\ Support/ntfy cp ntfy_1.29.1_macOS_all/client/client.yml ~/Library/Application \\ Support/ntfy/client.yml ntfy --help Info There is a GitHub issue about making ntfy installable via Homebrew . I'll eventually get to that, but I'd also love if somebody else stepped up to do it. Also, you can build and run the ntfy server on macOS as well, though I don't officially support that. Check out the build instructions for details.","title":"macOS"},{"location":"install/#windows","text":"The ntfy CLI ( ntfy publish and ntfy subscribe only) is supported on Windows as well. To install, please download the latest ZIP , extract it and place the ntfy.exe binary somewhere in your %Path% . The default path for the client config file is at %AppData%\\ntfy\\client.yml (not created automatically, sample in the ZIP file). Also available in Scoop's Main repository: scoop install ntfy Info There is currently no installer for Windows, and the binary is not signed. If this is desired, please create a GitHub issue to let me know.","title":"Windows"},{"location":"install/#docker","text":"The ntfy image is available for amd64, armv6, armv7 and arm64. It should be pretty straight forward to use. The server exposes its web UI and the API on port 80, so you need to expose that in Docker. To use the persistent message cache , you also need to map a volume to /var/cache/ntfy . To change other settings, you should map /etc/ntfy , so you can edit /etc/ntfy/server.yml . Info Note that the Docker image does not contain a /etc/ntfy/server.yml file . If you'd like to use a config file, please manually create one outside the image and map it as a volume, e.g. via -v /etc/ntfy:/etc/ntfy . You may use the server.yml file on GitHub as a template. Basic usage (no cache or additional config): docker run -p 80:80 -it binwiederhier/ntfy serve With persistent cache (configured as command line arguments): docker run \\ -v /var/cache/ntfy:/var/cache/ntfy \\ -p 80 :80 \\ -it \\ binwiederhier/ntfy \\ serve \\ --cache-file /var/cache/ntfy/cache.db With other config options, timezone, and non-root user (configured via /etc/ntfy/server.yml , see configuration for details): docker run \\ -v /etc/ntfy:/etc/ntfy \\ -e TZ = UTC \\ -p 80 :80 \\ -u UID:GID \\ -it \\ binwiederhier/ntfy \\ serve Using docker-compose with non-root user: version : \"2.1\" services : ntfy : image : binwiederhier/ntfy container_name : ntfy command : - serve environment : - TZ=UTC # optional: set desired timezone user : UID:GID # optional: replace with your own user/group or uid/gid volumes : - /var/cache/ntfy:/var/cache/ntfy - /etc/ntfy:/etc/ntfy ports : - 80:80 restart : unless-stopped If using a non-root user when running the docker version, be sure to chown the server.yml, user.db, and cache.db files to the same uid/gid. Alternatively, you may wish to build a customized Docker image that can be run with fewer command-line arguments and without delivering the configuration file separately. FROM binwiederhier/ntfy COPY server.yml /etc/ntfy/server.yml ENTRYPOINT [\"ntfy\", \"serve\"] This image can be pushed to a container registry and shipped independently. All that's needed when running it is mapping ntfy's port to a host port.","title":"Docker"},{"location":"install/#kubernetes","text":"The setup for Kubernetes is very similar to that for Docker, and requires a fairly minimal deployment or pod definition to function. There are a few options to mix and match, including a deployment without a cache file, a stateful set with a persistent cache, and a standalone unmanned pod. deployment stateful set pod apiVersion : apps/v1 kind : Deployment metadata : name : ntfy spec : selector : matchLabels : app : ntfy template : metadata : labels : app : ntfy spec : containers : - name : ntfy image : binwiederhier/ntfy args : [ \"serve\" ] resources : limits : memory : \"128Mi\" cpu : \"500m\" ports : - containerPort : 80 name : http volumeMounts : - name : config mountPath : \"/etc/ntfy\" readOnly : true volumes : - name : config configMap : name : ntfy --- # Basic service for port 80 apiVersion : v1 kind : Service metadata : name : ntfy spec : selector : app : ntfy ports : - port : 80 targetPort : 80 apiVersion : apps/v1 kind : StatefulSet metadata : name : ntfy spec : selector : matchLabels : app : ntfy serviceName : ntfy template : metadata : labels : app : ntfy spec : containers : - name : ntfy image : binwiederhier/ntfy args : [ \"serve\" , \"--cache-file /var/cache/ntfy/cache.db\" ] ports : - containerPort : 80 name : http volumeMounts : - name : config mountPath : \"/etc/ntfy\" readOnly : true volumes : - name : config configMap : name : ntfy volumeClaimTemplates : - metadata : name : cache spec : accessModes : [ \"ReadWriteOnce\" ] resources : requests : storage : 1Gi apiVersion : v1 kind : Pod metadata : labels : app : ntfy spec : containers : - name : ntfy image : binwiederhier/ntfy args : [ \"serve\" ] resources : limits : memory : \"128Mi\" cpu : \"500m\" ports : - containerPort : 80 name : http volumeMounts : - name : config mountPath : \"/etc/ntfy\" readOnly : true volumes : - name : config configMap : name : ntfy Configuration is relatively straightforward. As an example, a minimal configuration is provided. resource definition from-file apiVersion : v1 kind : ConfigMap metadata : name : ntfy data : server.yml : | # Template: https://github.com/binwiederhier/ntfy/blob/main/server/server.yml base-url: https://ntfy.sh kubectl create configmap ntfy --from-file = server.yml","title":"Kubernetes"},{"location":"install/#kustomize","text":"ntfy can be deployed in a Kubernetes cluster with Kustomize , a tool used to customize Kubernetes objects using a kustomization.yaml file. Create new folder - ntfy Add all files listed below kustomization.yaml - stores all configmaps and resources used in a deployment ntfy-deployment.yaml - define deployment type and its parameters ntfy-pvc.yaml - describes how persistent volumes will be created ntfy-svc.yaml - expose application to the internal kubernetes network ntfy-ingress.yaml - expose service to outside the network using ingress controller server.yaml - simple server configuration Replace TESTNAMESPACE within kustomization.yaml with designated namespace Replace ntfy.test within ntfy-ingress.yaml with desired DNS name Apply configuration to cluster set in current context: kubectl apply -k /ntfy kustomization.yaml ntfy-deployment.yaml ntfy-pvc.yaml ntfy-svc.yaml ntfy-ingress.yaml server.yml apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization resources : - ntfy-deployment.yaml # deployment definition - ntfy-svc.yaml # service connecting pods to cluster network - ntfy-pvc.yaml # pvc used to store cache and attachment - ntfy-ingress.yaml # ingress definition configMapGenerator : # will parse config from raw config to configmap,it allows for dynamic reload of application if additional app is deployed ie https://github.com/stakater/Reloader - name : server-config files : - server.yml namespace : TESTNAMESPACE # select namespace for whole application apiVersion : apps/v1 kind : Deployment metadata : name : ntfy-deployment labels : app : ntfy-deployment spec : revisionHistoryLimit : 1 replicas : 1 selector : matchLabels : app : ntfy-pod template : metadata : labels : app : ntfy-pod spec : containers : - name : ntfy image : binwiederhier/ntfy:v1.28.0 # set deployed version args : [ \"serve\" ] env : #example of adjustments made in environmental variables - name : TZ # set timezone value : XXXXXXX - name : NTFY_DEBUG # enable/disable debug value : \"false\" - name : NTFY_LOG_LEVEL # adjust log level value : INFO - name : NTFY_BASE_URL # add base url value : XXXXXXXXXX ports : - containerPort : 80 name : http-ntfy resources : limits : memory : 300Mi cpu : 200m requests : cpu : 150m memory : 150Mi volumeMounts : - mountPath : /etc/ntfy/server.yml subPath : server.yml name : config-volume # generated vie configMapGenerator from kustomization file - mountPath : /var/cache/ntfy name : cache-volume #cache volume mounted to persistent volume volumes : - name : config-volume configMap : # uses configmap generator to parse server.yml to configmap name : server-config - name : cache-volume persistentVolumeClaim : # stores /cache/ntfy in defined pv claimName : ntfy-pvc apiVersion : v1 kind : PersistentVolumeClaim metadata : name : ntfy-pvc spec : accessModes : - ReadWriteOnce storageClassName : local-path # adjust storage if needed resources : requests : storage : 1Gi apiVersion : v1 kind : Service metadata : name : ntfy-svc spec : type : ClusterIP selector : app : ntfy-pod ports : - name : http-ntfy-out protocol : TCP port : 80 targetPort : http-ntfy apiVersion : networking.k8s.io/v1 kind : Ingress metadata : name : ntfy-ingress spec : rules : - host : ntfy.test #select own http : paths : - path : / pathType : Prefix backend : service : name : ntfy-svc port : number : 80 cache-file : \"/var/cache/ntfy/cache.db\" attachment-cache-dir : \"/var/cache/ntfy/attachments\"","title":"Kustomize"},{"location":"integrations/","text":"Integrations + community projects \u00b6 There are quite a few projects that work with ntfy, integrate ntfy, or have been built around ntfy. It's super exciting to see what you guys have come up with. Feel free to create a pull request on GitHub to add your own project here. I've added a \u2b50 to projects or posts that have a significant following, or had a lot of interaction by the community. Public ntfy servers \u00b6 Here's a list of public ntfy servers. As of right now, there is only one official server. The others are provided by the ntfy community. Thanks to everyone running a public server. You guys rock! URL Country ntfy.sh ( Official ) \ud83c\uddfa\ud83c\uddf8 United States ntfy.tedomum.net \ud83c\uddeb\ud83c\uddf7 France ntfy.jae.fi \ud83c\uddeb\ud83c\uddee Finland ntfy.adminforge.de \ud83c\udde9\ud83c\uddea Germany ntfy.envs.net \ud83c\udde9\ud83c\uddea Germany Please be aware that server operators can log your messages . The project also cannot guarantee the reliability and uptime of third party servers, so use of each server is at your own discretion . Official integrations \u00b6 Healthchecks.io \u2b50 - Online service for monitoring regularly running tasks such as cron jobs Apprise \u2b50 - Push notifications that work with just about every platform Uptime Kuma \u2b50 - A self-hosted monitoring tool Robusta \u2b50 - open source platform for Kubernetes troubleshooting borgmatic \u2b50 - configuration-driven backup software for servers and workstations Radarr \u2b50 - Movie collection manager for Usenet and BitTorrent users Sonarr \u2b50 - PVR for Usenet and BitTorrent users Gatus \u2b50 - Automated service health dashboard Automatisch \u2b50 - Open source Zapier alternative / workflow automation tool FlexGet \u2b50 - Multipurpose automation tool for all of your media Platypush - Automation platform aimed to run on any device that can run Python UnifiedPush integrations \u00b6 Element \u2b50 - Matrix client SchildiChat \u2b50 - Matrix client Tusky \u2b50 - Fediverse client Fedilab - Fediverse client FindMyDevice - Find your Device with an SMS or online with the help of FMDServer Tox Push Message App - Tox Push Message App Libraries \u00b6 ntfy-php-library - PHP library for sending messages using a ntfy server (PHP) ntfy-notifier - Symfony Notifier integration for ntfy (PHP) ntfpy - API Wrapper for ntfy.sh (Python) pyntfy - A module for interacting with ntfy notifications (Python) vntfy - Barebone V client for ntfy (V) ntfy-middleman - Wraps APIs and send notifications using ntfy.sh on schedule (Python) ntfy-dotnet - .NET client library to interact with a ntfy server (C# / .NET) node-ntfy-publish - A Node package to publish notifications to an ntfy server (Node) ntfy - Wraps the ntfy API with pipe-friendly tooling (R) CLIs + GUIs \u00b6 ntfy.sh.sh - Run scripts on ntfy.sh events ntfy Desktop client - Cross-platform desktop application for ntfy ntfy svelte front-end - Front-end built with svelte wio-ntfy-ticker - Ticker display for a ntfy.sh topic ntfysh-windows - A ntfy client for Windows Desktop ntfyr - A simple commandline tool to send notifications to ntfy ntfy.py - ntfy.py is a simple nfty.sh client for sending notifications Projects + scripts \u00b6 Grafana-to-ntfy - Grafana-to-ntfy alerts channel (Rust) ntfy-long-zsh-command - Notifies you once a long-running command completes (zsh) ntfy-shellscripts - A few scripts for the ntfy project (Shell) QuickStatus - A shell script to alert to any immediate problems upon login (Shell) ntfy.el - Send notifications from Emacs (Emacs) backup-projects - Stupidly simple backup script for own projects (Shell) grav-plugin-whistleblower - Grav CMS plugin to get notifications via ntfy (PHP) ntfy-server-status - Checking if server is online and reporting through ntfy (C) borg-based backup - Simple borg-based backup script with notifications based on ntfy.sh or Discord webhooks (Python/Shell) ntfy.sh *arr script - Quick and hacky script to get sonarr/radarr to notify the ntfy.sh service (Shell) siteeagle - A small Python script to monitor websites and notify changes (Python) send_to_phone - Scripts to upload a file to Transfer.sh and ping ntfy with the download link (Python) ntfy Discord bot - WIP ntfy discord bot (TypeScript) ntfy Discord bot - ntfy Discord bot (Go) Bettarr Notifications - Better Notifications for Sonarr and Radarr (Python) Notify me the intruders - Notify you if they are intruders or new connections on your network (Shell) Send GitHub Action to ntfy - Send GitHub Action workflow notifications to ntfy (JS) ntfy alertmanager bridge - Basic alertmanager bridge to ntfy (JS) ntfy-alertmanager - A bridge between ntfy and Alertmanager (Go) alertmanager-ntfy - Relay prometheus alertmanager alerts to ntfy (Go) restreamchat2ntfy - Send restream.io chat to ntfy to check on the Meta Quest (JS) k8s-ntfy-deployment-service - Automatic Kubernetes (k8s) ntfy deployment huginn-global-entry-notif - Checks CBP API for available appointments with Huginn (JSON) ntfyer - Sending various information to your ntfy topic by time (TypeScript) git-simple-notifier - Script running git-log, checking for new repositories (Shell) ntfy-to-slack - Tool to subscribe to a ntfy topic and send the messages to a Slack webhook (Go) ansible-ntfy - Ansible action plugin to post JSON messages to ntfy (Python) ntfy-notification-channel - Laravel Notification channel for ntfy (PHP) ntfy_on_a_chip - ESP8266 and ESP32 client code to communicate with ntfy ntfy-sdk - ntfy client library to send notifications (Rust) ntfy_ynh - ntfy app for YunoHost Blog + forum posts \u00b6 ntfy.sh - paramdeo.com - 11/2022 Using ntfy to warn me when my computer is discharging - ulysseszh.github.io - 11/2022 ntfy - Push Notification Service - dizzytech.de - 11/2022 Console #132 \u2b50 - console.substack.com - 11/2022 MeshCentral - Ntfy Push Notifications - youtube.com - 11/2022 Changelog | Tracking layoffs, tech worker demand still high, ntfy, ... \u2b50 - changelog.com - 11/2022 Pointer | Issue #367 - pointer.io - 11/2022 Envie Push Notifications por POST (de gra\u00e7a e sem cadastro) - tabnews.com.br - 11/2022 Push Notifications for KDE - volkerkrause.eu - 11/2022 TLDR Newsletter Daily Update 2022-11-09 \u2b50 - tldr.tech - 11/2022 Ntfy.sh \u2013 Send push notifications to your phone via PUT/POST \u2b50 - news.ycombinator.com - 11/2022 Ntfy et Jeedom : un plugin - lunarok-domotique.com - 11/2022 Crea tu propio servidor de notificaciones con Ntfy - blog.parravidales.es - 11/2022 Zero-cost push notifications to your phone or desktop via PUT/POST - lobste.rs - 10/2022 A nifty push notification system: ntfy - jpmens.net - 10/2022 Alarmanlage der dritten Art (YouTube video) - youtube.com - 10/2022 Neue Services: Ntfy, TikTok und RustDesk - adminforge.de - 9/2022 Ntfy, le service de notifications qu\u2019il vous faut - cachem.fr - 9/2022 NAS Synology et notifications avec ntfy - cachem.fr - 9/2022 Self hosted Mobile Push Notifications using NTFY | Thejesh GN - thejeshgn.com - 8/2022 Fedora Magazine | 4 cool new projects to try in Copr - fedoramagazine.org - 8/2022 Docker\ub85c \uc624\ud508\uc18c\uc2a4 \ud478\uc2dc\uc54c\ub78c \ud504\ub85c\uc81d\ud2b8 ntfy.sh \uc124\uce58 \ubc0f \uc0ac\uc6a9\ud558\uae30.(Feat. Uptimekuma) - svrforum.com - 8/2022 Easy notifications from R - sometimesir.com - 6/2022 ntfy is finally coming to iOS, and Matrix/UnifiedPush gateway support \u2b50 - reddit.com - 6/2022 Install guide (with Docker) - chowdera.com - 5/2022 \u65e0\u9700\u6ce8\u518c\u7684\u901a\u77e5\u670d\u52a1ntfy - blog.csdn.net - 5/2022 Updated review post (Jan-Lukas Else) - jlelse.blog - 4/2022 Reddit feature update post \u2b50 - reddit.com - 4/2022 \u7121\u6599\u3067\u7c21\u5358\u306b\u901a\u77e5\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u3064\u3064\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u30bb\u30eb\u30d5\u30db\u30b9\u30c8\u3082\u53ef\u80fd\u306a\u300cntfy\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f - gigazine.net - 4/2022 Pocketmags ntfy review - pocketmags.com - 3/2022 Reddit web app release post \u2b50 - reddit.com- 3/2022 Lemmy post (Jakob) - lemmy.eus - 1/2022 Reddit UnifiedPush release post \u2b50 - reddit.com - 1/2022 ntfy: send notifications from your computer to your phone - rs1.es - 1/2022 Short ntfy review (Jan-Lukas Else) - jlelse.blog - 12/2021 Free MacroDroid webhook alternative (FrameXX) - macrodroidforum.com - 12/2021 ntfy otro sistema de notificaciones pub-sub simple basado en HTTP - ugeek.github.io - 11/2021 Show HN: A tool to send push notifications to your phone, written in Go \u2b50 - news.ycombinator.com - 12/2021 Reddit selfhostable post \u2b50 - reddit.com - 11/2021","title":"Integrations + projects"},{"location":"integrations/#integrations-community-projects","text":"There are quite a few projects that work with ntfy, integrate ntfy, or have been built around ntfy. It's super exciting to see what you guys have come up with. Feel free to create a pull request on GitHub to add your own project here. I've added a \u2b50 to projects or posts that have a significant following, or had a lot of interaction by the community.","title":"Integrations + community projects"},{"location":"integrations/#public-ntfy-servers","text":"Here's a list of public ntfy servers. As of right now, there is only one official server. The others are provided by the ntfy community. Thanks to everyone running a public server. You guys rock! URL Country ntfy.sh ( Official ) \ud83c\uddfa\ud83c\uddf8 United States ntfy.tedomum.net \ud83c\uddeb\ud83c\uddf7 France ntfy.jae.fi \ud83c\uddeb\ud83c\uddee Finland ntfy.adminforge.de \ud83c\udde9\ud83c\uddea Germany ntfy.envs.net \ud83c\udde9\ud83c\uddea Germany Please be aware that server operators can log your messages . The project also cannot guarantee the reliability and uptime of third party servers, so use of each server is at your own discretion .","title":"Public ntfy servers"},{"location":"integrations/#official-integrations","text":"Healthchecks.io \u2b50 - Online service for monitoring regularly running tasks such as cron jobs Apprise \u2b50 - Push notifications that work with just about every platform Uptime Kuma \u2b50 - A self-hosted monitoring tool Robusta \u2b50 - open source platform for Kubernetes troubleshooting borgmatic \u2b50 - configuration-driven backup software for servers and workstations Radarr \u2b50 - Movie collection manager for Usenet and BitTorrent users Sonarr \u2b50 - PVR for Usenet and BitTorrent users Gatus \u2b50 - Automated service health dashboard Automatisch \u2b50 - Open source Zapier alternative / workflow automation tool FlexGet \u2b50 - Multipurpose automation tool for all of your media Platypush - Automation platform aimed to run on any device that can run Python","title":"Official integrations"},{"location":"integrations/#unifiedpush-integrations","text":"Element \u2b50 - Matrix client SchildiChat \u2b50 - Matrix client Tusky \u2b50 - Fediverse client Fedilab - Fediverse client FindMyDevice - Find your Device with an SMS or online with the help of FMDServer Tox Push Message App - Tox Push Message App","title":"UnifiedPush integrations"},{"location":"integrations/#libraries","text":"ntfy-php-library - PHP library for sending messages using a ntfy server (PHP) ntfy-notifier - Symfony Notifier integration for ntfy (PHP) ntfpy - API Wrapper for ntfy.sh (Python) pyntfy - A module for interacting with ntfy notifications (Python) vntfy - Barebone V client for ntfy (V) ntfy-middleman - Wraps APIs and send notifications using ntfy.sh on schedule (Python) ntfy-dotnet - .NET client library to interact with a ntfy server (C# / .NET) node-ntfy-publish - A Node package to publish notifications to an ntfy server (Node) ntfy - Wraps the ntfy API with pipe-friendly tooling (R)","title":"Libraries"},{"location":"integrations/#clis-guis","text":"ntfy.sh.sh - Run scripts on ntfy.sh events ntfy Desktop client - Cross-platform desktop application for ntfy ntfy svelte front-end - Front-end built with svelte wio-ntfy-ticker - Ticker display for a ntfy.sh topic ntfysh-windows - A ntfy client for Windows Desktop ntfyr - A simple commandline tool to send notifications to ntfy ntfy.py - ntfy.py is a simple nfty.sh client for sending notifications","title":"CLIs + GUIs"},{"location":"integrations/#projects-scripts","text":"Grafana-to-ntfy - Grafana-to-ntfy alerts channel (Rust) ntfy-long-zsh-command - Notifies you once a long-running command completes (zsh) ntfy-shellscripts - A few scripts for the ntfy project (Shell) QuickStatus - A shell script to alert to any immediate problems upon login (Shell) ntfy.el - Send notifications from Emacs (Emacs) backup-projects - Stupidly simple backup script for own projects (Shell) grav-plugin-whistleblower - Grav CMS plugin to get notifications via ntfy (PHP) ntfy-server-status - Checking if server is online and reporting through ntfy (C) borg-based backup - Simple borg-based backup script with notifications based on ntfy.sh or Discord webhooks (Python/Shell) ntfy.sh *arr script - Quick and hacky script to get sonarr/radarr to notify the ntfy.sh service (Shell) siteeagle - A small Python script to monitor websites and notify changes (Python) send_to_phone - Scripts to upload a file to Transfer.sh and ping ntfy with the download link (Python) ntfy Discord bot - WIP ntfy discord bot (TypeScript) ntfy Discord bot - ntfy Discord bot (Go) Bettarr Notifications - Better Notifications for Sonarr and Radarr (Python) Notify me the intruders - Notify you if they are intruders or new connections on your network (Shell) Send GitHub Action to ntfy - Send GitHub Action workflow notifications to ntfy (JS) ntfy alertmanager bridge - Basic alertmanager bridge to ntfy (JS) ntfy-alertmanager - A bridge between ntfy and Alertmanager (Go) alertmanager-ntfy - Relay prometheus alertmanager alerts to ntfy (Go) restreamchat2ntfy - Send restream.io chat to ntfy to check on the Meta Quest (JS) k8s-ntfy-deployment-service - Automatic Kubernetes (k8s) ntfy deployment huginn-global-entry-notif - Checks CBP API for available appointments with Huginn (JSON) ntfyer - Sending various information to your ntfy topic by time (TypeScript) git-simple-notifier - Script running git-log, checking for new repositories (Shell) ntfy-to-slack - Tool to subscribe to a ntfy topic and send the messages to a Slack webhook (Go) ansible-ntfy - Ansible action plugin to post JSON messages to ntfy (Python) ntfy-notification-channel - Laravel Notification channel for ntfy (PHP) ntfy_on_a_chip - ESP8266 and ESP32 client code to communicate with ntfy ntfy-sdk - ntfy client library to send notifications (Rust) ntfy_ynh - ntfy app for YunoHost","title":"Projects + scripts"},{"location":"integrations/#blog-forum-posts","text":"ntfy.sh - paramdeo.com - 11/2022 Using ntfy to warn me when my computer is discharging - ulysseszh.github.io - 11/2022 ntfy - Push Notification Service - dizzytech.de - 11/2022 Console #132 \u2b50 - console.substack.com - 11/2022 MeshCentral - Ntfy Push Notifications - youtube.com - 11/2022 Changelog | Tracking layoffs, tech worker demand still high, ntfy, ... \u2b50 - changelog.com - 11/2022 Pointer | Issue #367 - pointer.io - 11/2022 Envie Push Notifications por POST (de gra\u00e7a e sem cadastro) - tabnews.com.br - 11/2022 Push Notifications for KDE - volkerkrause.eu - 11/2022 TLDR Newsletter Daily Update 2022-11-09 \u2b50 - tldr.tech - 11/2022 Ntfy.sh \u2013 Send push notifications to your phone via PUT/POST \u2b50 - news.ycombinator.com - 11/2022 Ntfy et Jeedom : un plugin - lunarok-domotique.com - 11/2022 Crea tu propio servidor de notificaciones con Ntfy - blog.parravidales.es - 11/2022 Zero-cost push notifications to your phone or desktop via PUT/POST - lobste.rs - 10/2022 A nifty push notification system: ntfy - jpmens.net - 10/2022 Alarmanlage der dritten Art (YouTube video) - youtube.com - 10/2022 Neue Services: Ntfy, TikTok und RustDesk - adminforge.de - 9/2022 Ntfy, le service de notifications qu\u2019il vous faut - cachem.fr - 9/2022 NAS Synology et notifications avec ntfy - cachem.fr - 9/2022 Self hosted Mobile Push Notifications using NTFY | Thejesh GN - thejeshgn.com - 8/2022 Fedora Magazine | 4 cool new projects to try in Copr - fedoramagazine.org - 8/2022 Docker\ub85c \uc624\ud508\uc18c\uc2a4 \ud478\uc2dc\uc54c\ub78c \ud504\ub85c\uc81d\ud2b8 ntfy.sh \uc124\uce58 \ubc0f \uc0ac\uc6a9\ud558\uae30.(Feat. Uptimekuma) - svrforum.com - 8/2022 Easy notifications from R - sometimesir.com - 6/2022 ntfy is finally coming to iOS, and Matrix/UnifiedPush gateway support \u2b50 - reddit.com - 6/2022 Install guide (with Docker) - chowdera.com - 5/2022 \u65e0\u9700\u6ce8\u518c\u7684\u901a\u77e5\u670d\u52a1ntfy - blog.csdn.net - 5/2022 Updated review post (Jan-Lukas Else) - jlelse.blog - 4/2022 Reddit feature update post \u2b50 - reddit.com - 4/2022 \u7121\u6599\u3067\u7c21\u5358\u306b\u901a\u77e5\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u3064\u3064\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u30bb\u30eb\u30d5\u30db\u30b9\u30c8\u3082\u53ef\u80fd\u306a\u300cntfy\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f - gigazine.net - 4/2022 Pocketmags ntfy review - pocketmags.com - 3/2022 Reddit web app release post \u2b50 - reddit.com- 3/2022 Lemmy post (Jakob) - lemmy.eus - 1/2022 Reddit UnifiedPush release post \u2b50 - reddit.com - 1/2022 ntfy: send notifications from your computer to your phone - rs1.es - 1/2022 Short ntfy review (Jan-Lukas Else) - jlelse.blog - 12/2021 Free MacroDroid webhook alternative (FrameXX) - macrodroidforum.com - 12/2021 ntfy otro sistema de notificaciones pub-sub simple basado en HTTP - ugeek.github.io - 11/2021 Show HN: A tool to send push notifications to your phone, written in Go \u2b50 - news.ycombinator.com - 12/2021 Reddit selfhostable post \u2b50 - reddit.com - 11/2021","title":"Blog + forum posts"},{"location":"privacy/","text":"Privacy policy \u00b6 I love free software, and I'm doing this because it's fun. I have no bad intentions, and I will never monetize or sell your information, and this service and software will always stay free and open. Neither the server nor the app record any personal information, or share any of the messages and topics with any outside service. All data is exclusively used to make the service function properly. The only external service I use is Firebase Cloud Messaging (FCM) service, which is required to provide instant Android notifications (see FAQ for details). To avoid FCM altogether, download the F-Droid version. For debugging purposes, the ntfy server may temporarily log request paths, remote IP addresses or even topics or messages, though typically this is turned off.","title":"Privacy policy"},{"location":"privacy/#privacy-policy","text":"I love free software, and I'm doing this because it's fun. I have no bad intentions, and I will never monetize or sell your information, and this service and software will always stay free and open. Neither the server nor the app record any personal information, or share any of the messages and topics with any outside service. All data is exclusively used to make the service function properly. The only external service I use is Firebase Cloud Messaging (FCM) service, which is required to provide instant Android notifications (see FAQ for details). To avoid FCM altogether, download the F-Droid version. For debugging purposes, the ntfy server may temporarily log request paths, remote IP addresses or even topics or messages, though typically this is turned off.","title":"Privacy policy"},{"location":"publish/","text":"Publishing \u00b6 Publishing messages can be done via HTTP PUT/POST or via the ntfy CLI . Topics are created on the fly by subscribing or publishing to them. Because there is no sign-up, the topic is essentially a password , so pick something that's not easily guessable. Here's an example showing how to publish a simple message using a POST request: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -d \"Backup successful \ud83d\ude00\" ntfy.sh/mytopic ntfy publish mytopic \"Backup successful \ud83d\ude00\" POST /mytopic HTTP / 1.1 Host : ntfy.sh Backup successful \ud83d\ude00 fetch ( 'https://ntfy.sh/mytopic' , { method : 'POST' , // PUT works too body : 'Backup successful \ud83d\ude00' }) http . Post ( \"https://ntfy.sh/mytopic\" , \"text/plain\" , strings . NewReader ( \"Backup successful \ud83d\ude00\" )) Invoke-RestMethod -Method 'Post' -Uri https :// ntfy . sh / mytopic -Body \"Backup successful\" -UseBasicParsing requests . post ( \"https://ntfy.sh/mytopic\" , data = \"Backup successful \ud83d\ude00\" . encode ( encoding = 'utf-8' )) file_get_contents ( 'https://ntfy.sh/mytopic' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain' , 'content' => 'Backup successful \ud83d\ude00' ] ])); If you have the Android app installed on your phone, this will create a notification that looks like this: Android notification There are more features related to publishing messages: You can set a notification priority , a title , and tag messages \ud83e\udd73 \ud83c\udf89. Here's an example that uses some of them at together: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -H \"Title: Unauthorized access detected\" \\ -H \"Priority: urgent\" \\ -H \"Tags: warning,skull\" \\ -d \"Remote access to phils-laptop detected. Act right away.\" \\ ntfy.sh/phil_alerts ntfy publish \\ --title \"Unauthorized access detected\" \\ --tags warning,skull \\ --priority urgent \\ mytopic \\ \"Remote access to phils-laptop detected. Act right away.\" POST /phil_alerts HTTP / 1.1 Host : ntfy.sh Title : Unauthorized access detected Priority : urgent Tags : warning,skull Remote access to phils-laptop detected. Act right away. fetch ( 'https://ntfy.sh/phil_alerts' , { method : 'POST' , // PUT works too body : 'Remote access to phils-laptop detected. Act right away.' , headers : { 'Title' : 'Unauthorized access detected' , 'Priority' : 'urgent' , 'Tags' : 'warning,skull' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/phil_alerts\" , strings . NewReader ( \"Remote access to phils-laptop detected. Act right away.\" )) req . Header . Set ( \"Title\" , \"Unauthorized access detected\" ) req . Header . Set ( \"Priority\" , \"urgent\" ) req . Header . Set ( \"Tags\" , \"warning,skull\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/phil_alerts\" $headers = @{ Title = \"Unauthorized access detected\" Priority = \"urgent\" Tags = \"warning,skull\" } $body = \"Remote access to phils-laptop detected. Act right away.\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/phil_alerts\" , data = \"Remote access to phils-laptop detected. Act right away.\" , headers = { \"Title\" : \"Unauthorized access detected\" , \"Priority\" : \"urgent\" , \"Tags\" : \"warning,skull\" }) file_get_contents ( 'https://ntfy.sh/phil_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => \"Content-Type: text/plain \\r\\n \" . \"Title: Unauthorized access detected \\r\\n \" . \"Priority: urgent \\r\\n \" . \"Tags: warning,skull\" , 'content' => 'Remote access to phils-laptop detected. Act right away.' ] ])); Urgent notification with tags and title You can also do multi-line messages. Here's an example using a click action , an action button , an external image attachment and email publishing : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -H \"Click: https://home.nest.com/\" \\ -H \"Attach: https://nest.com/view/yAxkasd.jpg\" \\ -H \"Actions: http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" \\ -H \"Email: phil@example.com\" \\ -d \"There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.\" \\ ntfy.sh/mydoorbell ntfy publish \\ --click=\"https://home.nest.com/\" \\ --attach=\"https://nest.com/view/yAxkasd.jpg\" \\ --actions=\"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" \\ --email=\"phil@example.com\" \\ mydoorbell \\ \"There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.\" POST /mydoorbell HTTP / 1.1 Host : ntfy.sh Click : https://home.nest.com/ Attach : https://nest.com/view/yAxkasd.jpg Actions : http, Open door, https://api.nest.com/open/yAxkasd, clear=true Email : phil@example.com There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell. fetch ( 'https://ntfy.sh/mydoorbell' , { method : 'POST' , // PUT works too headers : { 'Click' : 'https://home.nest.com/' , 'Attach' : 'https://nest.com/view/yAxkasd.jpg' , 'Actions' : 'http, Open door, https://api.nest.com/open/yAxkasd, clear=true' , 'Email' : 'phil@example.com' }, body : `There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.` , }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/mydoorbell\" , strings . NewReader ( `There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.` )) req . Header . Set ( \"Click\" , \"https://home.nest.com/\" ) req . Header . Set ( \"Attach\" , \"https://nest.com/view/yAxkasd.jpg\" ) req . Header . Set ( \"Actions\" , \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" ) req . Header . Set ( \"Email\" , \"phil@example.com\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/mydoorbell\" $headers = @{ Click = \"https://home.nest.com/\" Attach = \"https://nest.com/view/yAxkasd.jpg\" Actions = \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" Email = \"phil@example.com\" } $body = @' There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell. '@ Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/mydoorbell\" , data = \"\"\"There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.\"\"\" . encode ( 'utf-8' ), headers = { \"Click\" : \"https://home.nest.com/\" , \"Attach\" : \"https://nest.com/view/yAxkasd.jpg\" , \"Actions\" : \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" , \"Email\" : \"phil@example.com\" }) file_get_contents ( 'https://ntfy.sh/mydoorbell' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => \"Content-Type: text/plain \\r\\n \" . \"Click: https://home.nest.com/ \\r\\n \" . \"Attach: https://nest.com/view/yAxkasd.jpg \\r\\n \" . \"Actions\" : \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true \\r\\n \" . \"Email\" : \"phil@example.com \\r\\n \" , 'content' => 'There\\'s someone at the door. \ud83d\udc36 Please check if it\\'s a good boy or a hooman. Doggies have been known to ring the doorbell.' ] ])); Notification using a click action, a user action, with an external image attachment and forwarded via email Message title \u00b6 Supported on: The notification title is typically set to the topic short URL (e.g. ntfy.sh/mytopic ). To override the title, you can set the X-Title header (or any of its aliases: Title , ti , or t ). Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Title: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial curl -H \"Title: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial curl -H \"t: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial ntfy publish \\ -t \"Dogs are better than cats\" \\ controversial \"Oh my ...\" POST /controversial HTTP / 1.1 Host : ntfy.sh Title : Dogs are better than cats Oh my ... fetch ( 'https://ntfy.sh/controversial' , { method : 'POST' , body : 'Oh my ...' , headers : { 'Title' : 'Dogs are better than cats' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/controversial\" , strings . NewReader ( \"Oh my ...\" )) req . Header . Set ( \"Title\" , \"Dogs are better than cats\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/controversial\" $headers = @{ Title = \"Dogs are better than cats\" } $body = \"Oh my ...\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/controversial\" , data = \"Oh my ...\" , headers = { \"Title\" : \"Dogs are better than cats\" }) file_get_contents ( 'https://ntfy.sh/controversial' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Title: Dogs are better than cats\" , 'content' => 'Oh my ...' ] ])); Detail view of notification with title Message priority \u00b6 Supported on: All messages have a priority, which defines how urgently your phone notifies you. On Android, you can set custom notification sounds and vibration patterns on your phone to map to these priorities (see Android config ). The following priorities exist: Priority Icon ID Name Description Max priority 5 max / urgent Really long vibration bursts, default notification sound with a pop-over notification. High priority 4 high Long vibration burst, default notification sound with a pop-over notification. Default priority (none) 3 default Short default vibration and sound. Default notification behavior. Low priority 2 low No vibration or sound. Notification will not visibly show up until notification drawer is pulled down. Min priority 1 min No vibration or sound. The notification will be under the fold in \"Other notifications\". You can set the priority with the header X-Priority (or any of its aliases: Priority , prio , or p ). Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Priority: 5\" -d \"An urgent message\" ntfy.sh/phil_alerts curl -H \"Priority: low\" -d \"Low priority message\" ntfy.sh/phil_alerts curl -H p:4 -d \"A high priority message\" ntfy.sh/phil_alerts ntfy publish \\ -p 5 \\ phil_alerts An urgent message POST /phil_alerts HTTP / 1.1 Host : ntfy.sh Priority : 5 An urgent message fetch ( 'https://ntfy.sh/phil_alerts' , { method : 'POST' , body : 'An urgent message' , headers : { 'Priority' : '5' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/phil_alerts\" , strings . NewReader ( \"An urgent message\" )) req . Header . Set ( \"Priority\" , \"5\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/phil_alerts\" $headers = @{ Priority = \"5\" } $body = \"An urgent message\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/phil_alerts\" , data = \"An urgent message\" , headers = { \"Priority\" : \"5\" }) file_get_contents ( 'https://ntfy.sh/phil_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Priority: 5\" , 'content' => 'An urgent message' ] ])); Detail view of priority notifications Tags & emojis \ud83e\udd73 \ud83c\udf89 \u00b6 Supported on: You can tag messages with emojis and other relevant strings: Emojis : If a tag matches an emoji short code , it'll be converted to an emoji and prepended to title or message. Other tags: If a tag doesn't match, it will be listed below the notification. This feature is useful for things like warnings (\u26a0\ufe0f, \ufe0f\ud83d\udea8, or \ud83d\udea9), but also to simply tag messages otherwise (e.g. script names, hostnames, etc.). Use the emoji short code list to figure out what tags can be converted to emojis. Here's an excerpt of emojis I've found very useful in alert messages: Tag Emoji +1 \ud83d\udc4d partying_face \ud83e\udd73 tada \ud83c\udf89 heavy_check_mark \u2714\ufe0f loudspeaker \ud83d\udce2 ... ... Tag Emoji -1 \ud83d\udc4e\ufe0f warning \u26a0\ufe0f rotating_light \ufe0f\ud83d\udea8 triangular_flag_on_post \ud83d\udea9 skull \ud83d\udc80 ... ... Tag Emoji facepalm \ud83e\udd26 no_entry \u26d4 no_entry_sign \ud83d\udeab cd \ud83d\udcbf computer \ud83d\udcbb ... ... You can set tags with the X-Tags header (or any of its aliases: Tags , tag , or ta ). Specify multiple tags by separating them with a comma, e.g. tag1,tag2,tag3 . Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Tags: warning,mailsrv13,daily-backup\" -d \"Backup of mailsrv13 failed\" ntfy.sh/backups curl -H \"Tags: horse,unicorn\" -d \"Unicorns are just horses with unique horns\" ntfy.sh/backups curl -H ta:dog -d \"Dogs are awesome\" ntfy.sh/backups ntfy publish \\ --tags=warning,mailsrv13,daily-backup \\ backups \"Backup of mailsrv13 failed\" POST /backups HTTP / 1.1 Host : ntfy.sh Tags : warning,mailsrv13,daily-backup Backup of mailsrv13 failed fetch ( 'https://ntfy.sh/backups' , { method : 'POST' , body : 'Backup of mailsrv13 failed' , headers : { 'Tags' : 'warning,mailsrv13,daily-backup' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/backups\" , strings . NewReader ( \"Backup of mailsrv13 failed\" )) req . Header . Set ( \"Tags\" , \"warning,mailsrv13,daily-backup\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/backups\" $headers = @{ Tags = \"warning,mailsrv13,daily-backup\" } $body = \"Backup of mailsrv13 failed\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/backups\" , data = \"Backup of mailsrv13 failed\" , headers = { \"Tags\" : \"warning,mailsrv13,daily-backup\" }) file_get_contents ( 'https://ntfy.sh/backups' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Tags: warning,mailsrv13,daily-backup\" , 'content' => 'Backup of mailsrv13 failed' ] ])); Detail view of notifications with tags Scheduled delivery \u00b6 Supported on: You can delay the delivery of messages and let ntfy send them at a later date. This can be used to send yourself reminders or even to execute commands at a later date (if your subscriber acts on messages). Usage is pretty straight forward. You can set the delivery time using the X-Delay header (or any of its aliases: Delay , X-At , At , X-In or In ), either by specifying a Unix timestamp (e.g. 1639194738 ), a duration (e.g. 30m , 3h , 2 days ), or a natural language time string (e.g. 10am , 8:30pm , tomorrow, 3pm , Tuesday, 7am , and more ). As of today, the minimum delay you can set is 10 seconds and the maximum delay is 3 days . This can currently not be configured otherwise ( let me know if you'd like to change these limits). For the purposes of message caching , scheduled messages are kept in the cache until 12 hours after they were delivered (or whatever the server-side cache duration is set to). For instance, if a message is scheduled to be delivered in 3 days, it'll remain in the cache for 3 days and 12 hours. Also note that naturally, turning off server-side caching is not possible in combination with this feature. Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"At: tomorrow, 10am\" -d \"Good morning\" ntfy.sh/hello curl -H \"In: 30min\" -d \"It's 30 minutes later now\" ntfy.sh/reminder curl -H \"Delay: 1639194738\" -d \"Unix timestamps are awesome\" ntfy.sh/itsaunixsystem ntfy publish \\ --at=\"tomorrow, 10am\" \\ hello \"Good morning\" POST /hello HTTP / 1.1 Host : ntfy.sh At : tomorrow, 10am Good morning fetch ( 'https://ntfy.sh/hello' , { method : 'POST' , body : 'Good morning' , headers : { 'At' : 'tomorrow, 10am' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/hello\" , strings . NewReader ( \"Good morning\" )) req . Header . Set ( \"At\" , \"tomorrow, 10am\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/hello\" $headers = @{ At = \"tomorrow, 10am\" } $body = \"Good morning\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/hello\" , data = \"Good morning\" , headers = { \"At\" : \"tomorrow, 10am\" }) file_get_contents ( 'https://ntfy.sh/backups' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"At: tomorrow, 10am\" , 'content' => 'Good morning' ] ])); Here are a few examples (assuming today's date is 12/10/2021, 9am, Eastern Time Zone ): Delay/At/In header Message will be delivered at Explanation 30m 12/10/2021, 9: 30 am 30 minutes from now 2 hours 12/10/2021, 11:30 am 2 hours from now 1 day 12/ 11 /2021, 9am 24 hours from now 10am 12/10/2021, 10am Today at 10am (same day, because it's only 9am) 8am 12/ 11 /2021, 8am Tomorrow at 8am (because it's 9am already) 1639152000 12/10/2021, 11am (EST) Today at 11am (EST) Webhooks (publish via GET) \u00b6 Supported on: In addition to using PUT/POST, you can also send to topics via simple HTTP GET requests. This makes it easy to use a ntfy topic as a webhook , or if your client has limited HTTP support (e.g. like the MacroDroid Android app). To send messages via HTTP GET, simply call the /publish endpoint (or its aliases /send and /trigger ). Without any arguments, this will send the message triggered to the topic. However, you can provide all arguments that are also supported as HTTP headers as URL-encoded arguments. Be sure to check the list of all supported parameters and headers for details. For instance, assuming your topic is mywebhook , you can simply call /mywebhook/trigger to send a message (aka trigger the webhook): Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh/mywebhook/trigger ntfy trigger mywebhook GET /mywebhook/trigger HTTP / 1.1 Host : ntfy.sh fetch ( 'https://ntfy.sh/mywebhook/trigger' ) http . Get ( \"https://ntfy.sh/mywebhook/trigger\" ) Invoke-RestMethod -Method 'Get' -Uri \"ntfy.sh/mywebhook/trigger\" requests . get ( \"https://ntfy.sh/mywebhook/trigger\" ) file_get_contents ( 'https://ntfy.sh/mywebhook/trigger' ); To add a custom message, simply append the message= URL parameter. And of course you can set the message priority , the message title , and tags as well. For a full list of possible parameters, check the list of supported parameters and headers . Here's an example with a custom message, tags and a priority: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \"ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\" ntfy publish \\ -p 5 --tags=warning,skull \\ mywebhook \"Webhook triggered\" GET /mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull HTTP / 1.1 Host : ntfy.sh fetch ( 'https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull' ) http . Get ( \"https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\" ) Invoke-RestMethod -Method 'Get' -Uri \"ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\" requests . get ( \"https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\" ) file_get_contents ( 'https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull' ); Publish as JSON \u00b6 Supported on: For some integrations with other tools (e.g. Jellyfin , overseerr ), adding custom headers to HTTP requests may be tricky or impossible, so ntfy also allows publishing the entire message as JSON in the request body. To publish as JSON, simple PUT/POST the JSON object directly to the ntfy root URL. The message format is described below the example. Info To publish as JSON, you must PUT/POST to the ntfy root URL , not to the topic URL. Be sure to check that you're POST-ing to https://ntfy.sh/ (correct), and not to https://ntfy.sh/mytopic (incorrect). Here's an example using most supported parameters. Check the table below for a complete list. The topic parameter is the only required one: Command line (curl) HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"mytopic\", \"message\": \"Disk space is low at 5.1 GB\", \"title\": \"Low disk space alert\", \"tags\": [\"warning\",\"cd\"], \"priority\": 4, \"attach\": \"https://filesrv.lan/space.jpg\", \"filename\": \"diskspace.jpg\", \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\", \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }] }' POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"mytopic\", \"message\": \"Disk space is low at 5.1 GB\", \"title\": \"Low disk space alert\", \"tags\": [\"warning\",\"cd\"], \"priority\": 4, \"attach\": \"https://filesrv.lan/space.jpg\", \"filename\": \"diskspace.jpg\", \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\", \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ \"topic\" : \"mytopic\" , \"message\" : \"Disk space is low at 5.1 GB\" , \"title\" : \"Low disk space alert\" , \"tags\" : [ \"warning\" , \"cd\" ], \"priority\" : 4 , \"attach\" : \"https://filesrv.lan/space.jpg\" , \"filename\" : \"diskspace.jpg\" , \"click\" : \"https://homecamera.lan/xasds1h2xsSsa/\" , \"actions\" : [{ \"action\" : \"view\" , \"label\" : \"Admin panel\" , \"url\" : \"https://filesrv.lan/admin\" }] }) }) // You should probably use json.Marshal() instead and make a proper struct, // or even just use req.Header.Set() like in the other examples, but for the // sake of the example, this is easier. body := `{ \"topic\": \"mytopic\", \"message\": \"Disk space is low at 5.1 GB\", \"title\": \"Low disk space alert\", \"tags\": [\"warning\",\"cd\"], \"priority\": 4, \"attach\": \"https://filesrv.lan/space.jpg\", \"filename\": \"diskspace.jpg\", \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\", \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh\" $body = @{ topic = \"mytopic\" title = \"Low disk space alert\" message = \"Disk space is low at 5.1 GB\" priority = 4 attach = \"https://filesrv.lan/space.jpg\" filename = \"diskspace.jpg\" tags = @( \"warning\" , \"cd\" ) click = \"https://homecamera.lan/xasds1h2xsSsa/\" actions = @( @{ action = \"view\" label = \"Admin panel\" url = \"https://filesrv.lan/admin\" } ) } | ConvertTo-Json Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"mytopic\" , \"message\" : \"Disk space is low at 5.1 GB\" , \"title\" : \"Low disk space alert\" , \"tags\" : [ \"warning\" , \"cd\" ], \"priority\" : 4 , \"attach\" : \"https://filesrv.lan/space.jpg\" , \"filename\" : \"diskspace.jpg\" , \"click\" : \"https://homecamera.lan/xasds1h2xsSsa/\" , \"actions\" : [{ \"action\" : \"view\" , \"label\" : \"Admin panel\" , \"url\" : \"https://filesrv.lan/admin\" }] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"mytopic\" , \"message\" : \"Disk space is low at 5.1 GB\" , \"title\" : \"Low disk space alert\" , \"tags\" : [ \"warning\" , \"cd\" ], \"priority\" : 4 , \"attach\" : \"https://filesrv.lan/space.jpg\" , \"filename\" : \"diskspace.jpg\" , \"click\" : \"https://homecamera.lan/xasds1h2xsSsa/\" , \"actions\" : [[ \"action\" : \"view\" , \"label\" : \"Admin panel\" , \"url\" : \"https://filesrv.lan/admin\" ]] ]) ] ])); The JSON message format closely mirrors the format of the message you can consume when you subscribe via the API (see JSON message format for details), but is not exactly identical. Here's an overview of all the supported fields: Field Required Type Example Description topic \u2714\ufe0f string topic1 Target topic name message - string Some message Message body; set to triggered if empty or not passed title - string Some title Message title tags - string array [\"tag1\",\"tag2\"] List of tags that may or not map to emojis priority - int (one of: 1, 2, 3, 4, or 5) 4 Message priority with 1=min, 3=default and 5=max actions - JSON array (see action buttons ) Custom user action buttons for notifications click - URL https://example.com Website opened when notification is clicked attach - URL https://example.com/file.jpg URL of an attachment, see attach via URL filename - string file.jpg File name of the attachment delay - string 30min , 9am Timestamp or duration for delayed delivery email - e-mail address phil@example.com E-mail address for e-mail notifications Action buttons \u00b6 Supported on: You can add action buttons to notifications to allow yourself to react to a notification directly. This is incredibly useful and has countless applications. You can control your home appliances (open/close garage door, change temperature on thermostat, ...), react to common monitoring alerts (clear logs when disk is full, ...), and many other things. The sky is the limit. As of today, the following actions are supported: view : Opens a website or app when the action button is tapped broadcast : Sends an Android broadcast intent when the action button is tapped (only supported on Android) http : Sends HTTP POST/GET/PUT request when the action button is tapped Here's an example of what that a notification with actions can look like: Notification with two user actions Defining actions \u00b6 You can define up to three user actions in your notifications, using either of the following methods: In the X-Actions header , using a simple comma-separated format As a JSON array in the actions key, when publishing as JSON Using a header \u00b6 To define actions using the X-Actions header (or any of its aliases: Actions , Action ), use the following format: Header format (long) Header format (short) action=<action1>, label=<label1>, paramN=... [; action=<action2>, label=<label2>, ...] <action1>, <label1>, paramN=... [; <action2>, <label2>, ...] Multiple actions are separated by a semicolon ( ; ), and key/value pairs are separated by commas ( , ). Values may be quoted with double quotes ( \" ) or single quotes ( ' ) if the value itself contains commas or semicolons. The action= and label= prefix are optional in all actions, and the url= prefix is optional in the view and http action. The only limitation of this format is that depending on your language/library, UTF-8 characters may not work. If they don't, use the JSON array format instead. As an example, here's how you can create the above notification using this format. Refer to the view action and http action section for details on the specific actions: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP body='{\"temperature\": 65}' curl \\ -d \"You left the house. Turn down the A/C?\" \\ -H \"Actions: view, Open portal, https://home.nest.com/, clear=true; \\ http, Turn down, https://api.nest.com/, body='$body'\" \\ ntfy.sh/myhome body='{\"temperature\": 65}' ntfy publish \\ --actions=\"view, Open portal, https://home.nest.com/, clear=true; \\ http, Turn down, https://api.nest.com/, body='$body'\" \\ myhome \\ \"You left the house. Turn down the A/C?\" POST /myhome HTTP / 1.1 Host : ntfy.sh Actions : view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\"temperature\": 65}' You left the house. Turn down the A/C? fetch ( 'https://ntfy.sh/myhome' , { method : 'POST' , body : 'You left the house. Turn down the A/C?' , headers : { 'Actions' : 'view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body=\\'{\"temperature\": 65}\\'' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/myhome\" , strings . NewReader ( \"You left the house. Turn down the A/C?\" )) req . Header . Set ( \"Actions\" , \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/myhome\" $headers = @{ Actions = \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\" temperature \\ \": 65}'\" } $body = \"You left the house. Turn down the A/C?\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/myhome\" , data = \"You left the house. Turn down the A/C?\" , headers = { \"Actions\" : \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{ \\\" temperature \\\" : 65}'\" }) file_get_contents ( 'https://ntfy.sh/reddit_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Actions: view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{ \\\" temperature \\\" : 65}'\" , 'content' => 'You left the house. Turn down the A/C?' ] ])); Using a JSON array \u00b6 Alternatively, the same actions can be defined as JSON array , if the notification is defined as part of the JSON body (see publish as JSON ): Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"myhome\", \"message\": \"You left the house. Turn down the A/C?\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open portal\", \"url\": \"https://home.nest.com/\", \"clear\": true }, { \"action\": \"http\", \"label\": \"Turn down\", \"url\": \"https://api.nest.com/\", \"body\": \"{\\\"temperature\\\": 65}\" } ] }' ntfy publish \\ --actions '[ { \"action\": \"view\", \"label\": \"Open portal\", \"url\": \"https://home.nest.com/\", \"clear\": true }, { \"action\": \"http\", \"label\": \"Turn down\", \"url\": \"https://api.nest.com/\", \"body\": \"{\\\"temperature\\\": 65}\" } ]' \\ myhome \\ \"You left the house. Turn down the A/C?\" POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"myhome\", \"message\": \"You left the house. Turn down the A/C?\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open portal\", \"url\": \"https://home.nest.com/\", \"clear\": true }, { \"action\": \"http\", \"label\": \"Turn down\", \"url\": \"https://api.nest.com/\", \"body\": \"{\\\"temperature\\\": 65}\" } ] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ topic : \"myhome\" , message : \"You left the house. Turn down the A/C?\" , actions : [ { action : \"view\" , label : \"Open portal\" , url : \"https://home.nest.com/\" , clear : true }, { action : \"http\" , label : \"Turn down\" , url : \"https://api.nest.com/\" , body : \"{\\\"temperature\\\": 65}\" } ] }) }) // You should probably use json.Marshal() instead and make a proper struct, // but for the sake of the example, this is easier. body := `{ \"topic\": \"myhome\", \"message\": \"You left the house. Turn down the A/C?\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open portal\", \"url\": \"https://home.nest.com/\", \"clear\": true }, { \"action\": \"http\", \"label\": \"Turn down\", \"url\": \"https://api.nest.com/\", \"body\": \"{\\\"temperature\\\": 65}\" } ] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh\" $body = @{ topic = \"myhome\" message = \"You left the house. Turn down the A/C?\" actions = @( @{ action = \"view\" label = \"Open portal\" url = \"https://home.nest.com/\" clear = $true }, @{ action = \"http\" label = \"Turn down\" url = \"https://api.nest.com/\" body = '{\"temperature\": 65}' } ) } | ConvertTo-Json Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"myhome\" , \"message\" : \"You left the house. Turn down the A/C?\" , \"actions\" : [ { \"action\" : \"view\" , \"label\" : \"Open portal\" , \"url\" : \"https://home.nest.com/\" , \"clear\" : true }, { \"action\" : \"http\" , \"label\" : \"Turn down\" , \"url\" : \"https://api.nest.com/\" , \"body\" : \"{ \\\" temperature \\\" : 65}\" } ] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"myhome\" , \"message\" : \"You left the house. Turn down the A/C?\" , \"actions\" : [ [ \"action\" : \"view\" , \"label\" : \"Open portal\" , \"url\" : \"https://home.nest.com/\" , \"clear\" : true ], [ \"action\" : \"http\" , \"label\" : \"Turn down\" , \"url\" : \"https://api.nest.com/\" , \"headers\" : [ \"Authorization\" : \"Bearer ...\" ], \"body\" : \"{ \\\" temperature \\\" : 65}\" ] ] ]) ] ])); The required/optional fields for each action depend on the type of the action itself. Please refer to view action , broadcasst action , and http action for details. Open website/app \u00b6 Supported on: The view action opens a website or app when the action button is tapped , e.g. a browser, a Google Maps location, or even a deep link into Twitter or a show ntfy topic. How exactly the action is handled depends on how Android and your desktop browser treat the links. Normally it'll just open a link in the browser. Examples: http:// or https:// will open your browser (or an app if it registered for a URL) mailto: links will open your mail app, e.g. mailto:phil@example.com geo: links will open Google Maps, e.g. geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+CA ntfy:// links will open ntfy (see ntfy:// links ), e.g. ntfy://ntfy.sh/stats twitter:// links will open Twitter, e.g. twitter://user?screen_name=.. ... Here's an example using the X-Actions header : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"Somebody retweeted your tweet.\" \\ -H \"Actions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" \\ ntfy.sh/myhome ntfy publish \\ --actions=\"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" \\ myhome \\ \"Somebody retweeted your tweet.\" POST /myhome HTTP / 1.1 Host : ntfy.sh Actions : view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392 Somebody retweeted your tweet. fetch ( 'https://ntfy.sh/myhome' , { method : 'POST' , body : 'Somebody retweeted your tweet.' , headers : { 'Actions' : 'view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/myhome\" , strings . NewReader ( \"Somebody retweeted your tweet.\" )) req . Header . Set ( \"Actions\" , \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/myhome\" $headers = @{ Actions = \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" } $body = \"Somebody retweeted your tweet.\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/myhome\" , data = \"Somebody retweeted your tweet.\" , headers = { \"Actions\" : \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" }) file_get_contents ( 'https://ntfy.sh/reddit_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Actions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" , 'content' => 'Somebody retweeted your tweet.' ] ])); And the same example using JSON publishing : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"myhome\", \"message\": \"Somebody retweeted your tweet.\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open Twitter\", \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ] }' ntfy publish \\ --actions '[ { \"action\": \"view\", \"label\": \"Open Twitter\", \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ]' \\ myhome \\ \"Somebody retweeted your tweet.\" POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"myhome\", \"message\": \"Somebody retweeted your tweet.\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open Twitter\", \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ topic : \"myhome\" , message \": \" Somebody retweeted your tweet . \", actions: [ { action: \" view \", label: \" Open Twitter \", url: \" https : //twitter.com/binwiederhier/status/1467633927951163392\" } ] }) }) // You should probably use json.Marshal() instead and make a proper struct, // but for the sake of the example, this is easier. body := `{ \"topic\": \"myhome\", \"message\": \"Somebody retweeted your tweet.\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open Twitter\", \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh\" $body = @{ topic = \"myhome\" message = \"Somebody retweeted your tweet.\" actions = @( @{ \"action\" = \"view\" \"label\" = \"Open Twitter\" \"url\" = \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ) } | ConvertTo-Json Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"myhome\" , \"message\" : \"Somebody retweeted your tweet.\" , \"actions\" : [ { \"action\" : \"view\" , \"label\" : \"Open Twitter\" , \"url\" : \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"myhome\" , \"message\" : \"Somebody retweeted your tweet.\" , \"actions\" : [ [ \"action\" : \"view\" , \"label\" : \"Open Twitter\" , \"url\" : \"https://twitter.com/binwiederhier/status/1467633927951163392\" ] ] ]) ] ])); The view action supports the following fields: Field Required Type Default Example Description action \u2714\ufe0f string - view Action type ( must be view ) label \u2714\ufe0f string - Turn on light Label of the action button in the notification url \u2714\ufe0f URL - https://example.com URL to open when action is tapped clear -\ufe0f boolean false true Clear notification after action button is tapped Send Android broadcast \u00b6 Supported on: The broadcast action sends an Android broadcast intent when the action button is tapped . This allows integration into automation apps such as MacroDroid or Tasker , which basically means you can do everything your phone is capable of. Examples include taking pictures, launching/killing apps, change device settings, write/read files, etc. By default, the intent action io.heckel.ntfy.USER_ACTION is broadcast, though this can be changed with the intent parameter (see below). To send extras, use the extras parameter. Currently, only string extras are supported . Info If you have no idea what this is, check out the automation apps section, which shows how to integrate Tasker and MacroDroid with screenshots . The action button integration is identical, except that you have to use the intent action io.heckel.ntfy.USER_ACTION instead. Here's an example using the X-Actions header : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"Your wife requested you send a picture of yourself.\" \\ -H \"Actions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\" \\ ntfy.sh/wifey ntfy publish \\ --actions=\"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" \\ wifey \\ \"Your wife requested you send a picture of yourself.\" POST /wifey HTTP / 1.1 Host : ntfy.sh Actions : broadcast, Take picture, extras.cmd=pic, extras.camera=front Your wife requested you send a picture of yourself. fetch ( 'https://ntfy.sh/wifey' , { method : 'POST' , body : 'Your wife requested you send a picture of yourself.' , headers : { 'Actions' : 'broadcast, Take picture, extras.cmd=pic, extras.camera=front' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/wifey\" , strings . NewReader ( \"Your wife requested you send a picture of yourself.\" )) req . Header . Set ( \"Actions\" , \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/wifey\" $headers = @{ Actions = \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" } $body = \"Your wife requested you send a picture of yourself.\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/wifey\" , data = \"Your wife requested you send a picture of yourself.\" , headers = { \"Actions\" : \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" }) file_get_contents ( 'https://ntfy.sh/wifey' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Actions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\" , 'content' => 'Your wife requested you send a picture of yourself.' ] ])); And the same example using JSON publishing : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"wifey\", \"message\": \"Your wife requested you send a picture of yourself.\", \"actions\": [ { \"action\": \"broadcast\", \"label\": \"Take picture\", \"extras\": { \"cmd\": \"pic\", \"camera\": \"front\" } } ] }' ntfy publish \\ --actions '[ { \"action\": \"broadcast\", \"label\": \"Take picture\", \"extras\": { \"cmd\": \"pic\", \"camera\": \"front\" } } ]' \\ wifey \\ \"Your wife requested you send a picture of yourself.\" POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"wifey\", \"message\": \"Your wife requested you send a picture of yourself.\", \"actions\": [ { \"action\": \"broadcast\", \"label\": \"Take picture\", \"extras\": { \"cmd\": \"pic\", \"camera\": \"front\" } } ] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ topic : \"wifey\" , message \": \" Your wife requested you send a picture of yourself . \", actions: [ { \" action \": \" broadcast \", \" label \": \" Take picture \", \" extras \": { \" cmd \": \" pic \", \" camera \": \" front \" } } ] }) }) // You should probably use json.Marshal() instead and make a proper struct, // but for the sake of the example, this is easier. body := `{ \"topic\": \"wifey\", \"message\": \"Your wife requested you send a picture of yourself.\", \"actions\": [ { \"action\": \"broadcast\", \"label\": \"Take picture\", \"extras\": { \"cmd\": \"pic\", \"camera\": \"front\" } } ] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) # Powershell requires the 'Depth' argument to equal 3 here to expand 'Extras', # otherwise it will read System.Collections.Hashtable in the returned JSON $uri = \"https://ntfy.sh\" $body = @{ topic = \"wifey\" message = \"Your wife requested you send a picture of yourself.\" actions = @( @{ action = \"broadcast\" label = \"Take picture\" extras = @{ cmd = \"pic\" camera = \"front\" } } ) } | ConvertTo-Json -Depth 3 Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"wifey\" , \"message\" : \"Your wife requested you send a picture of yourself.\" , \"actions\" : [ { \"action\" : \"broadcast\" , \"label\" : \"Take picture\" , \"extras\" : { \"cmd\" : \"pic\" , \"camera\" : \"front\" } } ] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"wifey\" , \"message\" : \"Your wife requested you send a picture of yourself.\" , \"actions\" : [ [ \"action\" : \"broadcast\" , \"label\" : \"Take picture\" , \"extras\" : [ \"cmd\" : \"pic\" , \"camera\" : \"front\" ] ] ]) ] ])); The broadcast action supports the following fields: Field Required Type Default Example Description action \u2714\ufe0f string - broadcast Action type ( must be broadcast ) label \u2714\ufe0f string - Turn on light Label of the action button in the notification intent -\ufe0f string io.heckel.ntfy.USER_ACTION com.example.AN_INTENT Android intent name, default is io.heckel.ntfy.USER_ACTION extras -\ufe0f map of strings - see above Android intent extras. Currently, only string extras are supported. When publishing as JSON, extras are passed as a map. When the simple format is used, use extras.<param>=<value> . clear -\ufe0f boolean false true Clear notification after action button is tapped Send HTTP request \u00b6 Supported on: The http action sends a HTTP request when the action button is tapped . You can use this to trigger REST APIs for whatever systems you have, e.g. opening the garage door, or turning on/off lights. By default, this action sends a POST request (not GET!), though this can be changed with the method parameter. The only required parameter is url . Headers can be passed along using the headers parameter. Here's an example using the X-Actions header : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"Garage door has been open for 15 minutes. Close it?\" \\ -H \"Actions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" \\ ntfy.sh/myhome ntfy publish \\ --actions=\"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" \\ myhome \\ \"Garage door has been open for 15 minutes. Close it?\" POST /myhome HTTP / 1.1 Host : ntfy.sh Actions : http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\"action\": \"close\"} Garage door has been open for 15 minutes. Close it? fetch ( 'https://ntfy.sh/myhome' , { method : 'POST' , body : 'Garage door has been open for 15 minutes. Close it?' , headers : { 'Actions' : 'http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/myhome\" , strings . NewReader ( \"Garage door has been open for 15 minutes. Close it?\" )) req . Header . Set ( \"Actions\" , \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/myhome\" $headers = @{ Actions = \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\" action \\ \": \\\" close \\ \"}\" } $body = \"Garage door has been open for 15 minutes. Close it?\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/myhome\" , data = \"Garage door has been open for 15 minutes. Close it?\" , headers = { \"Actions\" : \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={ \\\" action \\\" : \\\" close \\\" }\" }) file_get_contents ( 'https://ntfy.sh/reddit_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Actions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={ \\\" action \\\" : \\\" close \\\" }\" , 'content' => 'Garage door has been open for 15 minutes. Close it?' ] ])); And the same example using JSON publishing : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"myhome\", \"message\": \"Garage door has been open for 15 minutes. Close it?\", \"actions\": [ { \"action\": \"http\", \"label\": \"Close door\", \"url\": \"https://api.mygarage.lan/\", \"method\": \"PUT\", \"headers\": { \"Authorization\": \"Bearer zAzsx1sk..\" }, \"body\": \"{\\\"action\\\": \\\"close\\\"}\" } ] }' ntfy publish \\ --actions '[ { \"action\": \"http\", \"label\": \"Close door\", \"url\": \"https://api.mygarage.lan/\", \"method\": \"PUT\", \"headers\": { \"Authorization\": \"Bearer zAzsx1sk..\" }, \"body\": \"{\\\"action\\\": \\\"close\\\"}\" } ]' \\ myhome \\ \"Garage door has been open for 15 minutes. Close it?\" POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"myhome\", \"message\": \"Garage door has been open for 15 minutes. Close it?\", \"actions\": [ { \"action\": \"http\", \"label\": \"Close door\", \"url\": \"https://api.mygarage.lan/\", \"method\": \"PUT\", \"headers\": { \"Authorization\": \"Bearer zAzsx1sk..\" }, \"body\": \"{\\\"action\\\": \\\"close\\\"}\" } ] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ topic : \"myhome\" , message \": \" Garage door has been open for 15 minutes . Close it ? \", actions: [ { \" action \": \" http \", \" label \": \" Close door \", \" url \": \" https : //api.mygarage.lan/\", \"method\" : \"PUT\" , \"headers\" : { \"Authorization\" : \"Bearer zAzsx1sk..\" }, \"body\" : \"{\\\"action\\\": \\\"close\\\"}\" } ] }) }) // You should probably use json.Marshal() instead and make a proper struct, // but for the sake of the example, this is easier. body := `{ \"topic\": \"myhome\", \"message\": \"Garage door has been open for 15 minutes. Close it?\", \"actions\": [ { \"action\": \"http\", \"label\": \"Close door\", \"method\": \"PUT\", \"url\": \"https://api.mygarage.lan/\", \"headers\": { \"Authorization\": \"Bearer zAzsx1sk..\" }, \"body\": \"{\\\"action\\\": \\\"close\\\"}\" } ] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) # Powershell requires the 'Depth' argument to equal 3 here to expand 'headers', # otherwise it will read System.Collections.Hashtable in the returned JSON $uri = \"https://ntfy.sh\" $body = @{ topic = \"myhome\" message = \"Garage door has been open for 15 minutes. Close it?\" actions = @( @{ action = \"http\" label = \"Close door\" url = \"https://api.mygarage.lan/\" method = \"PUT\" headers = @{ Authorization = \"Bearer zAzsx1sk..\" } body = '{\"action\": \"close\"}' } ) } | ConvertTo-Json -Depth 3 Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"myhome\" , \"message\" : \"Garage door has been open for 15 minutes. Close it?\" , \"actions\" : [ { \"action\" : \"http\" , \"label\" : \"Close door\" , \"url\" : \"https://api.mygarage.lan/\" , \"method\" : \"PUT\" , \"headers\" : { \"Authorization\" : \"Bearer zAzsx1sk..\" }, \"body\" : \"{ \\\" action \\\" : \\\" close \\\" }\" } ] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"myhome\" , \"message\" : \"Garage door has been open for 15 minutes. Close it?\" , \"actions\" : [ [ \"action\" : \"http\" , \"label\" : \"Close door\" , \"url\" : \"https://api.mygarage.lan/\" , \"method\" : \"PUT\" , \"headers\" : [ \"Authorization\" : \"Bearer zAzsx1sk..\" ], \"body\" : \"{ \\\" action \\\" : \\\" close \\\" }\" ] ] ]) ] ])); The http action supports the following fields: Field Required Type Default Example Description action \u2714\ufe0f string - http Action type ( must be http ) label \u2714\ufe0f string - Open garage door Label of the action button in the notification url \u2714\ufe0f string - https://ntfy.sh/mytopic URL to which the HTTP request will be sent method -\ufe0f GET/POST/PUT/... POST \u26a0\ufe0f GET HTTP method to use for request, default is POST \u26a0\ufe0f headers -\ufe0f map of strings - see above HTTP headers to pass in request. When publishing as JSON, headers are passed as a map. When the simple format is used, use headers.<header1>=<value> . body -\ufe0f string empty some body, somebody? HTTP body clear -\ufe0f boolean false true Clear notification after HTTP request succeeds. If the request fails, the notification is not cleared. Click action \u00b6 Supported on: You can define which URL to open when a notification is clicked. This may be useful if your notification is related to a Zabbix alert or a transaction that you'd like to provide the deep-link for. Tapping the notification will open the web browser (or the app) and open the website. To define a click action for the notification, pass a URL as the value of the X-Click header (or its aliase Click ). If you pass a website URL ( http:// or https:// ) the web browser will open. If you pass another URI that can be handled by another app, the responsible app may open. Examples: http:// or https:// will open your browser (or an app if it registered for a URL) mailto: links will open your mail app, e.g. mailto:phil@example.com geo: links will open Google Maps, e.g. geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+CA ntfy:// links will open ntfy (see ntfy:// links ), e.g. ntfy://ntfy.sh/stats twitter:// links will open Twitter, e.g. twitter://user?screen_name=.. ... Here's an example that will open Reddit when the notification is clicked: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"New messages on Reddit\" \\ -H \"Click: https://www.reddit.com/message/messages\" \\ ntfy.sh/reddit_alerts ntfy publish \\ --click=\"https://www.reddit.com/message/messages\" \\ reddit_alerts \"New messages on Reddit\" POST /reddit_alerts HTTP / 1.1 Host : ntfy.sh Click : https://www.reddit.com/message/messages New messages on Reddit fetch ( 'https://ntfy.sh/reddit_alerts' , { method : 'POST' , body : 'New messages on Reddit' , headers : { 'Click' : 'https://www.reddit.com/message/messages' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/reddit_alerts\" , strings . NewReader ( \"New messages on Reddit\" )) req . Header . Set ( \"Click\" , \"https://www.reddit.com/message/messages\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/reddit_alerts\" $headers = @{ Click = \"https://www.reddit.com/message/messages\" } $body = \"New messages on Reddit\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/reddit_alerts\" , data = \"New messages on Reddit\" , headers = { \"Click\" : \"https://www.reddit.com/message/messages\" }) file_get_contents ( 'https://ntfy.sh/reddit_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Click: https://www.reddit.com/message/messages\" , 'content' => 'New messages on Reddit' ] ])); Attachments \u00b6 Supported on: You can send images and other files to your phone as attachments to a notification. The attachments are then downloaded onto your phone (depending on size and setting automatically), and can be used from the Downloads folder. There are two different ways to send attachments: sending a local file via PUT, e.g. from ~/Flowers/flower.jpg or ringtone.mp3 or by passing an external URL as an attachment, e.g. https://f-droid.org/F-Droid.apk Attach local file \u00b6 To send a file from your computer as an attachment, you can send it as the PUT request body. If a message is greater than the maximum message size (4,096 bytes) or consists of non UTF-8 characters, the ntfy server will automatically detect the mime type and size, and send the message as an attachment file. To send smaller text-only messages or files as attachments, you must pass a filename by passing the X-Filename header or query parameter (or any of its aliases Filename , File or f ). By default, and how ntfy.sh is configured, the max attachment size is 15 MB (with 100 MB total per visitor). Attachments expire after 3 hours , which typically is plenty of time for the user to download it, or for the Android app to auto-download it. Please also check out the other limits below . Here's an example showing how to upload an image: Command line (curl) ntfy CLI HTTP JavaScript Go Python PHP curl \\ -T flower.jpg \\ -H \"Filename: flower.jpg\" \\ ntfy.sh/flowers ntfy publish \\ --file=flower.jpg \\ flowers PUT /flowers HTTP / 1.1 Host : ntfy.sh Filename : flower.jpg Content-Type : 52312 (binary JPEG data) fetch ( 'https://ntfy.sh/flowers' , { method : 'PUT' , body : document . getElementById ( \"file\" ). files [ 0 ], headers : { 'Filename' : 'flower.jpg' } }) file , _ := os . Open ( \"flower.jpg\" ) req , _ := http . NewRequest ( \"PUT\" , \"https://ntfy.sh/flowers\" , file ) req . Header . Set ( \"Filename\" , \"flower.jpg\" ) http . DefaultClient . Do ( req ) requests . put ( \"https://ntfy.sh/flowers\" , data = open ( \"flower.jpg\" , 'rb' ), headers = { \"Filename\" : \"flower.jpg\" }) file_get_contents ( 'https://ntfy.sh/flowers' , false , stream_context_create ([ 'http' => [ 'method' => 'PUT' , 'header' => \"Content-Type: application/octet-stream \\r\\n \" . // Does not matter \"Filename: flower.jpg\" , 'content' => file_get_contents ( 'flower.jpg' ) // Dangerous for large files ] ])); Here's what that looks like on Android: Image attachment sent from a local file Attach file from a URL \u00b6 Instead of sending a local file to your phone, you can use an external URL to specify where the attachment is hosted. This could be a Dropbox link, a file from social media, or any other publicly available URL. Since the files are externally hosted, the expiration or size limits from above do not apply here. To attach an external file, simple pass the X-Attach header or query parameter (or any of its aliases Attach or a ) to specify the attachment URL. It can be any type of file. ntfy will automatically try to derive the file name from the URL (e.g https://example.com/flower.jpg will yield a filename flower.jpg ). To override this filename, you may send the X-Filename header or query parameter (or any of its aliases Filename , File or f ). Here's an example showing how to attach an APK file: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -X POST \\ -H \"Attach: https://f-droid.org/F-Droid.apk\" \\ ntfy.sh/mydownloads ntfy publish \\ --attach=\"https://f-droid.org/F-Droid.apk\" \\ mydownloads POST /mydownloads HTTP / 1.1 Host : ntfy.sh Attach : https://f-droid.org/F-Droid.apk fetch ( 'https://ntfy.sh/mydownloads' , { method : 'POST' , headers : { 'Attach' : 'https://f-droid.org/F-Droid.apk' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/mydownloads\" , file ) req . Header . Set ( \"Attach\" , \"https://f-droid.org/F-Droid.apk\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/mydownloads\" $headers = @{ Attach = \"https://f-droid.org/F-Droid.apk\" } Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -UseBasicParsing requests . put ( \"https://ntfy.sh/mydownloads\" , headers = { \"Attach\" : \"https://f-droid.org/F-Droid.apk\" }) file_get_contents ( 'https://ntfy.sh/mydownloads' , false , stream_context_create ([ 'http' => [ 'method' => 'PUT' , 'header' => \"Content-Type: text/plain \\r\\n \" . // Does not matter \"Attach: https://f-droid.org/F-Droid.apk\" , ] ])); File attachment sent from an external URL Icons \u00b6 Supported on: You can include an icon that will appear next to the text of the notification. Simply pass the X-Icon header or query parameter (or its alias Icon ) to specify the URL that the icon is located at. The client will automatically download the icon (unless it is already cached locally, and less than 24 hours old), and show it in the notification. Icons are cached locally in the client until the notification is deleted. Only JPEG and PNG images are supported at this time . Here's an example showing how to include an icon: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -H \"Icon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" \\ -H \"Title: Kodi: Resuming Playback\" \\ -H \"Tags: arrow_forward\" \\ -d \"The Wire, S01E01\" \\ ntfy.sh/tvshows ntfy publish \\ --icon=\"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" \\ --title=\"Kodi: Resuming Playback\" \\ --tags=\"arrow_forward\" \\ tvshows \\ \"The Wire, S01E01\" POST /tvshows HTTP / 1.1 Host : ntfy.sh Icon : https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png Tags : arrow_forward Title : Kodi: Resuming Playback The Wire, S01E01 fetch ( 'https://ntfy.sh/tvshows' , { method : 'POST' , headers : { 'Icon' : 'https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png' , 'Title' : 'Kodi: Resuming Playback' , 'Tags' : 'arrow_forward' }, body : \"The Wire, S01E01\" }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/tvshows\" , strings . NewReader ( \"The Wire, S01E01\" )) req . Header . Set ( \"Icon\" , \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" ) req . Header . Set ( \"Tags\" , \"arrow_forward\" ) req . Header . Set ( \"Title\" , \"Kodi: Resuming Playback\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/tvshows\" $headers = @{ Title \"=\" Kodi : Resuming Playback \" Tags=\" arrow_forward \" Icon=\" https :// styles . redditmedia . com / t5_32uhe / styles / communityIcon_xnt6chtnr2j21 . png \" } $body = \" The Wire , S01E01 \" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/tvshows\" , data = \"The Wire, S01E01\" , headers = { \"Title\" : \"Kodi: Resuming Playback\" , \"Tags\" : \"arrow_forward\" , \"Icon\" : \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" }) file_get_contents ( 'https://ntfy.sh/tvshows' , false , stream_context_create ([ 'http' => [ 'method' => 'PUT' , 'header' => \"Content-Type: text/plain \\r\\n \" . // Does not matter \"Title: Kodi: Resuming Playback \\r\\n \" . \"Tags: arrow_forward \\r\\n \" . \"Icon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" , ], 'content' => \"The Wire, S01E01\" ])); Here's an example of how it will look on Android: Custom icon from an external URL E-mail notifications \u00b6 Supported on: You can forward messages to e-mail by specifying an address in the header. This can be useful for messages that you'd like to persist longer, or to blast-notify yourself on all possible channels. Usage is easy: Simply pass the X-Email header (or any of its aliases: X-E-mail , Email , E-mail , Mail , or e ). Only one e-mail address is supported. Since ntfy does not provide auth (yet), the rate limiting is pretty strict (see limitations ). In the default configuration, you get 16 e-mails per visitor (IP address) and then after that one per hour. On top of that, your IP address appears in the e-mail body. This is to prevent abuse. Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -H \"Email: phil@example.com\" \\ -H \"Tags: warning,skull,backup-host,ssh-login\" \\ -H \"Priority: high\" \\ -d \"Unknown login from 5.31.23.83 to backups.example.com\" \\ ntfy.sh/alerts curl -H \"Email: phil@example.com\" -d \"You've Got Mail\" curl -d \"You've Got Mail\" \"ntfy.sh/alerts?email=phil@example.com\" ntfy publish \\ --email=phil@example.com \\ --tags=warning,skull,backup-host,ssh-login \\ --priority=high \\ alerts \"Unknown login from 5.31.23.83 to backups.example.com\" POST /alerts HTTP / 1.1 Host : ntfy.sh Email : phil@example.com Tags : warning,skull,backup-host,ssh-login Priority : high Unknown login from 5.31.23.83 to backups.example.com fetch ( 'https://ntfy.sh/alerts' , { method : 'POST' , body : \"Unknown login from 5.31.23.83 to backups.example.com\" , headers : { 'Email' : 'phil@example.com' , 'Tags' : 'warning,skull,backup-host,ssh-login' , 'Priority' : 'high' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/alerts\" , strings . NewReader ( \"Unknown login from 5.31.23.83 to backups.example.com\" )) req . Header . Set ( \"Email\" , \"phil@example.com\" ) req . Header . Set ( \"Tags\" , \"warning,skull,backup-host,ssh-login\" ) req . Header . Set ( \"Priority\" , \"high\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/alerts\" $headers = @{ Title \"=\" Low disk space alert \" Priority=\" high \" Tags=\" warning , skull , backup-host , ssh-login \") Email=\" phil @example . com \" } $body = \" Unknown login from 5 . 31 . 23 . 83 to backups . example . com \" Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/alerts\" , data = \"Unknown login from 5.31.23.83 to backups.example.com\" , headers = { \"Email\" : \"phil@example.com\" , \"Tags\" : \"warning,skull,backup-host,ssh-login\" , \"Priority\" : \"high\" }) file_get_contents ( 'https://ntfy.sh/alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Email: phil@example.com \\r\\n \" . \"Tags: warning,skull,backup-host,ssh-login \\r\\n \" . \"Priority: high\" , 'content' => 'Unknown login from 5.31.23.83 to backups.example.com' ] ])); Here's what that looks like in Google Mail: E-mail notification E-mail publishing \u00b6 Supported on: You can publish messages to a topic via e-mail, i.e. by sending an email to a specific address. For instance, you can publish a message to the topic sometopic by sending an e-mail to ntfy-sometopic@ntfy.sh . This is useful for e-mail based integrations such as for statuspage.io (though these days most services also support webhooks and HTTP calls). Depending on the server configuration , the e-mail address format can have a prefix to prevent spam on topics. For ntfy.sh, the prefix is configured to ntfy- , meaning that the general e-mail address format is: ntfy-$topic@ntfy.sh As of today, e-mail publishing only supports adding a message title (the e-mail subject). Tags, priority, delay and other features are not supported (yet). Here's an example that will publish a message with the title You've Got Mail to topic sometopic (see ntfy.sh/sometopic ): Publishing a message via e-mail Advanced features \u00b6 Authentication \u00b6 Depending on whether the server is configured to support access control , some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can: Use basic auth , e.g. Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk or use the auth query parameter , e.g. ?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw Warning Base64 only encodes username and password. It is not encrypting it . For your self-hosted server, be sure to use HTTPS to avoid eavesdropping and exposing your password. Basic auth \u00b6 Here's an example using Basic auth , with a user testuser and password fakepassword : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -u testuser:fakepassword \\ -d \"Look ma, with auth\" \\ https://ntfy.example.com/mysecrets ntfy publish \\ -u testuser:fakepassword \\ ntfy.example.com/mysecrets \\ \"Look ma, with auth\" POST /mysecrets HTTP / 1.1 Host : ntfy.example.com Authorization : Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk Look ma, with auth fetch ( 'https://ntfy.example.com/mysecrets' , { method : 'POST' , // PUT works too body : 'Look ma, with auth' , headers : { 'Authorization' : 'Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.example.com/mysecrets\" , strings . NewReader ( \"Look ma, with auth\" )) req . Header . Set ( \"Authorization\" , \"Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.example.com/mysecrets\" $credentials = 'testuser:fakepassword' $encodedCredentials = [convert] :: ToBase64String ( [text.Encoding] :: UTF8 . GetBytes ( $credentials )) $headers = @{ Authorization = \"Basic $encodedCredentials\" } $message = \"Look ma, with auth\" Invoke-RestMethod -Uri $uri -Body $message -Headers $headers -Method \"Post\" -UseBasicParsing requests . post ( \"https://ntfy.example.com/mysecrets\" , data = \"Look ma, with auth\" , headers = { \"Authorization\" : \"Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\" }) file_get_contents ( 'https://ntfy.example.com/mysecrets' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain\\r\\n' . 'Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk' , 'content' => 'Look ma, with auth' ] ])); To generate the Authorization header, use standard base64 to encode the colon-separated <username>:<password> and prepend the word Basic , i.e. Authorization: Basic base64(<username>:<password>) . Here's some pseudo-code that hopefully explains it better: username = \"testuser\" password = \"fakepassword\" authHeader = \"Basic \" + base64(username + \":\" + password) // -> Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk The following command will generate the appropriate value for you on *nix systems: echo \"Basic $(echo -n 'testuser:fakepassword' | base64)\" Query param \u00b6 Here's an example using the auth query parameter: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"Look ma, with auth\" \\ \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\" ntfy publish \\ -u testuser:fakepassword \\ ntfy.example.com/mysecrets \\ \"Look ma, with auth\" POST /mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw HTTP / 1.1 Host : ntfy.example.com Look ma, with auth fetch ( 'https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw' , { method : 'POST' , // PUT works too body : 'Look ma, with auth' }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\" , strings . NewReader ( \"Look ma, with auth\" )) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\" $message = \"Look ma, with auth\" Invoke-RestMethod -Uri $uri -Body $message -Method \"Post\" -UseBasicParsing requests . post ( \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\" , data = \"Look ma, with auth\" file_get_contents ( 'https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain' , 'content' => 'Look ma, with auth' ] ])); To generate the value of the auth parameter, encode the value of the Authorization header (see anove) using raw base64 encoding (like base64, but strip any trailing = ). Here's some pseudo-code that hopefully explains it better: username = \"testuser\" password = \"fakepassword\" authHeader = \"Basic \" + base64(username + \":\" + password) // -> Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk authParam = base64_raw(authHeader) // -> QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw (no trailing =) // If your language does not have a function to encode raw base64, simply use normal base64 // and REMOVE TRAILING \"=\" characters. The following command will generate the appropriate value for you on *nix systems: echo -n \"Basic `echo -n 'testuser:fakepassword' | base64`\" | base64 | tr -d '=' Message caching \u00b6 Info If Cache: no is used, messages will only be delivered to connected subscribers, and won't be re-delivered if a client re-connects. If a subscriber has (temporary) network issues or is reconnecting momentarily, messages might be missed . By default, the ntfy server caches messages on disk for 12 hours (see message caching ), so all messages you publish are stored server-side for a little while. The reason for this is to overcome temporary client-side network disruptions, but arguably this feature also may raise privacy concerns. To avoid messages being cached server-side entirely, you can set X-Cache header (or its alias: Cache ) to no . This will make sure that your message is not cached on the server, even if server-side caching is enabled. Messages are still delivered to connected subscribers, but since= and poll=1 won't return the message anymore. Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Cache: no\" -d \"This message won't be stored server-side\" ntfy.sh/mytopic curl -H \"Cache: no\" -d \"This message won't be stored server-side\" ntfy.sh/mytopic ntfy publish \\ --no-cache \\ mytopic \"This message won't be stored server-side\" POST /mytopic HTTP / 1.1 Host : ntfy.sh Cache : no This message won't be stored server-side fetch ( 'https://ntfy.sh/mytopic' , { method : 'POST' , body : 'This message won' t be stored server - side ', headers: { ' Cache ': ' no ' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/mytopic\" , strings . NewReader ( \"This message won't be stored server-side\" )) req . Header . Set ( \"Cache\" , \"no\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/mytopic\" $headers = @{ Cache = \"no\" } $body = \"This message won't be stored server-side\" Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -Headers $headers -UseBasicParsing requests . post ( \"https://ntfy.sh/mytopic\" , data = \"This message won't be stored server-side\" , headers = { \"Cache\" : \"no\" }) file_get_contents ( 'https://ntfy.sh/mytopic' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Cache: no\" , 'content' => 'This message won' t be stored server - side ' ] ])); Disable Firebase \u00b6 Info If Firebase: no is used and instant delivery isn't enabled in the Android app (Google Play variant only), message delivery will be significantly delayed (up to 15 minutes) . To overcome this delay, simply enable instant delivery. The ntfy server can be configured to use Firebase Cloud Messaging (FCM) (see Firebase config ) for message delivery on Android (to minimize the app's battery footprint). The ntfy.sh server is configured this way, meaning that all messages published to ntfy.sh are also published to corresponding FCM topics. If you'd like to avoid forwarding messages to Firebase, you can set the X-Firebase header (or its alias: Firebase ) to no . This will instruct the server not to forward messages to Firebase. Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Firebase: no\" -d \"This message won't be forwarded to FCM\" ntfy.sh/mytopic curl -H \"Firebase: no\" -d \"This message won't be forwarded to FCM\" ntfy.sh/mytopic ntfy publish \\ --no-firebase \\ mytopic \"This message won't be forwarded to FCM\" POST /mytopic HTTP / 1.1 Host : ntfy.sh Firebase : no This message won't be forwarded to FCM fetch ( 'https://ntfy.sh/mytopic' , { method : 'POST' , body : 'This message won' t be forwarded to FCM ', headers: { ' Firebase ': ' no ' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/mytopic\" , strings . NewReader ( \"This message won't be forwarded to FCM\" )) req . Header . Set ( \"Firebase\" , \"no\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/mytopic\" $headers = @{ Firebase = \"no\" } $body = \"This message won't be forwarded to FCM\" Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -Headers $headers -UseBasicParsing requests . post ( \"https://ntfy.sh/mytopic\" , data = \"This message won't be forwarded to FCM\" , headers = { \"Firebase\" : \"no\" }) file_get_contents ( 'https://ntfy.sh/mytopic' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Firebase: no\" , 'content' => 'This message won' t be stored server - side ' ] ])); UnifiedPush \u00b6 Info This setting is not relevant to users, only to app developers and people interested in UnifiedPush . UnifiedPush is a standard for receiving push notifications without using the Google-owned Firebase Cloud Messaging (FCM) service. It puts push notifications in the control of the user. ntfy can act as a UnifiedPush distributor , forwarding messages to apps that support it. When publishing messages to a topic, apps using ntfy as a UnifiedPush distributor can set the X-UnifiedPush header or query parameter (or any of its aliases unifiedpush or up ) to 1 to disable Firebase . As of today, this option is mostly equivalent to Firebase: no , but was introduced to allow future flexibility. The flag additionally enables auto-detection of the message encoding. If the message is binary, it'll be encoded as base64. Matrix Gateway \u00b6 The ntfy server implements a Matrix Push Gateway (in combination with UnifiedPush as the Provider Push Protocol ). This makes it easier to integrate with self-hosted Matrix servers (such as synapse ), since you don't have to set up a separate push proxy (such as common-proxies ). In short, ntfy accepts Matrix messages on the /_matrix/push/v1/notify endpoint (see Push Gateway API ), and forwards them to the ntfy topic defined in the pushkey of the message. The message will then be forwarded to the ntfy Android app, and passed on to the Matrix client there. There is a nice diagram in the Push Gateway docs . In this diagram, the ntfy server plays the role of the Push Gateway, as well as the Push Provider. UnifiedPush is the Provider Push Protocol. Info This is not a generic Matrix Push Gateway. It only works in combination with UnifiedPush and ntfy. Public topics \u00b6 Obviously all topics on ntfy.sh are public, but there are a few designated topics that are used in examples, and topics that you can use to try out what authentication and access control looks like. Topic User Permissions Description announcements * (unauthenticated) Read-only for everyone Release announcements and such stats * (unauthenticated) Read-only for everyone Daily statistics about ntfy.sh usage mytopic-rw testuser (password: testuser ) Read-write for testuser , no access for anyone else Test topic mytopic-ro testuser (password: testuser ) Read-only for testuser , no access for anyone else Test topic mytopic-wo testuser (password: testuser ) Write-only for testuser , no access for anyone else Test topic Limitations \u00b6 There are a few limitations to the API to prevent abuse and to keep the server healthy. Almost all of these settings are configurable via the server side rate limiting settings . Most of these limits you won't run into, but just in case, let's list them all: Limit Description Message length Each message can be up to 4,096 bytes long. Longer messages are treated as attachments . Requests By default, the server is configured to allow 60 requests per visitor at once, and then refills the your allowed requests bucket at a rate of one request per 5 seconds. E-mails By default, the server is configured to allow sending 16 e-mails per visitor at once, and then refills the your allowed e-mail bucket at a rate of one per hour. Subscription limit By default, the server allows each visitor to keep 30 connections to the server open. Attachment size limit By default, the server allows attachments up to 15 MB in size, up to 100 MB in total per visitor and up to 5 GB across all visitors. Attachment expiry By default, the server deletes attachments after 3 hours and thereby frees up space from the total visitor attachment limit. Attachment bandwidth By default, the server allows 500 MB of GET/PUT/POST traffic for attachments per visitor in a 24 hour period. Traffic exceeding that is rejected. Total number of topics By default, the server is configured to allow 15,000 topics. The ntfy.sh server has higher limits though. List of all parameters \u00b6 The following is a list of all parameters that can be passed when publishing a message. Parameter names are case-insensitive , and can be passed as HTTP headers or query parameters in the URL . They are listed in the table in their canonical form. Parameter Aliases (case-insensitive) Description X-Message Message , m Main body of the message as shown in the notification X-Title Title , t Message title X-Priority Priority , prio , p Message priority X-Tags Tags , Tag , ta Tags and emojis X-Delay Delay , X-At , At , X-In , In Timestamp or duration for delayed delivery X-Actions Actions , Action JSON array or short format of user actions X-Click Click URL to open when notification is clicked X-Attach Attach , a URL to send as an attachment , as an alternative to PUT/POST-ing an attachment X-Icon Icon URL to use as notification icon X-Filename Filename , file , f Optional attachment filename, as it appears in the client X-Email X-E-Mail , Email , E-Mail , mail , e E-mail address for e-mail notifications X-Cache Cache Allows disabling message caching X-Firebase Firebase Allows disabling sending to Firebase X-UnifiedPush UnifiedPush , up UnifiedPush publish option, only to be used by UnifiedPush apps X-Poll-ID Poll-ID Internal parameter, used for iOS push notifications Authorization - If supported by the server, you can login to access protected topics","title":"Sending messages"},{"location":"publish/#publishing","text":"Publishing messages can be done via HTTP PUT/POST or via the ntfy CLI . Topics are created on the fly by subscribing or publishing to them. Because there is no sign-up, the topic is essentially a password , so pick something that's not easily guessable. Here's an example showing how to publish a simple message using a POST request: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -d \"Backup successful \ud83d\ude00\" ntfy.sh/mytopic ntfy publish mytopic \"Backup successful \ud83d\ude00\" POST /mytopic HTTP / 1.1 Host : ntfy.sh Backup successful \ud83d\ude00 fetch ( 'https://ntfy.sh/mytopic' , { method : 'POST' , // PUT works too body : 'Backup successful \ud83d\ude00' }) http . Post ( \"https://ntfy.sh/mytopic\" , \"text/plain\" , strings . NewReader ( \"Backup successful \ud83d\ude00\" )) Invoke-RestMethod -Method 'Post' -Uri https :// ntfy . sh / mytopic -Body \"Backup successful\" -UseBasicParsing requests . post ( \"https://ntfy.sh/mytopic\" , data = \"Backup successful \ud83d\ude00\" . encode ( encoding = 'utf-8' )) file_get_contents ( 'https://ntfy.sh/mytopic' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain' , 'content' => 'Backup successful \ud83d\ude00' ] ])); If you have the Android app installed on your phone, this will create a notification that looks like this: Android notification There are more features related to publishing messages: You can set a notification priority , a title , and tag messages \ud83e\udd73 \ud83c\udf89. Here's an example that uses some of them at together: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -H \"Title: Unauthorized access detected\" \\ -H \"Priority: urgent\" \\ -H \"Tags: warning,skull\" \\ -d \"Remote access to phils-laptop detected. Act right away.\" \\ ntfy.sh/phil_alerts ntfy publish \\ --title \"Unauthorized access detected\" \\ --tags warning,skull \\ --priority urgent \\ mytopic \\ \"Remote access to phils-laptop detected. Act right away.\" POST /phil_alerts HTTP / 1.1 Host : ntfy.sh Title : Unauthorized access detected Priority : urgent Tags : warning,skull Remote access to phils-laptop detected. Act right away. fetch ( 'https://ntfy.sh/phil_alerts' , { method : 'POST' , // PUT works too body : 'Remote access to phils-laptop detected. Act right away.' , headers : { 'Title' : 'Unauthorized access detected' , 'Priority' : 'urgent' , 'Tags' : 'warning,skull' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/phil_alerts\" , strings . NewReader ( \"Remote access to phils-laptop detected. Act right away.\" )) req . Header . Set ( \"Title\" , \"Unauthorized access detected\" ) req . Header . Set ( \"Priority\" , \"urgent\" ) req . Header . Set ( \"Tags\" , \"warning,skull\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/phil_alerts\" $headers = @{ Title = \"Unauthorized access detected\" Priority = \"urgent\" Tags = \"warning,skull\" } $body = \"Remote access to phils-laptop detected. Act right away.\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/phil_alerts\" , data = \"Remote access to phils-laptop detected. Act right away.\" , headers = { \"Title\" : \"Unauthorized access detected\" , \"Priority\" : \"urgent\" , \"Tags\" : \"warning,skull\" }) file_get_contents ( 'https://ntfy.sh/phil_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => \"Content-Type: text/plain \\r\\n \" . \"Title: Unauthorized access detected \\r\\n \" . \"Priority: urgent \\r\\n \" . \"Tags: warning,skull\" , 'content' => 'Remote access to phils-laptop detected. Act right away.' ] ])); Urgent notification with tags and title You can also do multi-line messages. Here's an example using a click action , an action button , an external image attachment and email publishing : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -H \"Click: https://home.nest.com/\" \\ -H \"Attach: https://nest.com/view/yAxkasd.jpg\" \\ -H \"Actions: http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" \\ -H \"Email: phil@example.com\" \\ -d \"There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.\" \\ ntfy.sh/mydoorbell ntfy publish \\ --click=\"https://home.nest.com/\" \\ --attach=\"https://nest.com/view/yAxkasd.jpg\" \\ --actions=\"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" \\ --email=\"phil@example.com\" \\ mydoorbell \\ \"There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.\" POST /mydoorbell HTTP / 1.1 Host : ntfy.sh Click : https://home.nest.com/ Attach : https://nest.com/view/yAxkasd.jpg Actions : http, Open door, https://api.nest.com/open/yAxkasd, clear=true Email : phil@example.com There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell. fetch ( 'https://ntfy.sh/mydoorbell' , { method : 'POST' , // PUT works too headers : { 'Click' : 'https://home.nest.com/' , 'Attach' : 'https://nest.com/view/yAxkasd.jpg' , 'Actions' : 'http, Open door, https://api.nest.com/open/yAxkasd, clear=true' , 'Email' : 'phil@example.com' }, body : `There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.` , }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/mydoorbell\" , strings . NewReader ( `There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.` )) req . Header . Set ( \"Click\" , \"https://home.nest.com/\" ) req . Header . Set ( \"Attach\" , \"https://nest.com/view/yAxkasd.jpg\" ) req . Header . Set ( \"Actions\" , \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" ) req . Header . Set ( \"Email\" , \"phil@example.com\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/mydoorbell\" $headers = @{ Click = \"https://home.nest.com/\" Attach = \"https://nest.com/view/yAxkasd.jpg\" Actions = \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" Email = \"phil@example.com\" } $body = @' There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell. '@ Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/mydoorbell\" , data = \"\"\"There's someone at the door. \ud83d\udc36 Please check if it's a good boy or a hooman. Doggies have been known to ring the doorbell.\"\"\" . encode ( 'utf-8' ), headers = { \"Click\" : \"https://home.nest.com/\" , \"Attach\" : \"https://nest.com/view/yAxkasd.jpg\" , \"Actions\" : \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" , \"Email\" : \"phil@example.com\" }) file_get_contents ( 'https://ntfy.sh/mydoorbell' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => \"Content-Type: text/plain \\r\\n \" . \"Click: https://home.nest.com/ \\r\\n \" . \"Attach: https://nest.com/view/yAxkasd.jpg \\r\\n \" . \"Actions\" : \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true \\r\\n \" . \"Email\" : \"phil@example.com \\r\\n \" , 'content' => 'There\\'s someone at the door. \ud83d\udc36 Please check if it\\'s a good boy or a hooman. Doggies have been known to ring the doorbell.' ] ])); Notification using a click action, a user action, with an external image attachment and forwarded via email","title":"Publishing"},{"location":"publish/#message-title","text":"Supported on: The notification title is typically set to the topic short URL (e.g. ntfy.sh/mytopic ). To override the title, you can set the X-Title header (or any of its aliases: Title , ti , or t ). Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Title: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial curl -H \"Title: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial curl -H \"t: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial ntfy publish \\ -t \"Dogs are better than cats\" \\ controversial \"Oh my ...\" POST /controversial HTTP / 1.1 Host : ntfy.sh Title : Dogs are better than cats Oh my ... fetch ( 'https://ntfy.sh/controversial' , { method : 'POST' , body : 'Oh my ...' , headers : { 'Title' : 'Dogs are better than cats' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/controversial\" , strings . NewReader ( \"Oh my ...\" )) req . Header . Set ( \"Title\" , \"Dogs are better than cats\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/controversial\" $headers = @{ Title = \"Dogs are better than cats\" } $body = \"Oh my ...\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/controversial\" , data = \"Oh my ...\" , headers = { \"Title\" : \"Dogs are better than cats\" }) file_get_contents ( 'https://ntfy.sh/controversial' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Title: Dogs are better than cats\" , 'content' => 'Oh my ...' ] ])); Detail view of notification with title","title":"Message title"},{"location":"publish/#message-priority","text":"Supported on: All messages have a priority, which defines how urgently your phone notifies you. On Android, you can set custom notification sounds and vibration patterns on your phone to map to these priorities (see Android config ). The following priorities exist: Priority Icon ID Name Description Max priority 5 max / urgent Really long vibration bursts, default notification sound with a pop-over notification. High priority 4 high Long vibration burst, default notification sound with a pop-over notification. Default priority (none) 3 default Short default vibration and sound. Default notification behavior. Low priority 2 low No vibration or sound. Notification will not visibly show up until notification drawer is pulled down. Min priority 1 min No vibration or sound. The notification will be under the fold in \"Other notifications\". You can set the priority with the header X-Priority (or any of its aliases: Priority , prio , or p ). Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Priority: 5\" -d \"An urgent message\" ntfy.sh/phil_alerts curl -H \"Priority: low\" -d \"Low priority message\" ntfy.sh/phil_alerts curl -H p:4 -d \"A high priority message\" ntfy.sh/phil_alerts ntfy publish \\ -p 5 \\ phil_alerts An urgent message POST /phil_alerts HTTP / 1.1 Host : ntfy.sh Priority : 5 An urgent message fetch ( 'https://ntfy.sh/phil_alerts' , { method : 'POST' , body : 'An urgent message' , headers : { 'Priority' : '5' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/phil_alerts\" , strings . NewReader ( \"An urgent message\" )) req . Header . Set ( \"Priority\" , \"5\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/phil_alerts\" $headers = @{ Priority = \"5\" } $body = \"An urgent message\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/phil_alerts\" , data = \"An urgent message\" , headers = { \"Priority\" : \"5\" }) file_get_contents ( 'https://ntfy.sh/phil_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Priority: 5\" , 'content' => 'An urgent message' ] ])); Detail view of priority notifications","title":"Message priority"},{"location":"publish/#tags-emojis","text":"Supported on: You can tag messages with emojis and other relevant strings: Emojis : If a tag matches an emoji short code , it'll be converted to an emoji and prepended to title or message. Other tags: If a tag doesn't match, it will be listed below the notification. This feature is useful for things like warnings (\u26a0\ufe0f, \ufe0f\ud83d\udea8, or \ud83d\udea9), but also to simply tag messages otherwise (e.g. script names, hostnames, etc.). Use the emoji short code list to figure out what tags can be converted to emojis. Here's an excerpt of emojis I've found very useful in alert messages: Tag Emoji +1 \ud83d\udc4d partying_face \ud83e\udd73 tada \ud83c\udf89 heavy_check_mark \u2714\ufe0f loudspeaker \ud83d\udce2 ... ... Tag Emoji -1 \ud83d\udc4e\ufe0f warning \u26a0\ufe0f rotating_light \ufe0f\ud83d\udea8 triangular_flag_on_post \ud83d\udea9 skull \ud83d\udc80 ... ... Tag Emoji facepalm \ud83e\udd26 no_entry \u26d4 no_entry_sign \ud83d\udeab cd \ud83d\udcbf computer \ud83d\udcbb ... ... You can set tags with the X-Tags header (or any of its aliases: Tags , tag , or ta ). Specify multiple tags by separating them with a comma, e.g. tag1,tag2,tag3 . Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Tags: warning,mailsrv13,daily-backup\" -d \"Backup of mailsrv13 failed\" ntfy.sh/backups curl -H \"Tags: horse,unicorn\" -d \"Unicorns are just horses with unique horns\" ntfy.sh/backups curl -H ta:dog -d \"Dogs are awesome\" ntfy.sh/backups ntfy publish \\ --tags=warning,mailsrv13,daily-backup \\ backups \"Backup of mailsrv13 failed\" POST /backups HTTP / 1.1 Host : ntfy.sh Tags : warning,mailsrv13,daily-backup Backup of mailsrv13 failed fetch ( 'https://ntfy.sh/backups' , { method : 'POST' , body : 'Backup of mailsrv13 failed' , headers : { 'Tags' : 'warning,mailsrv13,daily-backup' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/backups\" , strings . NewReader ( \"Backup of mailsrv13 failed\" )) req . Header . Set ( \"Tags\" , \"warning,mailsrv13,daily-backup\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/backups\" $headers = @{ Tags = \"warning,mailsrv13,daily-backup\" } $body = \"Backup of mailsrv13 failed\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/backups\" , data = \"Backup of mailsrv13 failed\" , headers = { \"Tags\" : \"warning,mailsrv13,daily-backup\" }) file_get_contents ( 'https://ntfy.sh/backups' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Tags: warning,mailsrv13,daily-backup\" , 'content' => 'Backup of mailsrv13 failed' ] ])); Detail view of notifications with tags","title":"Tags &amp; emojis \ud83e\udd73 \ud83c\udf89"},{"location":"publish/#scheduled-delivery","text":"Supported on: You can delay the delivery of messages and let ntfy send them at a later date. This can be used to send yourself reminders or even to execute commands at a later date (if your subscriber acts on messages). Usage is pretty straight forward. You can set the delivery time using the X-Delay header (or any of its aliases: Delay , X-At , At , X-In or In ), either by specifying a Unix timestamp (e.g. 1639194738 ), a duration (e.g. 30m , 3h , 2 days ), or a natural language time string (e.g. 10am , 8:30pm , tomorrow, 3pm , Tuesday, 7am , and more ). As of today, the minimum delay you can set is 10 seconds and the maximum delay is 3 days . This can currently not be configured otherwise ( let me know if you'd like to change these limits). For the purposes of message caching , scheduled messages are kept in the cache until 12 hours after they were delivered (or whatever the server-side cache duration is set to). For instance, if a message is scheduled to be delivered in 3 days, it'll remain in the cache for 3 days and 12 hours. Also note that naturally, turning off server-side caching is not possible in combination with this feature. Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"At: tomorrow, 10am\" -d \"Good morning\" ntfy.sh/hello curl -H \"In: 30min\" -d \"It's 30 minutes later now\" ntfy.sh/reminder curl -H \"Delay: 1639194738\" -d \"Unix timestamps are awesome\" ntfy.sh/itsaunixsystem ntfy publish \\ --at=\"tomorrow, 10am\" \\ hello \"Good morning\" POST /hello HTTP / 1.1 Host : ntfy.sh At : tomorrow, 10am Good morning fetch ( 'https://ntfy.sh/hello' , { method : 'POST' , body : 'Good morning' , headers : { 'At' : 'tomorrow, 10am' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/hello\" , strings . NewReader ( \"Good morning\" )) req . Header . Set ( \"At\" , \"tomorrow, 10am\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/hello\" $headers = @{ At = \"tomorrow, 10am\" } $body = \"Good morning\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/hello\" , data = \"Good morning\" , headers = { \"At\" : \"tomorrow, 10am\" }) file_get_contents ( 'https://ntfy.sh/backups' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"At: tomorrow, 10am\" , 'content' => 'Good morning' ] ])); Here are a few examples (assuming today's date is 12/10/2021, 9am, Eastern Time Zone ): Delay/At/In header Message will be delivered at Explanation 30m 12/10/2021, 9: 30 am 30 minutes from now 2 hours 12/10/2021, 11:30 am 2 hours from now 1 day 12/ 11 /2021, 9am 24 hours from now 10am 12/10/2021, 10am Today at 10am (same day, because it's only 9am) 8am 12/ 11 /2021, 8am Tomorrow at 8am (because it's 9am already) 1639152000 12/10/2021, 11am (EST) Today at 11am (EST)","title":"Scheduled delivery"},{"location":"publish/#webhooks-publish-via-get","text":"Supported on: In addition to using PUT/POST, you can also send to topics via simple HTTP GET requests. This makes it easy to use a ntfy topic as a webhook , or if your client has limited HTTP support (e.g. like the MacroDroid Android app). To send messages via HTTP GET, simply call the /publish endpoint (or its aliases /send and /trigger ). Without any arguments, this will send the message triggered to the topic. However, you can provide all arguments that are also supported as HTTP headers as URL-encoded arguments. Be sure to check the list of all supported parameters and headers for details. For instance, assuming your topic is mywebhook , you can simply call /mywebhook/trigger to send a message (aka trigger the webhook): Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh/mywebhook/trigger ntfy trigger mywebhook GET /mywebhook/trigger HTTP / 1.1 Host : ntfy.sh fetch ( 'https://ntfy.sh/mywebhook/trigger' ) http . Get ( \"https://ntfy.sh/mywebhook/trigger\" ) Invoke-RestMethod -Method 'Get' -Uri \"ntfy.sh/mywebhook/trigger\" requests . get ( \"https://ntfy.sh/mywebhook/trigger\" ) file_get_contents ( 'https://ntfy.sh/mywebhook/trigger' ); To add a custom message, simply append the message= URL parameter. And of course you can set the message priority , the message title , and tags as well. For a full list of possible parameters, check the list of supported parameters and headers . Here's an example with a custom message, tags and a priority: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \"ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\" ntfy publish \\ -p 5 --tags=warning,skull \\ mywebhook \"Webhook triggered\" GET /mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull HTTP / 1.1 Host : ntfy.sh fetch ( 'https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull' ) http . Get ( \"https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\" ) Invoke-RestMethod -Method 'Get' -Uri \"ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\" requests . get ( \"https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\" ) file_get_contents ( 'https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull' );","title":"Webhooks (publish via GET)"},{"location":"publish/#publish-as-json","text":"Supported on: For some integrations with other tools (e.g. Jellyfin , overseerr ), adding custom headers to HTTP requests may be tricky or impossible, so ntfy also allows publishing the entire message as JSON in the request body. To publish as JSON, simple PUT/POST the JSON object directly to the ntfy root URL. The message format is described below the example. Info To publish as JSON, you must PUT/POST to the ntfy root URL , not to the topic URL. Be sure to check that you're POST-ing to https://ntfy.sh/ (correct), and not to https://ntfy.sh/mytopic (incorrect). Here's an example using most supported parameters. Check the table below for a complete list. The topic parameter is the only required one: Command line (curl) HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"mytopic\", \"message\": \"Disk space is low at 5.1 GB\", \"title\": \"Low disk space alert\", \"tags\": [\"warning\",\"cd\"], \"priority\": 4, \"attach\": \"https://filesrv.lan/space.jpg\", \"filename\": \"diskspace.jpg\", \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\", \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }] }' POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"mytopic\", \"message\": \"Disk space is low at 5.1 GB\", \"title\": \"Low disk space alert\", \"tags\": [\"warning\",\"cd\"], \"priority\": 4, \"attach\": \"https://filesrv.lan/space.jpg\", \"filename\": \"diskspace.jpg\", \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\", \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ \"topic\" : \"mytopic\" , \"message\" : \"Disk space is low at 5.1 GB\" , \"title\" : \"Low disk space alert\" , \"tags\" : [ \"warning\" , \"cd\" ], \"priority\" : 4 , \"attach\" : \"https://filesrv.lan/space.jpg\" , \"filename\" : \"diskspace.jpg\" , \"click\" : \"https://homecamera.lan/xasds1h2xsSsa/\" , \"actions\" : [{ \"action\" : \"view\" , \"label\" : \"Admin panel\" , \"url\" : \"https://filesrv.lan/admin\" }] }) }) // You should probably use json.Marshal() instead and make a proper struct, // or even just use req.Header.Set() like in the other examples, but for the // sake of the example, this is easier. body := `{ \"topic\": \"mytopic\", \"message\": \"Disk space is low at 5.1 GB\", \"title\": \"Low disk space alert\", \"tags\": [\"warning\",\"cd\"], \"priority\": 4, \"attach\": \"https://filesrv.lan/space.jpg\", \"filename\": \"diskspace.jpg\", \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\", \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh\" $body = @{ topic = \"mytopic\" title = \"Low disk space alert\" message = \"Disk space is low at 5.1 GB\" priority = 4 attach = \"https://filesrv.lan/space.jpg\" filename = \"diskspace.jpg\" tags = @( \"warning\" , \"cd\" ) click = \"https://homecamera.lan/xasds1h2xsSsa/\" actions = @( @{ action = \"view\" label = \"Admin panel\" url = \"https://filesrv.lan/admin\" } ) } | ConvertTo-Json Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"mytopic\" , \"message\" : \"Disk space is low at 5.1 GB\" , \"title\" : \"Low disk space alert\" , \"tags\" : [ \"warning\" , \"cd\" ], \"priority\" : 4 , \"attach\" : \"https://filesrv.lan/space.jpg\" , \"filename\" : \"diskspace.jpg\" , \"click\" : \"https://homecamera.lan/xasds1h2xsSsa/\" , \"actions\" : [{ \"action\" : \"view\" , \"label\" : \"Admin panel\" , \"url\" : \"https://filesrv.lan/admin\" }] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"mytopic\" , \"message\" : \"Disk space is low at 5.1 GB\" , \"title\" : \"Low disk space alert\" , \"tags\" : [ \"warning\" , \"cd\" ], \"priority\" : 4 , \"attach\" : \"https://filesrv.lan/space.jpg\" , \"filename\" : \"diskspace.jpg\" , \"click\" : \"https://homecamera.lan/xasds1h2xsSsa/\" , \"actions\" : [[ \"action\" : \"view\" , \"label\" : \"Admin panel\" , \"url\" : \"https://filesrv.lan/admin\" ]] ]) ] ])); The JSON message format closely mirrors the format of the message you can consume when you subscribe via the API (see JSON message format for details), but is not exactly identical. Here's an overview of all the supported fields: Field Required Type Example Description topic \u2714\ufe0f string topic1 Target topic name message - string Some message Message body; set to triggered if empty or not passed title - string Some title Message title tags - string array [\"tag1\",\"tag2\"] List of tags that may or not map to emojis priority - int (one of: 1, 2, 3, 4, or 5) 4 Message priority with 1=min, 3=default and 5=max actions - JSON array (see action buttons ) Custom user action buttons for notifications click - URL https://example.com Website opened when notification is clicked attach - URL https://example.com/file.jpg URL of an attachment, see attach via URL filename - string file.jpg File name of the attachment delay - string 30min , 9am Timestamp or duration for delayed delivery email - e-mail address phil@example.com E-mail address for e-mail notifications","title":"Publish as JSON"},{"location":"publish/#action-buttons","text":"Supported on: You can add action buttons to notifications to allow yourself to react to a notification directly. This is incredibly useful and has countless applications. You can control your home appliances (open/close garage door, change temperature on thermostat, ...), react to common monitoring alerts (clear logs when disk is full, ...), and many other things. The sky is the limit. As of today, the following actions are supported: view : Opens a website or app when the action button is tapped broadcast : Sends an Android broadcast intent when the action button is tapped (only supported on Android) http : Sends HTTP POST/GET/PUT request when the action button is tapped Here's an example of what that a notification with actions can look like: Notification with two user actions","title":"Action buttons"},{"location":"publish/#defining-actions","text":"You can define up to three user actions in your notifications, using either of the following methods: In the X-Actions header , using a simple comma-separated format As a JSON array in the actions key, when publishing as JSON","title":"Defining actions"},{"location":"publish/#using-a-header","text":"To define actions using the X-Actions header (or any of its aliases: Actions , Action ), use the following format: Header format (long) Header format (short) action=<action1>, label=<label1>, paramN=... [; action=<action2>, label=<label2>, ...] <action1>, <label1>, paramN=... [; <action2>, <label2>, ...] Multiple actions are separated by a semicolon ( ; ), and key/value pairs are separated by commas ( , ). Values may be quoted with double quotes ( \" ) or single quotes ( ' ) if the value itself contains commas or semicolons. The action= and label= prefix are optional in all actions, and the url= prefix is optional in the view and http action. The only limitation of this format is that depending on your language/library, UTF-8 characters may not work. If they don't, use the JSON array format instead. As an example, here's how you can create the above notification using this format. Refer to the view action and http action section for details on the specific actions: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP body='{\"temperature\": 65}' curl \\ -d \"You left the house. Turn down the A/C?\" \\ -H \"Actions: view, Open portal, https://home.nest.com/, clear=true; \\ http, Turn down, https://api.nest.com/, body='$body'\" \\ ntfy.sh/myhome body='{\"temperature\": 65}' ntfy publish \\ --actions=\"view, Open portal, https://home.nest.com/, clear=true; \\ http, Turn down, https://api.nest.com/, body='$body'\" \\ myhome \\ \"You left the house. Turn down the A/C?\" POST /myhome HTTP / 1.1 Host : ntfy.sh Actions : view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\"temperature\": 65}' You left the house. Turn down the A/C? fetch ( 'https://ntfy.sh/myhome' , { method : 'POST' , body : 'You left the house. Turn down the A/C?' , headers : { 'Actions' : 'view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body=\\'{\"temperature\": 65}\\'' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/myhome\" , strings . NewReader ( \"You left the house. Turn down the A/C?\" )) req . Header . Set ( \"Actions\" , \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/myhome\" $headers = @{ Actions = \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\" temperature \\ \": 65}'\" } $body = \"You left the house. Turn down the A/C?\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/myhome\" , data = \"You left the house. Turn down the A/C?\" , headers = { \"Actions\" : \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{ \\\" temperature \\\" : 65}'\" }) file_get_contents ( 'https://ntfy.sh/reddit_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Actions: view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{ \\\" temperature \\\" : 65}'\" , 'content' => 'You left the house. Turn down the A/C?' ] ]));","title":"Using a header"},{"location":"publish/#using-a-json-array","text":"Alternatively, the same actions can be defined as JSON array , if the notification is defined as part of the JSON body (see publish as JSON ): Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"myhome\", \"message\": \"You left the house. Turn down the A/C?\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open portal\", \"url\": \"https://home.nest.com/\", \"clear\": true }, { \"action\": \"http\", \"label\": \"Turn down\", \"url\": \"https://api.nest.com/\", \"body\": \"{\\\"temperature\\\": 65}\" } ] }' ntfy publish \\ --actions '[ { \"action\": \"view\", \"label\": \"Open portal\", \"url\": \"https://home.nest.com/\", \"clear\": true }, { \"action\": \"http\", \"label\": \"Turn down\", \"url\": \"https://api.nest.com/\", \"body\": \"{\\\"temperature\\\": 65}\" } ]' \\ myhome \\ \"You left the house. Turn down the A/C?\" POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"myhome\", \"message\": \"You left the house. Turn down the A/C?\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open portal\", \"url\": \"https://home.nest.com/\", \"clear\": true }, { \"action\": \"http\", \"label\": \"Turn down\", \"url\": \"https://api.nest.com/\", \"body\": \"{\\\"temperature\\\": 65}\" } ] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ topic : \"myhome\" , message : \"You left the house. Turn down the A/C?\" , actions : [ { action : \"view\" , label : \"Open portal\" , url : \"https://home.nest.com/\" , clear : true }, { action : \"http\" , label : \"Turn down\" , url : \"https://api.nest.com/\" , body : \"{\\\"temperature\\\": 65}\" } ] }) }) // You should probably use json.Marshal() instead and make a proper struct, // but for the sake of the example, this is easier. body := `{ \"topic\": \"myhome\", \"message\": \"You left the house. Turn down the A/C?\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open portal\", \"url\": \"https://home.nest.com/\", \"clear\": true }, { \"action\": \"http\", \"label\": \"Turn down\", \"url\": \"https://api.nest.com/\", \"body\": \"{\\\"temperature\\\": 65}\" } ] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh\" $body = @{ topic = \"myhome\" message = \"You left the house. Turn down the A/C?\" actions = @( @{ action = \"view\" label = \"Open portal\" url = \"https://home.nest.com/\" clear = $true }, @{ action = \"http\" label = \"Turn down\" url = \"https://api.nest.com/\" body = '{\"temperature\": 65}' } ) } | ConvertTo-Json Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"myhome\" , \"message\" : \"You left the house. Turn down the A/C?\" , \"actions\" : [ { \"action\" : \"view\" , \"label\" : \"Open portal\" , \"url\" : \"https://home.nest.com/\" , \"clear\" : true }, { \"action\" : \"http\" , \"label\" : \"Turn down\" , \"url\" : \"https://api.nest.com/\" , \"body\" : \"{ \\\" temperature \\\" : 65}\" } ] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"myhome\" , \"message\" : \"You left the house. Turn down the A/C?\" , \"actions\" : [ [ \"action\" : \"view\" , \"label\" : \"Open portal\" , \"url\" : \"https://home.nest.com/\" , \"clear\" : true ], [ \"action\" : \"http\" , \"label\" : \"Turn down\" , \"url\" : \"https://api.nest.com/\" , \"headers\" : [ \"Authorization\" : \"Bearer ...\" ], \"body\" : \"{ \\\" temperature \\\" : 65}\" ] ] ]) ] ])); The required/optional fields for each action depend on the type of the action itself. Please refer to view action , broadcasst action , and http action for details.","title":"Using a JSON array"},{"location":"publish/#open-websiteapp","text":"Supported on: The view action opens a website or app when the action button is tapped , e.g. a browser, a Google Maps location, or even a deep link into Twitter or a show ntfy topic. How exactly the action is handled depends on how Android and your desktop browser treat the links. Normally it'll just open a link in the browser. Examples: http:// or https:// will open your browser (or an app if it registered for a URL) mailto: links will open your mail app, e.g. mailto:phil@example.com geo: links will open Google Maps, e.g. geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+CA ntfy:// links will open ntfy (see ntfy:// links ), e.g. ntfy://ntfy.sh/stats twitter:// links will open Twitter, e.g. twitter://user?screen_name=.. ... Here's an example using the X-Actions header : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"Somebody retweeted your tweet.\" \\ -H \"Actions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" \\ ntfy.sh/myhome ntfy publish \\ --actions=\"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" \\ myhome \\ \"Somebody retweeted your tweet.\" POST /myhome HTTP / 1.1 Host : ntfy.sh Actions : view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392 Somebody retweeted your tweet. fetch ( 'https://ntfy.sh/myhome' , { method : 'POST' , body : 'Somebody retweeted your tweet.' , headers : { 'Actions' : 'view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/myhome\" , strings . NewReader ( \"Somebody retweeted your tweet.\" )) req . Header . Set ( \"Actions\" , \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/myhome\" $headers = @{ Actions = \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" } $body = \"Somebody retweeted your tweet.\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/myhome\" , data = \"Somebody retweeted your tweet.\" , headers = { \"Actions\" : \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" }) file_get_contents ( 'https://ntfy.sh/reddit_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Actions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" , 'content' => 'Somebody retweeted your tweet.' ] ])); And the same example using JSON publishing : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"myhome\", \"message\": \"Somebody retweeted your tweet.\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open Twitter\", \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ] }' ntfy publish \\ --actions '[ { \"action\": \"view\", \"label\": \"Open Twitter\", \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ]' \\ myhome \\ \"Somebody retweeted your tweet.\" POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"myhome\", \"message\": \"Somebody retweeted your tweet.\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open Twitter\", \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ topic : \"myhome\" , message \": \" Somebody retweeted your tweet . \", actions: [ { action: \" view \", label: \" Open Twitter \", url: \" https : //twitter.com/binwiederhier/status/1467633927951163392\" } ] }) }) // You should probably use json.Marshal() instead and make a proper struct, // but for the sake of the example, this is easier. body := `{ \"topic\": \"myhome\", \"message\": \"Somebody retweeted your tweet.\", \"actions\": [ { \"action\": \"view\", \"label\": \"Open Twitter\", \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh\" $body = @{ topic = \"myhome\" message = \"Somebody retweeted your tweet.\" actions = @( @{ \"action\" = \"view\" \"label\" = \"Open Twitter\" \"url\" = \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ) } | ConvertTo-Json Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"myhome\" , \"message\" : \"Somebody retweeted your tweet.\" , \"actions\" : [ { \"action\" : \"view\" , \"label\" : \"Open Twitter\" , \"url\" : \"https://twitter.com/binwiederhier/status/1467633927951163392\" } ] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"myhome\" , \"message\" : \"Somebody retweeted your tweet.\" , \"actions\" : [ [ \"action\" : \"view\" , \"label\" : \"Open Twitter\" , \"url\" : \"https://twitter.com/binwiederhier/status/1467633927951163392\" ] ] ]) ] ])); The view action supports the following fields: Field Required Type Default Example Description action \u2714\ufe0f string - view Action type ( must be view ) label \u2714\ufe0f string - Turn on light Label of the action button in the notification url \u2714\ufe0f URL - https://example.com URL to open when action is tapped clear -\ufe0f boolean false true Clear notification after action button is tapped","title":"Open website/app"},{"location":"publish/#send-android-broadcast","text":"Supported on: The broadcast action sends an Android broadcast intent when the action button is tapped . This allows integration into automation apps such as MacroDroid or Tasker , which basically means you can do everything your phone is capable of. Examples include taking pictures, launching/killing apps, change device settings, write/read files, etc. By default, the intent action io.heckel.ntfy.USER_ACTION is broadcast, though this can be changed with the intent parameter (see below). To send extras, use the extras parameter. Currently, only string extras are supported . Info If you have no idea what this is, check out the automation apps section, which shows how to integrate Tasker and MacroDroid with screenshots . The action button integration is identical, except that you have to use the intent action io.heckel.ntfy.USER_ACTION instead. Here's an example using the X-Actions header : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"Your wife requested you send a picture of yourself.\" \\ -H \"Actions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\" \\ ntfy.sh/wifey ntfy publish \\ --actions=\"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" \\ wifey \\ \"Your wife requested you send a picture of yourself.\" POST /wifey HTTP / 1.1 Host : ntfy.sh Actions : broadcast, Take picture, extras.cmd=pic, extras.camera=front Your wife requested you send a picture of yourself. fetch ( 'https://ntfy.sh/wifey' , { method : 'POST' , body : 'Your wife requested you send a picture of yourself.' , headers : { 'Actions' : 'broadcast, Take picture, extras.cmd=pic, extras.camera=front' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/wifey\" , strings . NewReader ( \"Your wife requested you send a picture of yourself.\" )) req . Header . Set ( \"Actions\" , \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/wifey\" $headers = @{ Actions = \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" } $body = \"Your wife requested you send a picture of yourself.\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/wifey\" , data = \"Your wife requested you send a picture of yourself.\" , headers = { \"Actions\" : \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" }) file_get_contents ( 'https://ntfy.sh/wifey' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Actions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\" , 'content' => 'Your wife requested you send a picture of yourself.' ] ])); And the same example using JSON publishing : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"wifey\", \"message\": \"Your wife requested you send a picture of yourself.\", \"actions\": [ { \"action\": \"broadcast\", \"label\": \"Take picture\", \"extras\": { \"cmd\": \"pic\", \"camera\": \"front\" } } ] }' ntfy publish \\ --actions '[ { \"action\": \"broadcast\", \"label\": \"Take picture\", \"extras\": { \"cmd\": \"pic\", \"camera\": \"front\" } } ]' \\ wifey \\ \"Your wife requested you send a picture of yourself.\" POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"wifey\", \"message\": \"Your wife requested you send a picture of yourself.\", \"actions\": [ { \"action\": \"broadcast\", \"label\": \"Take picture\", \"extras\": { \"cmd\": \"pic\", \"camera\": \"front\" } } ] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ topic : \"wifey\" , message \": \" Your wife requested you send a picture of yourself . \", actions: [ { \" action \": \" broadcast \", \" label \": \" Take picture \", \" extras \": { \" cmd \": \" pic \", \" camera \": \" front \" } } ] }) }) // You should probably use json.Marshal() instead and make a proper struct, // but for the sake of the example, this is easier. body := `{ \"topic\": \"wifey\", \"message\": \"Your wife requested you send a picture of yourself.\", \"actions\": [ { \"action\": \"broadcast\", \"label\": \"Take picture\", \"extras\": { \"cmd\": \"pic\", \"camera\": \"front\" } } ] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) # Powershell requires the 'Depth' argument to equal 3 here to expand 'Extras', # otherwise it will read System.Collections.Hashtable in the returned JSON $uri = \"https://ntfy.sh\" $body = @{ topic = \"wifey\" message = \"Your wife requested you send a picture of yourself.\" actions = @( @{ action = \"broadcast\" label = \"Take picture\" extras = @{ cmd = \"pic\" camera = \"front\" } } ) } | ConvertTo-Json -Depth 3 Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"wifey\" , \"message\" : \"Your wife requested you send a picture of yourself.\" , \"actions\" : [ { \"action\" : \"broadcast\" , \"label\" : \"Take picture\" , \"extras\" : { \"cmd\" : \"pic\" , \"camera\" : \"front\" } } ] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"wifey\" , \"message\" : \"Your wife requested you send a picture of yourself.\" , \"actions\" : [ [ \"action\" : \"broadcast\" , \"label\" : \"Take picture\" , \"extras\" : [ \"cmd\" : \"pic\" , \"camera\" : \"front\" ] ] ]) ] ])); The broadcast action supports the following fields: Field Required Type Default Example Description action \u2714\ufe0f string - broadcast Action type ( must be broadcast ) label \u2714\ufe0f string - Turn on light Label of the action button in the notification intent -\ufe0f string io.heckel.ntfy.USER_ACTION com.example.AN_INTENT Android intent name, default is io.heckel.ntfy.USER_ACTION extras -\ufe0f map of strings - see above Android intent extras. Currently, only string extras are supported. When publishing as JSON, extras are passed as a map. When the simple format is used, use extras.<param>=<value> . clear -\ufe0f boolean false true Clear notification after action button is tapped","title":"Send Android broadcast"},{"location":"publish/#send-http-request","text":"Supported on: The http action sends a HTTP request when the action button is tapped . You can use this to trigger REST APIs for whatever systems you have, e.g. opening the garage door, or turning on/off lights. By default, this action sends a POST request (not GET!), though this can be changed with the method parameter. The only required parameter is url . Headers can be passed along using the headers parameter. Here's an example using the X-Actions header : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"Garage door has been open for 15 minutes. Close it?\" \\ -H \"Actions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" \\ ntfy.sh/myhome ntfy publish \\ --actions=\"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" \\ myhome \\ \"Garage door has been open for 15 minutes. Close it?\" POST /myhome HTTP / 1.1 Host : ntfy.sh Actions : http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\"action\": \"close\"} Garage door has been open for 15 minutes. Close it? fetch ( 'https://ntfy.sh/myhome' , { method : 'POST' , body : 'Garage door has been open for 15 minutes. Close it?' , headers : { 'Actions' : 'http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/myhome\" , strings . NewReader ( \"Garage door has been open for 15 minutes. Close it?\" )) req . Header . Set ( \"Actions\" , \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/myhome\" $headers = @{ Actions = \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\" action \\ \": \\\" close \\ \"}\" } $body = \"Garage door has been open for 15 minutes. Close it?\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/myhome\" , data = \"Garage door has been open for 15 minutes. Close it?\" , headers = { \"Actions\" : \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={ \\\" action \\\" : \\\" close \\\" }\" }) file_get_contents ( 'https://ntfy.sh/reddit_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Actions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={ \\\" action \\\" : \\\" close \\\" }\" , 'content' => 'Garage door has been open for 15 minutes. Close it?' ] ])); And the same example using JSON publishing : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl ntfy.sh \\ -d '{ \"topic\": \"myhome\", \"message\": \"Garage door has been open for 15 minutes. Close it?\", \"actions\": [ { \"action\": \"http\", \"label\": \"Close door\", \"url\": \"https://api.mygarage.lan/\", \"method\": \"PUT\", \"headers\": { \"Authorization\": \"Bearer zAzsx1sk..\" }, \"body\": \"{\\\"action\\\": \\\"close\\\"}\" } ] }' ntfy publish \\ --actions '[ { \"action\": \"http\", \"label\": \"Close door\", \"url\": \"https://api.mygarage.lan/\", \"method\": \"PUT\", \"headers\": { \"Authorization\": \"Bearer zAzsx1sk..\" }, \"body\": \"{\\\"action\\\": \\\"close\\\"}\" } ]' \\ myhome \\ \"Garage door has been open for 15 minutes. Close it?\" POST / HTTP / 1.1 Host : ntfy.sh { \"topic\": \"myhome\", \"message\": \"Garage door has been open for 15 minutes. Close it?\", \"actions\": [ { \"action\": \"http\", \"label\": \"Close door\", \"url\": \"https://api.mygarage.lan/\", \"method\": \"PUT\", \"headers\": { \"Authorization\": \"Bearer zAzsx1sk..\" }, \"body\": \"{\\\"action\\\": \\\"close\\\"}\" } ] } fetch ( 'https://ntfy.sh' , { method : 'POST' , body : JSON . stringify ({ topic : \"myhome\" , message \": \" Garage door has been open for 15 minutes . Close it ? \", actions: [ { \" action \": \" http \", \" label \": \" Close door \", \" url \": \" https : //api.mygarage.lan/\", \"method\" : \"PUT\" , \"headers\" : { \"Authorization\" : \"Bearer zAzsx1sk..\" }, \"body\" : \"{\\\"action\\\": \\\"close\\\"}\" } ] }) }) // You should probably use json.Marshal() instead and make a proper struct, // but for the sake of the example, this is easier. body := `{ \"topic\": \"myhome\", \"message\": \"Garage door has been open for 15 minutes. Close it?\", \"actions\": [ { \"action\": \"http\", \"label\": \"Close door\", \"method\": \"PUT\", \"url\": \"https://api.mygarage.lan/\", \"headers\": { \"Authorization\": \"Bearer zAzsx1sk..\" }, \"body\": \"{\\\"action\\\": \\\"close\\\"}\" } ] }` req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/\" , strings . NewReader ( body )) http . DefaultClient . Do ( req ) # Powershell requires the 'Depth' argument to equal 3 here to expand 'headers', # otherwise it will read System.Collections.Hashtable in the returned JSON $uri = \"https://ntfy.sh\" $body = @{ topic = \"myhome\" message = \"Garage door has been open for 15 minutes. Close it?\" actions = @( @{ action = \"http\" label = \"Close door\" url = \"https://api.mygarage.lan/\" method = \"PUT\" headers = @{ Authorization = \"Bearer zAzsx1sk..\" } body = '{\"action\": \"close\"}' } ) } | ConvertTo-Json -Depth 3 Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -ContentType \"application/json\" -UseBasicParsing requests . post ( \"https://ntfy.sh/\" , data = json . dumps ({ \"topic\" : \"myhome\" , \"message\" : \"Garage door has been open for 15 minutes. Close it?\" , \"actions\" : [ { \"action\" : \"http\" , \"label\" : \"Close door\" , \"url\" : \"https://api.mygarage.lan/\" , \"method\" : \"PUT\" , \"headers\" : { \"Authorization\" : \"Bearer zAzsx1sk..\" }, \"body\" : \"{ \\\" action \\\" : \\\" close \\\" }\" } ] }) ) file_get_contents ( 'https://ntfy.sh/' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: application/json\" , 'content' => json_encode ([ \"topic\" : \"myhome\" , \"message\" : \"Garage door has been open for 15 minutes. Close it?\" , \"actions\" : [ [ \"action\" : \"http\" , \"label\" : \"Close door\" , \"url\" : \"https://api.mygarage.lan/\" , \"method\" : \"PUT\" , \"headers\" : [ \"Authorization\" : \"Bearer zAzsx1sk..\" ], \"body\" : \"{ \\\" action \\\" : \\\" close \\\" }\" ] ] ]) ] ])); The http action supports the following fields: Field Required Type Default Example Description action \u2714\ufe0f string - http Action type ( must be http ) label \u2714\ufe0f string - Open garage door Label of the action button in the notification url \u2714\ufe0f string - https://ntfy.sh/mytopic URL to which the HTTP request will be sent method -\ufe0f GET/POST/PUT/... POST \u26a0\ufe0f GET HTTP method to use for request, default is POST \u26a0\ufe0f headers -\ufe0f map of strings - see above HTTP headers to pass in request. When publishing as JSON, headers are passed as a map. When the simple format is used, use headers.<header1>=<value> . body -\ufe0f string empty some body, somebody? HTTP body clear -\ufe0f boolean false true Clear notification after HTTP request succeeds. If the request fails, the notification is not cleared.","title":"Send HTTP request"},{"location":"publish/#click-action","text":"Supported on: You can define which URL to open when a notification is clicked. This may be useful if your notification is related to a Zabbix alert or a transaction that you'd like to provide the deep-link for. Tapping the notification will open the web browser (or the app) and open the website. To define a click action for the notification, pass a URL as the value of the X-Click header (or its aliase Click ). If you pass a website URL ( http:// or https:// ) the web browser will open. If you pass another URI that can be handled by another app, the responsible app may open. Examples: http:// or https:// will open your browser (or an app if it registered for a URL) mailto: links will open your mail app, e.g. mailto:phil@example.com geo: links will open Google Maps, e.g. geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+CA ntfy:// links will open ntfy (see ntfy:// links ), e.g. ntfy://ntfy.sh/stats twitter:// links will open Twitter, e.g. twitter://user?screen_name=.. ... Here's an example that will open Reddit when the notification is clicked: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"New messages on Reddit\" \\ -H \"Click: https://www.reddit.com/message/messages\" \\ ntfy.sh/reddit_alerts ntfy publish \\ --click=\"https://www.reddit.com/message/messages\" \\ reddit_alerts \"New messages on Reddit\" POST /reddit_alerts HTTP / 1.1 Host : ntfy.sh Click : https://www.reddit.com/message/messages New messages on Reddit fetch ( 'https://ntfy.sh/reddit_alerts' , { method : 'POST' , body : 'New messages on Reddit' , headers : { 'Click' : 'https://www.reddit.com/message/messages' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/reddit_alerts\" , strings . NewReader ( \"New messages on Reddit\" )) req . Header . Set ( \"Click\" , \"https://www.reddit.com/message/messages\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/reddit_alerts\" $headers = @{ Click = \"https://www.reddit.com/message/messages\" } $body = \"New messages on Reddit\" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/reddit_alerts\" , data = \"New messages on Reddit\" , headers = { \"Click\" : \"https://www.reddit.com/message/messages\" }) file_get_contents ( 'https://ntfy.sh/reddit_alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Click: https://www.reddit.com/message/messages\" , 'content' => 'New messages on Reddit' ] ]));","title":"Click action"},{"location":"publish/#attachments","text":"Supported on: You can send images and other files to your phone as attachments to a notification. The attachments are then downloaded onto your phone (depending on size and setting automatically), and can be used from the Downloads folder. There are two different ways to send attachments: sending a local file via PUT, e.g. from ~/Flowers/flower.jpg or ringtone.mp3 or by passing an external URL as an attachment, e.g. https://f-droid.org/F-Droid.apk","title":"Attachments"},{"location":"publish/#attach-local-file","text":"To send a file from your computer as an attachment, you can send it as the PUT request body. If a message is greater than the maximum message size (4,096 bytes) or consists of non UTF-8 characters, the ntfy server will automatically detect the mime type and size, and send the message as an attachment file. To send smaller text-only messages or files as attachments, you must pass a filename by passing the X-Filename header or query parameter (or any of its aliases Filename , File or f ). By default, and how ntfy.sh is configured, the max attachment size is 15 MB (with 100 MB total per visitor). Attachments expire after 3 hours , which typically is plenty of time for the user to download it, or for the Android app to auto-download it. Please also check out the other limits below . Here's an example showing how to upload an image: Command line (curl) ntfy CLI HTTP JavaScript Go Python PHP curl \\ -T flower.jpg \\ -H \"Filename: flower.jpg\" \\ ntfy.sh/flowers ntfy publish \\ --file=flower.jpg \\ flowers PUT /flowers HTTP / 1.1 Host : ntfy.sh Filename : flower.jpg Content-Type : 52312 (binary JPEG data) fetch ( 'https://ntfy.sh/flowers' , { method : 'PUT' , body : document . getElementById ( \"file\" ). files [ 0 ], headers : { 'Filename' : 'flower.jpg' } }) file , _ := os . Open ( \"flower.jpg\" ) req , _ := http . NewRequest ( \"PUT\" , \"https://ntfy.sh/flowers\" , file ) req . Header . Set ( \"Filename\" , \"flower.jpg\" ) http . DefaultClient . Do ( req ) requests . put ( \"https://ntfy.sh/flowers\" , data = open ( \"flower.jpg\" , 'rb' ), headers = { \"Filename\" : \"flower.jpg\" }) file_get_contents ( 'https://ntfy.sh/flowers' , false , stream_context_create ([ 'http' => [ 'method' => 'PUT' , 'header' => \"Content-Type: application/octet-stream \\r\\n \" . // Does not matter \"Filename: flower.jpg\" , 'content' => file_get_contents ( 'flower.jpg' ) // Dangerous for large files ] ])); Here's what that looks like on Android: Image attachment sent from a local file","title":"Attach local file"},{"location":"publish/#attach-file-from-a-url","text":"Instead of sending a local file to your phone, you can use an external URL to specify where the attachment is hosted. This could be a Dropbox link, a file from social media, or any other publicly available URL. Since the files are externally hosted, the expiration or size limits from above do not apply here. To attach an external file, simple pass the X-Attach header or query parameter (or any of its aliases Attach or a ) to specify the attachment URL. It can be any type of file. ntfy will automatically try to derive the file name from the URL (e.g https://example.com/flower.jpg will yield a filename flower.jpg ). To override this filename, you may send the X-Filename header or query parameter (or any of its aliases Filename , File or f ). Here's an example showing how to attach an APK file: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -X POST \\ -H \"Attach: https://f-droid.org/F-Droid.apk\" \\ ntfy.sh/mydownloads ntfy publish \\ --attach=\"https://f-droid.org/F-Droid.apk\" \\ mydownloads POST /mydownloads HTTP / 1.1 Host : ntfy.sh Attach : https://f-droid.org/F-Droid.apk fetch ( 'https://ntfy.sh/mydownloads' , { method : 'POST' , headers : { 'Attach' : 'https://f-droid.org/F-Droid.apk' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/mydownloads\" , file ) req . Header . Set ( \"Attach\" , \"https://f-droid.org/F-Droid.apk\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/mydownloads\" $headers = @{ Attach = \"https://f-droid.org/F-Droid.apk\" } Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -UseBasicParsing requests . put ( \"https://ntfy.sh/mydownloads\" , headers = { \"Attach\" : \"https://f-droid.org/F-Droid.apk\" }) file_get_contents ( 'https://ntfy.sh/mydownloads' , false , stream_context_create ([ 'http' => [ 'method' => 'PUT' , 'header' => \"Content-Type: text/plain \\r\\n \" . // Does not matter \"Attach: https://f-droid.org/F-Droid.apk\" , ] ])); File attachment sent from an external URL","title":"Attach file from a URL"},{"location":"publish/#icons","text":"Supported on: You can include an icon that will appear next to the text of the notification. Simply pass the X-Icon header or query parameter (or its alias Icon ) to specify the URL that the icon is located at. The client will automatically download the icon (unless it is already cached locally, and less than 24 hours old), and show it in the notification. Icons are cached locally in the client until the notification is deleted. Only JPEG and PNG images are supported at this time . Here's an example showing how to include an icon: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -H \"Icon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" \\ -H \"Title: Kodi: Resuming Playback\" \\ -H \"Tags: arrow_forward\" \\ -d \"The Wire, S01E01\" \\ ntfy.sh/tvshows ntfy publish \\ --icon=\"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" \\ --title=\"Kodi: Resuming Playback\" \\ --tags=\"arrow_forward\" \\ tvshows \\ \"The Wire, S01E01\" POST /tvshows HTTP / 1.1 Host : ntfy.sh Icon : https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png Tags : arrow_forward Title : Kodi: Resuming Playback The Wire, S01E01 fetch ( 'https://ntfy.sh/tvshows' , { method : 'POST' , headers : { 'Icon' : 'https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png' , 'Title' : 'Kodi: Resuming Playback' , 'Tags' : 'arrow_forward' }, body : \"The Wire, S01E01\" }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/tvshows\" , strings . NewReader ( \"The Wire, S01E01\" )) req . Header . Set ( \"Icon\" , \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" ) req . Header . Set ( \"Tags\" , \"arrow_forward\" ) req . Header . Set ( \"Title\" , \"Kodi: Resuming Playback\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/tvshows\" $headers = @{ Title \"=\" Kodi : Resuming Playback \" Tags=\" arrow_forward \" Icon=\" https :// styles . redditmedia . com / t5_32uhe / styles / communityIcon_xnt6chtnr2j21 . png \" } $body = \" The Wire , S01E01 \" Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/tvshows\" , data = \"The Wire, S01E01\" , headers = { \"Title\" : \"Kodi: Resuming Playback\" , \"Tags\" : \"arrow_forward\" , \"Icon\" : \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" }) file_get_contents ( 'https://ntfy.sh/tvshows' , false , stream_context_create ([ 'http' => [ 'method' => 'PUT' , 'header' => \"Content-Type: text/plain \\r\\n \" . // Does not matter \"Title: Kodi: Resuming Playback \\r\\n \" . \"Tags: arrow_forward \\r\\n \" . \"Icon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" , ], 'content' => \"The Wire, S01E01\" ])); Here's an example of how it will look on Android: Custom icon from an external URL","title":"Icons"},{"location":"publish/#e-mail-notifications","text":"Supported on: You can forward messages to e-mail by specifying an address in the header. This can be useful for messages that you'd like to persist longer, or to blast-notify yourself on all possible channels. Usage is easy: Simply pass the X-Email header (or any of its aliases: X-E-mail , Email , E-mail , Mail , or e ). Only one e-mail address is supported. Since ntfy does not provide auth (yet), the rate limiting is pretty strict (see limitations ). In the default configuration, you get 16 e-mails per visitor (IP address) and then after that one per hour. On top of that, your IP address appears in the e-mail body. This is to prevent abuse. Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -H \"Email: phil@example.com\" \\ -H \"Tags: warning,skull,backup-host,ssh-login\" \\ -H \"Priority: high\" \\ -d \"Unknown login from 5.31.23.83 to backups.example.com\" \\ ntfy.sh/alerts curl -H \"Email: phil@example.com\" -d \"You've Got Mail\" curl -d \"You've Got Mail\" \"ntfy.sh/alerts?email=phil@example.com\" ntfy publish \\ --email=phil@example.com \\ --tags=warning,skull,backup-host,ssh-login \\ --priority=high \\ alerts \"Unknown login from 5.31.23.83 to backups.example.com\" POST /alerts HTTP / 1.1 Host : ntfy.sh Email : phil@example.com Tags : warning,skull,backup-host,ssh-login Priority : high Unknown login from 5.31.23.83 to backups.example.com fetch ( 'https://ntfy.sh/alerts' , { method : 'POST' , body : \"Unknown login from 5.31.23.83 to backups.example.com\" , headers : { 'Email' : 'phil@example.com' , 'Tags' : 'warning,skull,backup-host,ssh-login' , 'Priority' : 'high' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/alerts\" , strings . NewReader ( \"Unknown login from 5.31.23.83 to backups.example.com\" )) req . Header . Set ( \"Email\" , \"phil@example.com\" ) req . Header . Set ( \"Tags\" , \"warning,skull,backup-host,ssh-login\" ) req . Header . Set ( \"Priority\" , \"high\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/alerts\" $headers = @{ Title \"=\" Low disk space alert \" Priority=\" high \" Tags=\" warning , skull , backup-host , ssh-login \") Email=\" phil @example . com \" } $body = \" Unknown login from 5 . 31 . 23 . 83 to backups . example . com \" Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -UseBasicParsing requests . post ( \"https://ntfy.sh/alerts\" , data = \"Unknown login from 5.31.23.83 to backups.example.com\" , headers = { \"Email\" : \"phil@example.com\" , \"Tags\" : \"warning,skull,backup-host,ssh-login\" , \"Priority\" : \"high\" }) file_get_contents ( 'https://ntfy.sh/alerts' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Email: phil@example.com \\r\\n \" . \"Tags: warning,skull,backup-host,ssh-login \\r\\n \" . \"Priority: high\" , 'content' => 'Unknown login from 5.31.23.83 to backups.example.com' ] ])); Here's what that looks like in Google Mail: E-mail notification","title":"E-mail notifications"},{"location":"publish/#e-mail-publishing","text":"Supported on: You can publish messages to a topic via e-mail, i.e. by sending an email to a specific address. For instance, you can publish a message to the topic sometopic by sending an e-mail to ntfy-sometopic@ntfy.sh . This is useful for e-mail based integrations such as for statuspage.io (though these days most services also support webhooks and HTTP calls). Depending on the server configuration , the e-mail address format can have a prefix to prevent spam on topics. For ntfy.sh, the prefix is configured to ntfy- , meaning that the general e-mail address format is: ntfy-$topic@ntfy.sh As of today, e-mail publishing only supports adding a message title (the e-mail subject). Tags, priority, delay and other features are not supported (yet). Here's an example that will publish a message with the title You've Got Mail to topic sometopic (see ntfy.sh/sometopic ): Publishing a message via e-mail","title":"E-mail publishing"},{"location":"publish/#advanced-features","text":"","title":"Advanced features"},{"location":"publish/#authentication","text":"Depending on whether the server is configured to support access control , some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can: Use basic auth , e.g. Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk or use the auth query parameter , e.g. ?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw Warning Base64 only encodes username and password. It is not encrypting it . For your self-hosted server, be sure to use HTTPS to avoid eavesdropping and exposing your password.","title":"Authentication"},{"location":"publish/#basic-auth","text":"Here's an example using Basic auth , with a user testuser and password fakepassword : Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -u testuser:fakepassword \\ -d \"Look ma, with auth\" \\ https://ntfy.example.com/mysecrets ntfy publish \\ -u testuser:fakepassword \\ ntfy.example.com/mysecrets \\ \"Look ma, with auth\" POST /mysecrets HTTP / 1.1 Host : ntfy.example.com Authorization : Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk Look ma, with auth fetch ( 'https://ntfy.example.com/mysecrets' , { method : 'POST' , // PUT works too body : 'Look ma, with auth' , headers : { 'Authorization' : 'Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.example.com/mysecrets\" , strings . NewReader ( \"Look ma, with auth\" )) req . Header . Set ( \"Authorization\" , \"Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.example.com/mysecrets\" $credentials = 'testuser:fakepassword' $encodedCredentials = [convert] :: ToBase64String ( [text.Encoding] :: UTF8 . GetBytes ( $credentials )) $headers = @{ Authorization = \"Basic $encodedCredentials\" } $message = \"Look ma, with auth\" Invoke-RestMethod -Uri $uri -Body $message -Headers $headers -Method \"Post\" -UseBasicParsing requests . post ( \"https://ntfy.example.com/mysecrets\" , data = \"Look ma, with auth\" , headers = { \"Authorization\" : \"Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\" }) file_get_contents ( 'https://ntfy.example.com/mysecrets' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain\\r\\n' . 'Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk' , 'content' => 'Look ma, with auth' ] ])); To generate the Authorization header, use standard base64 to encode the colon-separated <username>:<password> and prepend the word Basic , i.e. Authorization: Basic base64(<username>:<password>) . Here's some pseudo-code that hopefully explains it better: username = \"testuser\" password = \"fakepassword\" authHeader = \"Basic \" + base64(username + \":\" + password) // -> Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk The following command will generate the appropriate value for you on *nix systems: echo \"Basic $(echo -n 'testuser:fakepassword' | base64)\"","title":"Basic auth"},{"location":"publish/#query-param","text":"Here's an example using the auth query parameter: Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl \\ -d \"Look ma, with auth\" \\ \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\" ntfy publish \\ -u testuser:fakepassword \\ ntfy.example.com/mysecrets \\ \"Look ma, with auth\" POST /mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw HTTP / 1.1 Host : ntfy.example.com Look ma, with auth fetch ( 'https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw' , { method : 'POST' , // PUT works too body : 'Look ma, with auth' }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\" , strings . NewReader ( \"Look ma, with auth\" )) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\" $message = \"Look ma, with auth\" Invoke-RestMethod -Uri $uri -Body $message -Method \"Post\" -UseBasicParsing requests . post ( \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\" , data = \"Look ma, with auth\" file_get_contents ( 'https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , // PUT also works 'header' => 'Content-Type: text/plain' , 'content' => 'Look ma, with auth' ] ])); To generate the value of the auth parameter, encode the value of the Authorization header (see anove) using raw base64 encoding (like base64, but strip any trailing = ). Here's some pseudo-code that hopefully explains it better: username = \"testuser\" password = \"fakepassword\" authHeader = \"Basic \" + base64(username + \":\" + password) // -> Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk authParam = base64_raw(authHeader) // -> QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw (no trailing =) // If your language does not have a function to encode raw base64, simply use normal base64 // and REMOVE TRAILING \"=\" characters. The following command will generate the appropriate value for you on *nix systems: echo -n \"Basic `echo -n 'testuser:fakepassword' | base64`\" | base64 | tr -d '='","title":"Query param"},{"location":"publish/#message-caching","text":"Info If Cache: no is used, messages will only be delivered to connected subscribers, and won't be re-delivered if a client re-connects. If a subscriber has (temporary) network issues or is reconnecting momentarily, messages might be missed . By default, the ntfy server caches messages on disk for 12 hours (see message caching ), so all messages you publish are stored server-side for a little while. The reason for this is to overcome temporary client-side network disruptions, but arguably this feature also may raise privacy concerns. To avoid messages being cached server-side entirely, you can set X-Cache header (or its alias: Cache ) to no . This will make sure that your message is not cached on the server, even if server-side caching is enabled. Messages are still delivered to connected subscribers, but since= and poll=1 won't return the message anymore. Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Cache: no\" -d \"This message won't be stored server-side\" ntfy.sh/mytopic curl -H \"Cache: no\" -d \"This message won't be stored server-side\" ntfy.sh/mytopic ntfy publish \\ --no-cache \\ mytopic \"This message won't be stored server-side\" POST /mytopic HTTP / 1.1 Host : ntfy.sh Cache : no This message won't be stored server-side fetch ( 'https://ntfy.sh/mytopic' , { method : 'POST' , body : 'This message won' t be stored server - side ', headers: { ' Cache ': ' no ' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/mytopic\" , strings . NewReader ( \"This message won't be stored server-side\" )) req . Header . Set ( \"Cache\" , \"no\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/mytopic\" $headers = @{ Cache = \"no\" } $body = \"This message won't be stored server-side\" Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -Headers $headers -UseBasicParsing requests . post ( \"https://ntfy.sh/mytopic\" , data = \"This message won't be stored server-side\" , headers = { \"Cache\" : \"no\" }) file_get_contents ( 'https://ntfy.sh/mytopic' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Cache: no\" , 'content' => 'This message won' t be stored server - side ' ] ]));","title":"Message caching"},{"location":"publish/#disable-firebase","text":"Info If Firebase: no is used and instant delivery isn't enabled in the Android app (Google Play variant only), message delivery will be significantly delayed (up to 15 minutes) . To overcome this delay, simply enable instant delivery. The ntfy server can be configured to use Firebase Cloud Messaging (FCM) (see Firebase config ) for message delivery on Android (to minimize the app's battery footprint). The ntfy.sh server is configured this way, meaning that all messages published to ntfy.sh are also published to corresponding FCM topics. If you'd like to avoid forwarding messages to Firebase, you can set the X-Firebase header (or its alias: Firebase ) to no . This will instruct the server not to forward messages to Firebase. Command line (curl) ntfy CLI HTTP JavaScript Go PowerShell Python PHP curl -H \"X-Firebase: no\" -d \"This message won't be forwarded to FCM\" ntfy.sh/mytopic curl -H \"Firebase: no\" -d \"This message won't be forwarded to FCM\" ntfy.sh/mytopic ntfy publish \\ --no-firebase \\ mytopic \"This message won't be forwarded to FCM\" POST /mytopic HTTP / 1.1 Host : ntfy.sh Firebase : no This message won't be forwarded to FCM fetch ( 'https://ntfy.sh/mytopic' , { method : 'POST' , body : 'This message won' t be forwarded to FCM ', headers: { ' Firebase ': ' no ' } }) req , _ := http . NewRequest ( \"POST\" , \"https://ntfy.sh/mytopic\" , strings . NewReader ( \"This message won't be forwarded to FCM\" )) req . Header . Set ( \"Firebase\" , \"no\" ) http . DefaultClient . Do ( req ) $uri = \"https://ntfy.sh/mytopic\" $headers = @{ Firebase = \"no\" } $body = \"This message won't be forwarded to FCM\" Invoke-RestMethod -Method 'Post' -Uri $uri -Body $body -Headers $headers -UseBasicParsing requests . post ( \"https://ntfy.sh/mytopic\" , data = \"This message won't be forwarded to FCM\" , headers = { \"Firebase\" : \"no\" }) file_get_contents ( 'https://ntfy.sh/mytopic' , false , stream_context_create ([ 'http' => [ 'method' => 'POST' , 'header' => \"Content-Type: text/plain \\r\\n \" . \"Firebase: no\" , 'content' => 'This message won' t be stored server - side ' ] ]));","title":"Disable Firebase"},{"location":"publish/#unifiedpush","text":"Info This setting is not relevant to users, only to app developers and people interested in UnifiedPush . UnifiedPush is a standard for receiving push notifications without using the Google-owned Firebase Cloud Messaging (FCM) service. It puts push notifications in the control of the user. ntfy can act as a UnifiedPush distributor , forwarding messages to apps that support it. When publishing messages to a topic, apps using ntfy as a UnifiedPush distributor can set the X-UnifiedPush header or query parameter (or any of its aliases unifiedpush or up ) to 1 to disable Firebase . As of today, this option is mostly equivalent to Firebase: no , but was introduced to allow future flexibility. The flag additionally enables auto-detection of the message encoding. If the message is binary, it'll be encoded as base64.","title":"UnifiedPush"},{"location":"publish/#matrix-gateway","text":"The ntfy server implements a Matrix Push Gateway (in combination with UnifiedPush as the Provider Push Protocol ). This makes it easier to integrate with self-hosted Matrix servers (such as synapse ), since you don't have to set up a separate push proxy (such as common-proxies ). In short, ntfy accepts Matrix messages on the /_matrix/push/v1/notify endpoint (see Push Gateway API ), and forwards them to the ntfy topic defined in the pushkey of the message. The message will then be forwarded to the ntfy Android app, and passed on to the Matrix client there. There is a nice diagram in the Push Gateway docs . In this diagram, the ntfy server plays the role of the Push Gateway, as well as the Push Provider. UnifiedPush is the Provider Push Protocol. Info This is not a generic Matrix Push Gateway. It only works in combination with UnifiedPush and ntfy.","title":"Matrix Gateway"},{"location":"publish/#public-topics","text":"Obviously all topics on ntfy.sh are public, but there are a few designated topics that are used in examples, and topics that you can use to try out what authentication and access control looks like. Topic User Permissions Description announcements * (unauthenticated) Read-only for everyone Release announcements and such stats * (unauthenticated) Read-only for everyone Daily statistics about ntfy.sh usage mytopic-rw testuser (password: testuser ) Read-write for testuser , no access for anyone else Test topic mytopic-ro testuser (password: testuser ) Read-only for testuser , no access for anyone else Test topic mytopic-wo testuser (password: testuser ) Write-only for testuser , no access for anyone else Test topic","title":"Public topics"},{"location":"publish/#limitations","text":"There are a few limitations to the API to prevent abuse and to keep the server healthy. Almost all of these settings are configurable via the server side rate limiting settings . Most of these limits you won't run into, but just in case, let's list them all: Limit Description Message length Each message can be up to 4,096 bytes long. Longer messages are treated as attachments . Requests By default, the server is configured to allow 60 requests per visitor at once, and then refills the your allowed requests bucket at a rate of one request per 5 seconds. E-mails By default, the server is configured to allow sending 16 e-mails per visitor at once, and then refills the your allowed e-mail bucket at a rate of one per hour. Subscription limit By default, the server allows each visitor to keep 30 connections to the server open. Attachment size limit By default, the server allows attachments up to 15 MB in size, up to 100 MB in total per visitor and up to 5 GB across all visitors. Attachment expiry By default, the server deletes attachments after 3 hours and thereby frees up space from the total visitor attachment limit. Attachment bandwidth By default, the server allows 500 MB of GET/PUT/POST traffic for attachments per visitor in a 24 hour period. Traffic exceeding that is rejected. Total number of topics By default, the server is configured to allow 15,000 topics. The ntfy.sh server has higher limits though.","title":"Limitations"},{"location":"publish/#list-of-all-parameters","text":"The following is a list of all parameters that can be passed when publishing a message. Parameter names are case-insensitive , and can be passed as HTTP headers or query parameters in the URL . They are listed in the table in their canonical form. Parameter Aliases (case-insensitive) Description X-Message Message , m Main body of the message as shown in the notification X-Title Title , t Message title X-Priority Priority , prio , p Message priority X-Tags Tags , Tag , ta Tags and emojis X-Delay Delay , X-At , At , X-In , In Timestamp or duration for delayed delivery X-Actions Actions , Action JSON array or short format of user actions X-Click Click URL to open when notification is clicked X-Attach Attach , a URL to send as an attachment , as an alternative to PUT/POST-ing an attachment X-Icon Icon URL to use as notification icon X-Filename Filename , file , f Optional attachment filename, as it appears in the client X-Email X-E-Mail , Email , E-Mail , mail , e E-mail address for e-mail notifications X-Cache Cache Allows disabling message caching X-Firebase Firebase Allows disabling sending to Firebase X-UnifiedPush UnifiedPush , up UnifiedPush publish option, only to be used by UnifiedPush apps X-Poll-ID Poll-ID Internal parameter, used for iOS push notifications Authorization - If supported by the server, you can login to access protected topics","title":"List of all parameters"},{"location":"releases/","text":"Release notes \u00b6 Binaries for all releases can be found on the GitHub releases pages for the ntfy server and the ntfy Android app . ntfy server v1.30.0 (UNRELEASED) \u00b6 Features: Web: Generate random topic name button ( #453 , thanks to @yardenshoham ) Bug fixes + maintenance: Remove --env-topic option from ntfy publish as per deprecation (no ticket) ntfy Android app v1.16.0 \u00b6 Released December 11, 2022 This is a feature and platform/dependency upgrade release. You can now have per-subscription notification settings (including sounds, DND, etc.), and you can make notifications continue ringing until they are dismissed. There's also support for thematic/adaptive launcher icon for Android 13. There are a few more Android 13 specific things, as well as many bug fixes: No more crashes from large images, no more opening the wrong subscription, and we also fixed the icon color issue. Features: Custom per-subscription notification settings incl. sounds, DND, etc. ( #6 , thanks to @doits ) Insistent notifications that ring until dismissed ( #417 , thanks to @danmed for reporting) Add thematic/adaptive launcher icon ( #513 , thanks to @daedric7 for reporting) Bug fixes + maintenance: Upgrade Android dependencies and build toolchain to SDK 33 (no ticket) Simplify F-Droid build: Disable tasks for Google Services ( #516 , thanks to @markosopcic ) Android 13: Ask for permission to post notifications ( #508 ) Android 13: Do not allow swiping away the foreground notification ( #521 , thanks to @alexhorner for reporting) Android 5 (SDK 21): Fix crash on unsubscribing ( #528 , thanks to Roger M.) Remove timestamp when copying message text ( #471 , thanks to @wunter8 ) Fix auto-delete if some icons do not exist anymore ( #506 ) Fix notification icon color ( #480 , thanks to @s-h-a-r-d for reporting) Fix topics do not re-subscribe to Firebase after restoring from backup ( #511 ) Fix crashes from large images ( #474 , thanks to @daedric7 for reporting) Fix notification click opens wrong subscription ( #261 , thanks to @SMAW for reporting) Fix Firebase-only \"link expired\" issue ( #529 ) Remove \"Install .apk\" feature in Google Play variant due to policy change ( #531 ) Add donate button (no ticket) Additional translations: Korean (thanks to @YJSofta0f97461d82447ac ) Portuguese (thanks to @victormagalhaess ) ntfy server v1.29.1 \u00b6 Released November 17, 2022 This is mostly a bugfix release to address the high load on ntfy.sh. There are now two new options that allow synchronous batch-writing of messages to the cache. This avoids database locking, and subsequent pileups of waiting requests. Bug fixes: High-load servers: Allow asynchronous batch-writing of messages to cache via cache-batch-* options ( #498 / #502 ) Sender column in cache.db shows invalid IP ( #503 ) Documentation: GitHub Actions example ( #492 , thanks to @ksurl ) UnifiedPush ACL clarification ( #497 , thanks to @bt90 ) Install instructions for Kustomize ( #463 , thanks to @l-maciej ) Other things: Put ntfy.sh docs on GitHub pages to reduce AWS outbound traffic cost ( #491 ) The ntfy.sh server hardware was upgraded to a bigger box. If you'd like to help out carrying the server cost, sponsorships and donations \ud83d\udcb8 would be very much appreciated ntfy server v1.29.0 \u00b6 Released November 12, 2022 This release adds the ability to add rate limit exemptions for IP ranges instead of just specific IP addresses. It also fixes a few bugs in the web app and the CLI and adds lots of new examples and install instructions. Thanks to some love on HN , we got so many new ntfy users trying out ntfy and joining the chat rooms . Welcome to the ntfy community to all of you! We also got a ton of new sponsors and donations \ud83d\udcb8, which is amazing. I'd like to thank all of you for believing in the project, and for helping me pay the server cost. The HN spike increased the AWS cost quite a bit. Features: Allow IP CIDRs in visitor-request-limit-exempt-hosts ( #423 , thanks to @karmanyaahm ) Bug fixes + maintenance: Subscriptions can now have a display name ( #370 , thanks to @tfheen for reporting) Bump Go version to Go 18.x ( #422 ) Web: Strip trailing slash when subscribing ( #428 , thanks to @raining1123 for reporting, and @wunter8 for fixing) Web: Strip trailing slash after server URL in publish dialog ( #441 , thanks to @wunter8 ) Allow empty passwords in client.yml ( #374 , thanks to @cyqsimon for reporting, and @wunter8 for fixing) ntfy pub will now use default username and password from client.yml ( #431 , thanks to @wunter8 for fixing) Make ntfy sub work with NTFY_USER env variable ( #447 , thanks to SuperSandro2000 ) Web: Disallow GET/HEAD requests with body in actions ( #468 , thanks to @ollien ) Documentation: Updated developer docs, bump nodejs and go version ( #414 , thanks to @YJSoft for reporting) Officially document ?auth=.. query parameter ( #433 , thanks to @wunter8 ) Added Rundeck example ( #427 , thanks to @demogorgonz ) Fix Debian installation instructions ( #237 , thanks to @Joeharrison94 for reporting) Updated example with official Gatus integration (thanks to @TwiN ) Added Kubernetes install instructions ( #452 , thanks to @gmemstr ) Added additional NixOS links for self-hosting ( #462 , thanks to @wamserma ) Added additional more secure nginx config example ( #451 , thanks to SuperSandro2000 ) Minor fixes in the config table ( #470 , thanks to snh ) Fix broken link ( #476 , thanks to @shuuji3 ) Additional translations: Korean (thanks to @YJSofta0f97461d82447ac ) Sponsorships: : Thank you to the amazing folks who decided to sponsor ntfy . Thank you for helping carry the cost of the public server and developer licenses, and more importantly: Thank you for believing in ntfy! You guys rock! A list of all the sponsors can be found in the README . ntfy Android app v1.14.0 \u00b6 Released September 27, 2022 This release adds the ability to set a custom icon to each notification, as well as a display name to subscriptions. We also moved the action buttons in the detail view to a more logical place, fixed a bunch of bugs, and added four more languages. Hurray! Features: Subscriptions can now have a display name ( #313 , thanks to @wunter8 ) Display name for UnifiedPush subscriptions ( #355 , thanks to @wunter8 ) Polling is now done with since=<id> API, which makes deduping easier ( #165 ) Turned JSON stream deprecation banner into \"Use WebSockets\" banner (no ticket) Move action buttons in notification cards ( #236 , thanks to @wunter8 ) Icons can be set for each individual notification ( #126 , thanks to @wunter8 ) Bug fixes: Long-click selecting of notifications doesn't scroll to the top anymore ( #235 , thanks to @wunter8 ) Add attachment and click URL extras to MESSAGE_RECEIVED broadcast ( #329 , thanks to @wunter8 ) Accessibility: Clear/choose service URL button in base URL dropdown now has a label ( #292 , thanks to @mhameed for reporting) Additional translations: Italian (thanks to @Genio2003 ) Dutch (thanks to @SchoNie ) Ukranian (thanks to @v.kopitsa ) Polish (thanks to @Namax0r ) Thank you to @wunter8 for proactively picking up some Android tickets, and fixing them! You rock! ntfy server v1.28.0 \u00b6 Released September 27, 2022 This release primarily adds icon support for the Android app, and adds a display name to subscriptions in the web app. Aside from that, we fixed a few random bugs, most importantly the Priority header bug that allows the use behind Cloudflare. We also added a ton of documentation. Most prominently, an integrations + projects page . As of now, I also have started accepting donations and sponsorships \ud83d\udcb8. I would be very humbled if you consider donating. Features: Subscription display name for the web app ( #348 ) Allow setting socket permissions via --listen-unix-mode ( #356 , thanks to @koro666 ) Icons can be set for each individual notification ( #126 , thanks to @wunter8 ) CLI: Allow default username/password in client.yml ( #372 , thanks to @wunter8 ) Build support for other Unix systems ( #393 , thanks to @la-ninpre ) Bug fixes: ntfy user commands don't work with auth_file but works with auth-file ( #344 , thanks to @Histalek for reporting) Ignore new draft HTTP Priority header ( #351 , thanks to @ksurl for reporting) Delete expired attachments based on mod time instead of DB entry to avoid races (no ticket) Better logging for Matrix push key errors ( #384 , thanks to @christophehenry ) Web: Switched \"Pop\" and \"Pop Swoosh\" sounds ( #352 , thanks to @coma-toast for reporting) Documentation: Added integrations + projects page ( so many integrations, whoa! ) Added example for UptimeRobot Fix some PowerShell publish docs ( #345 , thanks to @noahpeltier ) Clarified Docker install instructions ( #361 , thanks to @barart for reporting) Mismatched quotation marks ( #392 ], thanks to @connorlanigan ) Additional translations: Ukranian (thanks to @v.kopitsa ) Polish (thanks to @Namax0r ) ntfy server v1.27.2 \u00b6 Released June 23, 2022 This release brings two new CLI options to wait for a command to finish, or for a PID to exit. It also adds more detail to trace debug output. Aside from other bugs, it fixes a performance issue that occurred in large installations every minute or so, due to competing stats gathering (personal installations will likely be unaffected by this). Features: Add cache-startup-queries option to allow custom SQLite performance tuning (no ticket) ntfy CLI can now wait for a command or PID before publishing ( #263 , thanks to the original ntfy for the idea) Trace: Log entire HTTP request to simplify debugging (no ticket) Allow setting user password via NTFY_PASSWORD env variable ( #327 , thanks to @Kenix3 ) Bug fixes: Fix slow requests due to excessive locking ( #338 ) Return HTTP 500 for GET /_matrix/push/v1/notify when base-url is not configured (no ticket) Disallow setting upstream-base-url to the same value as base-url ( #334 , thanks to @oester for reporting) Fix since=<id> implementation for multiple topics ( #336 , thanks to @karmanyaahm for reporting) Simple parsing in Actions header now supports settings Android intent= key ( #341 , thanks to @wunter8 ) Deprecations: The ntfy publish --env-topic option is deprecated as of now (see deprecations for details) ntfy server v1.26.0 \u00b6 Released June 16, 2022 This release adds a Matrix Push Gateway directly into ntfy, to make self-hosting a Matrix server easier. The Windows CLI is now available via Scoop, and ntfy is now natively supported in Uptime Kuma. Features: ntfy now is a Matrix Push Gateway (in combination with UnifiedPush as the Provider Push Protocol , #319 / #326 , thanks to @MayeulC for reporting) Windows CLI is now available via Scoop ( ScoopInstaller#3594 , #311 , #269 , thanks to @kzshantonu ) Uptime Kuma now allows publishing to ntfy ( uptime-kuma#1674 , thanks to @philippdormann ) Display ntfy version in ntfy serve command ( #314 , thanks to @poblabs ) Bug fixes: Web app: Show \"notifications not supported\" alert on HTTP ( #323 , thanks to @milksteakjellybeans for reporting) Use last address in X-Forwarded-For header as visitor address ( #328 ) Documentation Added example for Uptime Kuma integration ( #315 , thanks to @philippdormann ) Fix Docker install instructions ( #320 , thanks to @milksteakjellybeans for reporting) Add clarifying comments to base-url ( #322 , thanks to @milksteakjellybeans for reporting) Update FAQ for iOS app ( #321 , thanks to @milksteakjellybeans for reporting) ntfy iOS app v1.2 \u00b6 Released June 16, 2022 This release adds support for authentication/authorization for self-hosted servers. It also allows you to set your server as the default server for new topics. Features: Support for auth and user management ( #277 ) Ability to add default server ( #295 ) Bug fixes: Add validation for selfhosted server URL ( #290 ) ntfy server v1.25.2 \u00b6 Released June 2, 2022 This release adds the ability to set a log level to facilitate easier debugging of live systems. It also solves a production problem with a few over-users that resulted in Firebase quota problems (only applying to the over-users). We now block visitors from using Firebase if they trigger a quota exceeded response. On top of that, we updated the Firebase SDK and are now building the release in GitHub Actions. We've also got two more translations: Chinese/Simplified and Dutch. Features: Advanced logging, with different log levels and hot reloading of the log level ( #284 ) Bugs : Respect Firebase \"quota exceeded\" response for topics, block Firebase publishing for user for 10min ( #289 ) Fix documentation header blue header due to mkdocs-material theme update (no ticket) Maintenance: Upgrade Firebase Admin SDK to 4.x ( #274 ) CI: Build from pipeline instead of locally ( #36 ) Documentation : \u26a0\ufe0f Privacy policy updated to reflect additional debug/tracing feature (no ticket) Examples for Home Assistant ( #282 , thanks to @poblabs ) Install instructions for NixOS/Nix ( #282 , thanks to @arjan-s ) Clarify poll_request wording for iOS push notifications ( #300 , thanks to @prabirshrestha for reporting) Example for using ntfy with docker-compose.yml without root privileges ( #304 , thanks to @ksurl ) Additional translations: Chinese/Simplified (thanks to @yufei.im ) Dutch (thanks to @SchoNie ) ntfy iOS app v1.1 \u00b6 Released May 31, 2022 In this release of the iOS app, we add message priorities (mapped to iOS interruption levels), tags and emojis, action buttons to open websites or perform HTTP requests (in the notification and the detail view), a custom click action when the notification is tapped, and various other fixes. It also adds support for self-hosted servers (albeit not supporting auth yet). The self-hosted server needs to be configured to forward poll requests to upstream ntfy.sh for push notifications to work (see iOS push notifications for details). Features: Message priority support (no ticket) Tags/emojis support (no ticket) Action buttons support (no ticket) Click action support (no ticket) Open topic when notification clicked (no ticket) Notification now makes a sound and vibrates (no ticket) Cancel notifications when navigating to topic (no ticket) iOS 14.0 support (no ticket, PR#1 , thanks to @callum-99 ) Bug fixes: iOS UI not always updating properly ( #267 ) ntfy server v1.24.0 \u00b6 Released May 28, 2022 This release of the ntfy server brings supporting features for the ntfy iOS app. Most importantly, it enables support for self-hosted servers in combination with the iOS app. This is to overcome the restrictive Apple development environment. Features: Regularly send Firebase keepalive messages to ~poll topic to support self-hosted servers (no ticket) Add subscribe filter to query exact messages by ID (no ticket) Support for poll_request messages to support iOS push notifications for self-hosted servers (no ticket) Bug fixes: Support emails without Content-Type ( #265 , thanks to @dmbonsall ) Additional translations: Italian (thanks to @Genio2003 ) ntfy iOS app v1.0 \u00b6 Released May 25, 2022 This is the first version of the ntfy iOS app. It supports only ntfy.sh (no selfhosted servers) and only messages + title (no priority, tags, attachments, ...). I'll rapidly add (hopefully) most of the other ntfy features, and then I'll focus on self-hosted servers. The app is now available in the App Store . Tickets: iOS app ( #4 , see also: TestFlight summary ) Thanks: Thank you to all the testers who tried out the app. You guys gave me the confidence that it's ready to release (albeit with some known issues which will be addressed in follow-up releases). ntfy server v1.23.0 \u00b6 Released May 21, 2022 This release ships a CLI for Windows and macOS, as well as the ability to disable the web app entirely. On top of that, it adds support for APNs, the iOS messaging service. This is needed for the (soon to be released) iOS app. Features: Windows and macOS builds for the ntfy CLI ( #112 ) Ability to disable the web app entirely ( #238 / #249 , thanks to @Curid ) Add APNs config to Firebase messages to support iOS app ( #247 , thanks to @Copephobia ) Bug fixes: Support underscores in server.yml config options ( #255 , thanks to @ajdelgado ) Force MAKEFLAGS to --jobs=1 in Makefile ( #257 , thanks to @oddlama ) Documentation: Typo in install instructions ( #252 / #251 , thanks to @oddlama ) Fix typo in private server example ( #262 , thanks to @MayeulC ) Examples for jellyseerr / overseerr ( #264 , thanks to @Fallenbagel ) Additional translations: Portuguese/Brazil (thanks to @tiagotriques and @pireshenrique22 ) Thank you to the many translators, who helped translate the new strings so quickly. I am humbled and amazed by your help. ntfy Android app v1.13.0 \u00b6 Released May 11, 2022 This release brings a slightly altered design for the detail view, featuring a card layout to make notifications more easily distinguishable from one another. It also ships per-topic settings that allow overriding minimum priority, auto delete threshold and custom icons. Aside from that, we've got tons of bug fixes as usual. Features: Per-subscription settings, custom subscription icons ( #155 , thanks to @mztiq for reporting) Cards in notification detail view ( #175 , thanks to @cmeis for reporting) Bug fixes: Accurate naming of \"mute notifications\" from \"pause notifications\" ( #224 , thanks to @shadow00 for reporting) Make messages with links selectable ( #226 , thanks to @StoyanDimitrov for reporting) Restoring topics or settings from backup doesn't work ( #223 , thanks to @shadow00 for reporting) Fix app icon on old Android versions ( #128 , thanks to @shadow00 for reporting) Fix races in UnifiedPush registration ( #230 , thanks to @Jakob for reporting) Prevent view action from crashing the app ( #233 ) Prevent long topic names and icons from overlapping ( #240 , thanks to @cmeis for reporting) Additional translations: Dutch ( incomplete , thanks to @diony ) Thank you: Thanks to @cmeis , @StoyanDimitrov , @Fallenbagel for testing, and to @Joeharrison94 for the input. And thank you very much to all the translators for catching up so quickly. ntfy server v1.22.0 \u00b6 Released May 7, 2022 This release makes the web app more accessible to people with disabilities, and introduces a \"mark as read\" icon in the web app. It also fixes a curious bug with WebSockets and Apache and makes the notification sounds in the web app a little quieter. We've also improved the documentation a little and added translations for three more languages. Features: Make web app more accessible ( #217 ) Better parsing of the user actions, allowing quotes (no ticket) Add \"mark as read\" icon button to notification ( #243 , thanks to @wunter8 ) Bug fixes: Upgrade header check is now case in-sensitive ( #228 , thanks to @wunter8 for finding it) Made web app sounds quieter ( #222 ) Add \"private browsing\"-specific error message for Firefox/Safari ( #208 , thanks to @julianfoad for reporting) Documentation: Improved caddy configuration (no ticket, thanks to @Stnby) Additional multi-line examples on the publish page ( #234 , thanks to @aTable ) Fixed PowerShell auth example to use UTF-8 ( #242 , thanks to @SMAW ) Additional translations: Czech (thanks to @waclaw66 ) French (thanks to @nathanaelhoun ) Hungarian (thanks to @agocsdaniel ) Thanks for testing: Thanks to @wunter8 for testing. ntfy Android app v1.12.0 \u00b6 Released Apr 25, 2022 The main feature in this Android release is Action Buttons , a feature that allows users to add actions to the notifications. Actions can be to view a website or app, send a broadcast, or send a HTTP request. We also added support for ntfy:// deep links , added three more languages and fixed a ton of bugs. Features: Custom notification action buttons ( #134 , thanks to @mrherman for reporting) Support for ntfy:// deep links ( #20 , thanks to @Copephobia for reporting) Fastlane metadata can now be translated too ( #198 , thanks to @StoyanDimitrov for reporting) Channel settings option to configure DND override, sounds, etc. ( #91 ) Bug fixes: Validate URLs when changing default server and server in user management ( #193 , thanks to @StoyanDimitrov for reporting) Error in sending test notification in different languages ( #209 , thanks to @StoyanDimitrov for reporting) \"[x] Instant delivery in doze mode\" checkbox does not work properly ( #211 ) Disallow \"http\" GET/HEAD actions with body ( #221 , thanks to @cmeis for reporting) Action \"view\" with \"clear=true\" does not work on some phones ( #220 , thanks to @cmeis for reporting) Do not group foreground service notification with others ( #219 , thanks to @s-h-a-r-d for reporting) Additional translations: Czech (thanks to @waclaw66 ) French (thanks to @nathanaelhoun ) Japanese (thanks to @shak ) Russian (thanks to @flamey and @ilya.mikheev.coder ) Thanks for testing: Thanks to @s-h-a-r-d (aka @Shard), @cmeis , @poblabs, and everyone I forgot for testing. ntfy server v1.21.2 \u00b6 Released Apr 24, 2022 In this release, the web app got translation support and was translated into 9 languages already \ud83c\udde7\ud83c\uddec \ud83c\udde9\ud83c\uddea \ud83c\uddfa\ud83c\uddf8 \ud83c\udf0e. It also re-adds support for ARMv6, and adds server-side support for Action Buttons. Action Buttons is a feature that will be released in the Android app soon. It allows users to add actions to the notifications. Limited support is available in the web app. Features: Custom notification action buttons ( #134 , thanks to @mrherman for reporting) Added ARMv6 build ( #200 , thanks to @jcrubioa for reporting) Web app internationalization support \ud83c\udde7\ud83c\uddec \ud83c\udde9\ud83c\uddea \ud83c\uddfa\ud83c\uddf8 \ud83c\udf0e ( #189 ) Bug fixes: Web app: English language strings fixes, additional descriptions for settings ( #203 , thanks to @StoyanDimitrov ) Web app: Show error message snackbar when sending test notification fails ( #205 , thanks to @cmeis ) Web app: basic URL validation in user management ( #204 , thanks to @cmeis ) Disallow \"http\" GET/HEAD actions with body ( #221 , thanks to @cmeis for reporting) Translations (web app): Bulgarian (thanks to @StoyanDimitrov ) German (thanks to @cmeis ) Indonesian (thanks to @linerly ) Japanese (thanks to @shak ) Norwegian Bokm\u00e5l (thanks to @comradekingu ) Russian (thanks to @flamey and @ilya.mikheev.coder ) Spanish (thanks to @rogeliodh ) Turkish (thanks to @ersen ) Integrations: Apprise support was fully released in v0.9.8.2 of Apprise. Thanks to @particledecay and @caronc for their fantastic work. You can try it yourself like this (detailed usage in the Apprise wiki ): pip3 install apprise apprise -b \"Hi there\" ntfys://mytopic ntfy Android app v1.11.0 \u00b6 Released Apr 7, 2022 Features: Download attachments to cache folder ( #181 ) Regularly delete attachments for deleted notifications ( #142 ) Translations to different languages ( #188 , thanks to @StoyanDimitrov for initiating things) Bug fixes: IllegalStateException: Failed to build unique file ( #177 , thanks to @Fallenbagel for reporting) SQLiteConstraintException: Crash during UP registration ( #185 ) Refresh preferences screen after settings import (#183, thanks to @cmeis for reporting) Add priority strings to strings.xml to make it translatable (#192, thanks to @StoyanDimitrov ) Translations: English language improvements (thanks to @comradekingu ) Bulgarian (thanks to @StoyanDimitrov ) Chinese/Simplified (thanks to @poi and @PeterCxy ) Dutch ( incomplete , thanks to @diony ) French (thanks to @Kusoneko and @mlcsthor ) German (thanks to @cmeis ) Italian (thanks to @theTranslator ) Indonesian (thanks to @linerly ) Norwegian Bokm\u00e5l ( incomplete , thanks to @comradekingu ) Portuguese/Brazil (thanks to @LW ) Spanish (thanks to @rogeliodh ) Turkish (thanks to @ersen ) Thanks: Many thanks to @cmeis , @Fallenbagel , @Joeharrison94 , and @rogeliodh for input on the new attachment logic, and for testing the release ntfy server v1.20.0 \u00b6 Released Apr 6, 2022 Features: : Added message bar and publish dialog ( #196 ) Bug fixes: Added EXPOSE 80/tcp to Dockerfile to support auto-discovery in Traefik ( #195 , thanks to @s-h-a-r-d ) Documentation: Added docker-compose example to install instructions ( #194 , thanks to @s-h-a-r-d ) Integrations: Apprise has added integration into ntfy ( #99 , apprise#524 , thanks to @particledecay and @caronc for their fantastic work) ntfy server v1.19.0 \u00b6 Released Mar 30, 2022 Bug fixes: Do not pack binary with upx for armv7/arm64 due to illegal instruction errors ( #191 , thanks to @iexos ) Do not allow comma in topic name in publish via GET endpoint (no ticket) Add \"Access-Control-Allow-Origin: *\" for attachments (no ticket, thanks to @FrameXX) Make pruning run again in web app ( #186 ) Added missing params delay and email to publish as JSON body (no ticket) Documentation: Improved e-mail publishing documentation ntfy server v1.18.1 \u00b6 Released Mar 21, 2022 This release ships no features or bug fixes. It's merely a documentation update. Documentation: Overhaul of developer documentation PowerShell examples for publish documentation ( #138 , thanks to @Joeharrison94 ) Additional examples for NodeRED, Gatus, Sonarr, Radarr, ... (thanks to @nickexyz ) Fixes in developer instructions (thanks to @Fallenbagel for reporting) ntfy Android app v1.10.0 \u00b6 Released Mar 21, 2022 Features: Support for UnifiedPush 2.0 specification (bytes messages, #130 ) Export/import settings and subscriptions ( #115 , thanks @cmeis for reporting) Open \"Click\" link when tapping notification ( #110 , thanks @cmeis for reporting) JSON stream deprecation banner ( #164 ) Bug fixes: Display locale-specific times, with AM/PM or 24h format ( #140 , thanks @hl2guide for reporting) ntfy server v1.18.0 \u00b6 Released Mar 16, 2022 Features: Publish messages as JSON ( #133 , thanks @cmeis for reporting, thanks to @Joeharrison94 and @Fallenbagel for testing) Bug fixes: rpm: do not overwrite server.yaml on package upgrade ( #166 , thanks @waclaw66 for reporting) Typo in ntfy.sh/announcements topic ( #170 , thanks to @sandebert ) Readme image URL fixes ( #156 , thanks to @ChaseCares ) Deprecations: Removed the ability to run server as ntfy (as opposed to ntfy serve ) as per deprecation ntfy server v1.17.1 \u00b6 Released Mar 12, 2022 Bug fixes: Replace crypto.subtle with hashCode to errors with Brave/FF-Windows (#157, thanks for reporting @arminus) ntfy server v1.17.0 \u00b6 Released Mar 11, 2022 Features & bug fixes: Replace web app with a React/MUI-based web app from the 21st century (#111) Web UI broken with auth (#132, thanks for reporting @arminus) Send static web resources as Content-Encoding: gzip , i.e. docs and web app (no ticket) Add support for auth via ?auth=... query param, used by WebSocket in web app (no ticket) ntfy server v1.16.0 \u00b6 Released Feb 27, 2022 Features & Bug fixes: Add auth support for subscribing with CLI (#147/#148, thanks @lrabane) Add support for ?since= (#151, thanks for reporting @nachotp) Documentation: Add watchtower/shoutrr examples (#150, thanks @rogeliodh) Add release notes Technical notes: As of this release, message IDs will be 12 characters long (as opposed to 10 characters). This is to be able to distinguish them from Unix timestamps for #151. ntfy Android app v1.9.1 \u00b6 Released Feb 16, 2022 Features: Share to topic feature (#131, thanks u/emptymatrix for reporting) Ability to pick a default server (#127, thanks to @poblabs for reporting and testing) Automatically delete notifications (#71, thanks @arjan-s for reporting) Dark theme: Improvements around style and contrast (#119, thanks @kzshantonu for reporting) Bug fixes: Do not attempt to download attachments if they are already expired (#135) Fixed crash in AddFragment as seen per stack trace in Play Console (no ticket) Other thanks: Thanks to @rogeliodh, @cmeis and @poblabs for testing ntfy server v1.15.0 \u00b6 Released Feb 14, 2022 Features & bug fixes: Compress binaries with upx (#137) Add visitor-request-limit-exempt-hosts to exempt friendly hosts from rate limits (#144) Double default requests per second limit from 1 per 10s to 1 per 5s (no ticket) Convert \\n to new line for X-Message header as prep for sharing feature (see #136) Reduce bcrypt cost to 10 to make auth timing more reasonable on slow servers (no ticket) Docs update to include public test topics (no ticket) ntfy server v1.14.1 \u00b6 Released Feb 9, 2022 Bug fixes: Fix ARMv8 Docker build (#113, thanks to @djmaze) No other significant changes ntfy Android app v1.8.1 \u00b6 Released Feb 6, 2022 Features: Support auth / access control (#19, thanks to @cmeis, @drsprite/@poblabs, @gedw99, @karmanyaahm, @Mek101, @gc-ss, @julianfoad, @nmoseman, Jakob, PeterCxy, Techlosopher) Export/upload log now allows censored/uncensored logs (no ticket) Removed wake lock (except for notification dispatching, no ticket) Swipe to remove notifications (#117) Bug fixes: Fix download issues on SDK 29 \"Movement not allowed\" (#116, thanks Jakob) Fix for Android 12 crashes (#124, thanks @eskilop) Fix WebSocket retry logic bug with multiple servers (no ticket) Fix race in refresh logic leading to duplicate connections (no ticket) Fix scrolling issue in subscribe to topic dialog (#131, thanks @arminus) Fix base URL text field color in dark mode, and size with large fonts (no ticket) Fix action bar color in dark mode (make black, no ticket) Notes: Foundational work for per-subscription settings ntfy server v1.14.0 \u00b6 Released Feb 3, 2022 Features : Server-side for authentication & authorization (#19, thanks for testing @cmeis, and for input from @gedw99, @karmanyaahm, @Mek101, @gc-ss, @julianfoad, @nmoseman, Jakob, PeterCxy, Techlosopher) Support NTFY_TOPIC env variable in ntfy publish (#103) Bug fixes : Binary UnifiedPush messages should not be converted to attachments (part 1, #101) Docs : Clarification regarding attachments (#118, thanks @xnumad) ntfy Android app v1.7.1 \u00b6 Released Jan 21, 2022 New features: Battery improvements: wakelock disabled by default (#76) Dark mode: Allow changing app appearance (#102) Report logs: Copy/export logs to help troubleshooting (#94) WebSockets (experimental): Use WebSockets to subscribe to topics (#96, #100, #97) Show battery optimization banner (#105) Bug fixes: (Partial) support for binary UnifiedPush messages (#101) Notes: The foreground wakelock is now disabled by default The service restarter is now scheduled every 3h instead of every 6h ntfy server v1.13.0 \u00b6 Released Jan 16, 2022 Features: Websockets endpoint Listen on Unix socket, see config option listen-unix ntfy Android app v1.6.0 \u00b6 Released Jan 14, 2022 New features: Attachments: Send files to the phone (#25, #15) Click action: Add a click action URL to notifications (#85) Battery optimization: Allow disabling persistent wake-lock (#76, thanks @MatMaul) Recognize imported user CA certificate for self-hosted servers (#87, thanks @keith24) Remove mentions of \"instant delivery\" from F-Droid to make it less confusing (no ticket) Bug fixes: Subscription \"muted until\" was not always respected (#90) Fix two stack traces reported by Play console vitals (no ticket) Truncate FCM messages >4,000 bytes, prefer instant messages (#84) ntfy server v1.12.1 \u00b6 Released Jan 14, 2022 Bug fixes: Fix security issue with attachment peaking (#93) ntfy server v1.12.0 \u00b6 Released Jan 13, 2022 Features: Attachments (#25, #15) Click action (#85) Increase FCM priority for high/max priority messages (#70) Bug fixes: Make postinst script work properly for rpm-based systems (#83, thanks @cmeis) Truncate FCM messages longer than 4000 bytes (#84) Fix listen-https port (no ticket) ntfy Android app v1.5.2 \u00b6 Released Jan 3, 2022 New features: Allow using ntfy as UnifiedPush distributor (#9) Support for longer message up to 4096 bytes (#77) Minimum priority: show notifications only if priority X or higher (#79) Allowing disabling broadcasts in global settings (#80) Bug fixes: Allow int/long extras for SEND_MESSAGE intent (#57) Various battery improvement fixes (#76) ntfy server v1.11.2 \u00b6 Released Jan 1, 2022 Features & bug fixes: Increase message limit to 4096 bytes (4k) #77 Docs for UnifiedPush #9 Increase keepalive interval to 55s #76 Increase Firebase keepalive to 3 hours #76 ntfy server v1.10.0 \u00b6 Released Dec 28, 2021 Features & bug fixes: Publish messages via e-mail #66 Server-side work to support unifiedpush.org #64 Fixing the Santa bug #65 Older releases \u00b6 For older releases, check out the GitHub releases pages for the ntfy server and the ntfy Android app .","title":"Release notes"},{"location":"releases/#release-notes","text":"Binaries for all releases can be found on the GitHub releases pages for the ntfy server and the ntfy Android app .","title":"Release notes"},{"location":"releases/#ntfy-server-v1300-unreleased","text":"Features: Web: Generate random topic name button ( #453 , thanks to @yardenshoham ) Bug fixes + maintenance: Remove --env-topic option from ntfy publish as per deprecation (no ticket)","title":"ntfy server v1.30.0 (UNRELEASED)"},{"location":"releases/#ntfy-android-app-v1160","text":"Released December 11, 2022 This is a feature and platform/dependency upgrade release. You can now have per-subscription notification settings (including sounds, DND, etc.), and you can make notifications continue ringing until they are dismissed. There's also support for thematic/adaptive launcher icon for Android 13. There are a few more Android 13 specific things, as well as many bug fixes: No more crashes from large images, no more opening the wrong subscription, and we also fixed the icon color issue. Features: Custom per-subscription notification settings incl. sounds, DND, etc. ( #6 , thanks to @doits ) Insistent notifications that ring until dismissed ( #417 , thanks to @danmed for reporting) Add thematic/adaptive launcher icon ( #513 , thanks to @daedric7 for reporting) Bug fixes + maintenance: Upgrade Android dependencies and build toolchain to SDK 33 (no ticket) Simplify F-Droid build: Disable tasks for Google Services ( #516 , thanks to @markosopcic ) Android 13: Ask for permission to post notifications ( #508 ) Android 13: Do not allow swiping away the foreground notification ( #521 , thanks to @alexhorner for reporting) Android 5 (SDK 21): Fix crash on unsubscribing ( #528 , thanks to Roger M.) Remove timestamp when copying message text ( #471 , thanks to @wunter8 ) Fix auto-delete if some icons do not exist anymore ( #506 ) Fix notification icon color ( #480 , thanks to @s-h-a-r-d for reporting) Fix topics do not re-subscribe to Firebase after restoring from backup ( #511 ) Fix crashes from large images ( #474 , thanks to @daedric7 for reporting) Fix notification click opens wrong subscription ( #261 , thanks to @SMAW for reporting) Fix Firebase-only \"link expired\" issue ( #529 ) Remove \"Install .apk\" feature in Google Play variant due to policy change ( #531 ) Add donate button (no ticket) Additional translations: Korean (thanks to @YJSofta0f97461d82447ac ) Portuguese (thanks to @victormagalhaess )","title":"ntfy Android app v1.16.0"},{"location":"releases/#ntfy-server-v1291","text":"Released November 17, 2022 This is mostly a bugfix release to address the high load on ntfy.sh. There are now two new options that allow synchronous batch-writing of messages to the cache. This avoids database locking, and subsequent pileups of waiting requests. Bug fixes: High-load servers: Allow asynchronous batch-writing of messages to cache via cache-batch-* options ( #498 / #502 ) Sender column in cache.db shows invalid IP ( #503 ) Documentation: GitHub Actions example ( #492 , thanks to @ksurl ) UnifiedPush ACL clarification ( #497 , thanks to @bt90 ) Install instructions for Kustomize ( #463 , thanks to @l-maciej ) Other things: Put ntfy.sh docs on GitHub pages to reduce AWS outbound traffic cost ( #491 ) The ntfy.sh server hardware was upgraded to a bigger box. If you'd like to help out carrying the server cost, sponsorships and donations \ud83d\udcb8 would be very much appreciated","title":"ntfy server v1.29.1"},{"location":"releases/#ntfy-server-v1290","text":"Released November 12, 2022 This release adds the ability to add rate limit exemptions for IP ranges instead of just specific IP addresses. It also fixes a few bugs in the web app and the CLI and adds lots of new examples and install instructions. Thanks to some love on HN , we got so many new ntfy users trying out ntfy and joining the chat rooms . Welcome to the ntfy community to all of you! We also got a ton of new sponsors and donations \ud83d\udcb8, which is amazing. I'd like to thank all of you for believing in the project, and for helping me pay the server cost. The HN spike increased the AWS cost quite a bit. Features: Allow IP CIDRs in visitor-request-limit-exempt-hosts ( #423 , thanks to @karmanyaahm ) Bug fixes + maintenance: Subscriptions can now have a display name ( #370 , thanks to @tfheen for reporting) Bump Go version to Go 18.x ( #422 ) Web: Strip trailing slash when subscribing ( #428 , thanks to @raining1123 for reporting, and @wunter8 for fixing) Web: Strip trailing slash after server URL in publish dialog ( #441 , thanks to @wunter8 ) Allow empty passwords in client.yml ( #374 , thanks to @cyqsimon for reporting, and @wunter8 for fixing) ntfy pub will now use default username and password from client.yml ( #431 , thanks to @wunter8 for fixing) Make ntfy sub work with NTFY_USER env variable ( #447 , thanks to SuperSandro2000 ) Web: Disallow GET/HEAD requests with body in actions ( #468 , thanks to @ollien ) Documentation: Updated developer docs, bump nodejs and go version ( #414 , thanks to @YJSoft for reporting) Officially document ?auth=.. query parameter ( #433 , thanks to @wunter8 ) Added Rundeck example ( #427 , thanks to @demogorgonz ) Fix Debian installation instructions ( #237 , thanks to @Joeharrison94 for reporting) Updated example with official Gatus integration (thanks to @TwiN ) Added Kubernetes install instructions ( #452 , thanks to @gmemstr ) Added additional NixOS links for self-hosting ( #462 , thanks to @wamserma ) Added additional more secure nginx config example ( #451 , thanks to SuperSandro2000 ) Minor fixes in the config table ( #470 , thanks to snh ) Fix broken link ( #476 , thanks to @shuuji3 ) Additional translations: Korean (thanks to @YJSofta0f97461d82447ac ) Sponsorships: : Thank you to the amazing folks who decided to sponsor ntfy . Thank you for helping carry the cost of the public server and developer licenses, and more importantly: Thank you for believing in ntfy! You guys rock! A list of all the sponsors can be found in the README .","title":"ntfy server v1.29.0"},{"location":"releases/#ntfy-android-app-v1140","text":"Released September 27, 2022 This release adds the ability to set a custom icon to each notification, as well as a display name to subscriptions. We also moved the action buttons in the detail view to a more logical place, fixed a bunch of bugs, and added four more languages. Hurray! Features: Subscriptions can now have a display name ( #313 , thanks to @wunter8 ) Display name for UnifiedPush subscriptions ( #355 , thanks to @wunter8 ) Polling is now done with since=<id> API, which makes deduping easier ( #165 ) Turned JSON stream deprecation banner into \"Use WebSockets\" banner (no ticket) Move action buttons in notification cards ( #236 , thanks to @wunter8 ) Icons can be set for each individual notification ( #126 , thanks to @wunter8 ) Bug fixes: Long-click selecting of notifications doesn't scroll to the top anymore ( #235 , thanks to @wunter8 ) Add attachment and click URL extras to MESSAGE_RECEIVED broadcast ( #329 , thanks to @wunter8 ) Accessibility: Clear/choose service URL button in base URL dropdown now has a label ( #292 , thanks to @mhameed for reporting) Additional translations: Italian (thanks to @Genio2003 ) Dutch (thanks to @SchoNie ) Ukranian (thanks to @v.kopitsa ) Polish (thanks to @Namax0r ) Thank you to @wunter8 for proactively picking up some Android tickets, and fixing them! You rock!","title":"ntfy Android app v1.14.0"},{"location":"releases/#ntfy-server-v1280","text":"Released September 27, 2022 This release primarily adds icon support for the Android app, and adds a display name to subscriptions in the web app. Aside from that, we fixed a few random bugs, most importantly the Priority header bug that allows the use behind Cloudflare. We also added a ton of documentation. Most prominently, an integrations + projects page . As of now, I also have started accepting donations and sponsorships \ud83d\udcb8. I would be very humbled if you consider donating. Features: Subscription display name for the web app ( #348 ) Allow setting socket permissions via --listen-unix-mode ( #356 , thanks to @koro666 ) Icons can be set for each individual notification ( #126 , thanks to @wunter8 ) CLI: Allow default username/password in client.yml ( #372 , thanks to @wunter8 ) Build support for other Unix systems ( #393 , thanks to @la-ninpre ) Bug fixes: ntfy user commands don't work with auth_file but works with auth-file ( #344 , thanks to @Histalek for reporting) Ignore new draft HTTP Priority header ( #351 , thanks to @ksurl for reporting) Delete expired attachments based on mod time instead of DB entry to avoid races (no ticket) Better logging for Matrix push key errors ( #384 , thanks to @christophehenry ) Web: Switched \"Pop\" and \"Pop Swoosh\" sounds ( #352 , thanks to @coma-toast for reporting) Documentation: Added integrations + projects page ( so many integrations, whoa! ) Added example for UptimeRobot Fix some PowerShell publish docs ( #345 , thanks to @noahpeltier ) Clarified Docker install instructions ( #361 , thanks to @barart for reporting) Mismatched quotation marks ( #392 ], thanks to @connorlanigan ) Additional translations: Ukranian (thanks to @v.kopitsa ) Polish (thanks to @Namax0r )","title":"ntfy server v1.28.0"},{"location":"releases/#ntfy-server-v1272","text":"Released June 23, 2022 This release brings two new CLI options to wait for a command to finish, or for a PID to exit. It also adds more detail to trace debug output. Aside from other bugs, it fixes a performance issue that occurred in large installations every minute or so, due to competing stats gathering (personal installations will likely be unaffected by this). Features: Add cache-startup-queries option to allow custom SQLite performance tuning (no ticket) ntfy CLI can now wait for a command or PID before publishing ( #263 , thanks to the original ntfy for the idea) Trace: Log entire HTTP request to simplify debugging (no ticket) Allow setting user password via NTFY_PASSWORD env variable ( #327 , thanks to @Kenix3 ) Bug fixes: Fix slow requests due to excessive locking ( #338 ) Return HTTP 500 for GET /_matrix/push/v1/notify when base-url is not configured (no ticket) Disallow setting upstream-base-url to the same value as base-url ( #334 , thanks to @oester for reporting) Fix since=<id> implementation for multiple topics ( #336 , thanks to @karmanyaahm for reporting) Simple parsing in Actions header now supports settings Android intent= key ( #341 , thanks to @wunter8 ) Deprecations: The ntfy publish --env-topic option is deprecated as of now (see deprecations for details)","title":"ntfy server v1.27.2"},{"location":"releases/#ntfy-server-v1260","text":"Released June 16, 2022 This release adds a Matrix Push Gateway directly into ntfy, to make self-hosting a Matrix server easier. The Windows CLI is now available via Scoop, and ntfy is now natively supported in Uptime Kuma. Features: ntfy now is a Matrix Push Gateway (in combination with UnifiedPush as the Provider Push Protocol , #319 / #326 , thanks to @MayeulC for reporting) Windows CLI is now available via Scoop ( ScoopInstaller#3594 , #311 , #269 , thanks to @kzshantonu ) Uptime Kuma now allows publishing to ntfy ( uptime-kuma#1674 , thanks to @philippdormann ) Display ntfy version in ntfy serve command ( #314 , thanks to @poblabs ) Bug fixes: Web app: Show \"notifications not supported\" alert on HTTP ( #323 , thanks to @milksteakjellybeans for reporting) Use last address in X-Forwarded-For header as visitor address ( #328 ) Documentation Added example for Uptime Kuma integration ( #315 , thanks to @philippdormann ) Fix Docker install instructions ( #320 , thanks to @milksteakjellybeans for reporting) Add clarifying comments to base-url ( #322 , thanks to @milksteakjellybeans for reporting) Update FAQ for iOS app ( #321 , thanks to @milksteakjellybeans for reporting)","title":"ntfy server v1.26.0"},{"location":"releases/#ntfy-ios-app-v12","text":"Released June 16, 2022 This release adds support for authentication/authorization for self-hosted servers. It also allows you to set your server as the default server for new topics. Features: Support for auth and user management ( #277 ) Ability to add default server ( #295 ) Bug fixes: Add validation for selfhosted server URL ( #290 )","title":"ntfy iOS app v1.2"},{"location":"releases/#ntfy-server-v1252","text":"Released June 2, 2022 This release adds the ability to set a log level to facilitate easier debugging of live systems. It also solves a production problem with a few over-users that resulted in Firebase quota problems (only applying to the over-users). We now block visitors from using Firebase if they trigger a quota exceeded response. On top of that, we updated the Firebase SDK and are now building the release in GitHub Actions. We've also got two more translations: Chinese/Simplified and Dutch. Features: Advanced logging, with different log levels and hot reloading of the log level ( #284 ) Bugs : Respect Firebase \"quota exceeded\" response for topics, block Firebase publishing for user for 10min ( #289 ) Fix documentation header blue header due to mkdocs-material theme update (no ticket) Maintenance: Upgrade Firebase Admin SDK to 4.x ( #274 ) CI: Build from pipeline instead of locally ( #36 ) Documentation : \u26a0\ufe0f Privacy policy updated to reflect additional debug/tracing feature (no ticket) Examples for Home Assistant ( #282 , thanks to @poblabs ) Install instructions for NixOS/Nix ( #282 , thanks to @arjan-s ) Clarify poll_request wording for iOS push notifications ( #300 , thanks to @prabirshrestha for reporting) Example for using ntfy with docker-compose.yml without root privileges ( #304 , thanks to @ksurl ) Additional translations: Chinese/Simplified (thanks to @yufei.im ) Dutch (thanks to @SchoNie )","title":"ntfy server v1.25.2"},{"location":"releases/#ntfy-ios-app-v11","text":"Released May 31, 2022 In this release of the iOS app, we add message priorities (mapped to iOS interruption levels), tags and emojis, action buttons to open websites or perform HTTP requests (in the notification and the detail view), a custom click action when the notification is tapped, and various other fixes. It also adds support for self-hosted servers (albeit not supporting auth yet). The self-hosted server needs to be configured to forward poll requests to upstream ntfy.sh for push notifications to work (see iOS push notifications for details). Features: Message priority support (no ticket) Tags/emojis support (no ticket) Action buttons support (no ticket) Click action support (no ticket) Open topic when notification clicked (no ticket) Notification now makes a sound and vibrates (no ticket) Cancel notifications when navigating to topic (no ticket) iOS 14.0 support (no ticket, PR#1 , thanks to @callum-99 ) Bug fixes: iOS UI not always updating properly ( #267 )","title":"ntfy iOS app v1.1"},{"location":"releases/#ntfy-server-v1240","text":"Released May 28, 2022 This release of the ntfy server brings supporting features for the ntfy iOS app. Most importantly, it enables support for self-hosted servers in combination with the iOS app. This is to overcome the restrictive Apple development environment. Features: Regularly send Firebase keepalive messages to ~poll topic to support self-hosted servers (no ticket) Add subscribe filter to query exact messages by ID (no ticket) Support for poll_request messages to support iOS push notifications for self-hosted servers (no ticket) Bug fixes: Support emails without Content-Type ( #265 , thanks to @dmbonsall ) Additional translations: Italian (thanks to @Genio2003 )","title":"ntfy server v1.24.0"},{"location":"releases/#ntfy-ios-app-v10","text":"Released May 25, 2022 This is the first version of the ntfy iOS app. It supports only ntfy.sh (no selfhosted servers) and only messages + title (no priority, tags, attachments, ...). I'll rapidly add (hopefully) most of the other ntfy features, and then I'll focus on self-hosted servers. The app is now available in the App Store . Tickets: iOS app ( #4 , see also: TestFlight summary ) Thanks: Thank you to all the testers who tried out the app. You guys gave me the confidence that it's ready to release (albeit with some known issues which will be addressed in follow-up releases).","title":"ntfy iOS app v1.0"},{"location":"releases/#ntfy-server-v1230","text":"Released May 21, 2022 This release ships a CLI for Windows and macOS, as well as the ability to disable the web app entirely. On top of that, it adds support for APNs, the iOS messaging service. This is needed for the (soon to be released) iOS app. Features: Windows and macOS builds for the ntfy CLI ( #112 ) Ability to disable the web app entirely ( #238 / #249 , thanks to @Curid ) Add APNs config to Firebase messages to support iOS app ( #247 , thanks to @Copephobia ) Bug fixes: Support underscores in server.yml config options ( #255 , thanks to @ajdelgado ) Force MAKEFLAGS to --jobs=1 in Makefile ( #257 , thanks to @oddlama ) Documentation: Typo in install instructions ( #252 / #251 , thanks to @oddlama ) Fix typo in private server example ( #262 , thanks to @MayeulC ) Examples for jellyseerr / overseerr ( #264 , thanks to @Fallenbagel ) Additional translations: Portuguese/Brazil (thanks to @tiagotriques and @pireshenrique22 ) Thank you to the many translators, who helped translate the new strings so quickly. I am humbled and amazed by your help.","title":"ntfy server v1.23.0"},{"location":"releases/#ntfy-android-app-v1130","text":"Released May 11, 2022 This release brings a slightly altered design for the detail view, featuring a card layout to make notifications more easily distinguishable from one another. It also ships per-topic settings that allow overriding minimum priority, auto delete threshold and custom icons. Aside from that, we've got tons of bug fixes as usual. Features: Per-subscription settings, custom subscription icons ( #155 , thanks to @mztiq for reporting) Cards in notification detail view ( #175 , thanks to @cmeis for reporting) Bug fixes: Accurate naming of \"mute notifications\" from \"pause notifications\" ( #224 , thanks to @shadow00 for reporting) Make messages with links selectable ( #226 , thanks to @StoyanDimitrov for reporting) Restoring topics or settings from backup doesn't work ( #223 , thanks to @shadow00 for reporting) Fix app icon on old Android versions ( #128 , thanks to @shadow00 for reporting) Fix races in UnifiedPush registration ( #230 , thanks to @Jakob for reporting) Prevent view action from crashing the app ( #233 ) Prevent long topic names and icons from overlapping ( #240 , thanks to @cmeis for reporting) Additional translations: Dutch ( incomplete , thanks to @diony ) Thank you: Thanks to @cmeis , @StoyanDimitrov , @Fallenbagel for testing, and to @Joeharrison94 for the input. And thank you very much to all the translators for catching up so quickly.","title":"ntfy Android app v1.13.0"},{"location":"releases/#ntfy-server-v1220","text":"Released May 7, 2022 This release makes the web app more accessible to people with disabilities, and introduces a \"mark as read\" icon in the web app. It also fixes a curious bug with WebSockets and Apache and makes the notification sounds in the web app a little quieter. We've also improved the documentation a little and added translations for three more languages. Features: Make web app more accessible ( #217 ) Better parsing of the user actions, allowing quotes (no ticket) Add \"mark as read\" icon button to notification ( #243 , thanks to @wunter8 ) Bug fixes: Upgrade header check is now case in-sensitive ( #228 , thanks to @wunter8 for finding it) Made web app sounds quieter ( #222 ) Add \"private browsing\"-specific error message for Firefox/Safari ( #208 , thanks to @julianfoad for reporting) Documentation: Improved caddy configuration (no ticket, thanks to @Stnby) Additional multi-line examples on the publish page ( #234 , thanks to @aTable ) Fixed PowerShell auth example to use UTF-8 ( #242 , thanks to @SMAW ) Additional translations: Czech (thanks to @waclaw66 ) French (thanks to @nathanaelhoun ) Hungarian (thanks to @agocsdaniel ) Thanks for testing: Thanks to @wunter8 for testing.","title":"ntfy server v1.22.0"},{"location":"releases/#ntfy-android-app-v1120","text":"Released Apr 25, 2022 The main feature in this Android release is Action Buttons , a feature that allows users to add actions to the notifications. Actions can be to view a website or app, send a broadcast, or send a HTTP request. We also added support for ntfy:// deep links , added three more languages and fixed a ton of bugs. Features: Custom notification action buttons ( #134 , thanks to @mrherman for reporting) Support for ntfy:// deep links ( #20 , thanks to @Copephobia for reporting) Fastlane metadata can now be translated too ( #198 , thanks to @StoyanDimitrov for reporting) Channel settings option to configure DND override, sounds, etc. ( #91 ) Bug fixes: Validate URLs when changing default server and server in user management ( #193 , thanks to @StoyanDimitrov for reporting) Error in sending test notification in different languages ( #209 , thanks to @StoyanDimitrov for reporting) \"[x] Instant delivery in doze mode\" checkbox does not work properly ( #211 ) Disallow \"http\" GET/HEAD actions with body ( #221 , thanks to @cmeis for reporting) Action \"view\" with \"clear=true\" does not work on some phones ( #220 , thanks to @cmeis for reporting) Do not group foreground service notification with others ( #219 , thanks to @s-h-a-r-d for reporting) Additional translations: Czech (thanks to @waclaw66 ) French (thanks to @nathanaelhoun ) Japanese (thanks to @shak ) Russian (thanks to @flamey and @ilya.mikheev.coder ) Thanks for testing: Thanks to @s-h-a-r-d (aka @Shard), @cmeis , @poblabs, and everyone I forgot for testing.","title":"ntfy Android app v1.12.0"},{"location":"releases/#ntfy-server-v1212","text":"Released Apr 24, 2022 In this release, the web app got translation support and was translated into 9 languages already \ud83c\udde7\ud83c\uddec \ud83c\udde9\ud83c\uddea \ud83c\uddfa\ud83c\uddf8 \ud83c\udf0e. It also re-adds support for ARMv6, and adds server-side support for Action Buttons. Action Buttons is a feature that will be released in the Android app soon. It allows users to add actions to the notifications. Limited support is available in the web app. Features: Custom notification action buttons ( #134 , thanks to @mrherman for reporting) Added ARMv6 build ( #200 , thanks to @jcrubioa for reporting) Web app internationalization support \ud83c\udde7\ud83c\uddec \ud83c\udde9\ud83c\uddea \ud83c\uddfa\ud83c\uddf8 \ud83c\udf0e ( #189 ) Bug fixes: Web app: English language strings fixes, additional descriptions for settings ( #203 , thanks to @StoyanDimitrov ) Web app: Show error message snackbar when sending test notification fails ( #205 , thanks to @cmeis ) Web app: basic URL validation in user management ( #204 , thanks to @cmeis ) Disallow \"http\" GET/HEAD actions with body ( #221 , thanks to @cmeis for reporting) Translations (web app): Bulgarian (thanks to @StoyanDimitrov ) German (thanks to @cmeis ) Indonesian (thanks to @linerly ) Japanese (thanks to @shak ) Norwegian Bokm\u00e5l (thanks to @comradekingu ) Russian (thanks to @flamey and @ilya.mikheev.coder ) Spanish (thanks to @rogeliodh ) Turkish (thanks to @ersen ) Integrations: Apprise support was fully released in v0.9.8.2 of Apprise. Thanks to @particledecay and @caronc for their fantastic work. You can try it yourself like this (detailed usage in the Apprise wiki ): pip3 install apprise apprise -b \"Hi there\" ntfys://mytopic","title":"ntfy server v1.21.2"},{"location":"releases/#ntfy-android-app-v1110","text":"Released Apr 7, 2022 Features: Download attachments to cache folder ( #181 ) Regularly delete attachments for deleted notifications ( #142 ) Translations to different languages ( #188 , thanks to @StoyanDimitrov for initiating things) Bug fixes: IllegalStateException: Failed to build unique file ( #177 , thanks to @Fallenbagel for reporting) SQLiteConstraintException: Crash during UP registration ( #185 ) Refresh preferences screen after settings import (#183, thanks to @cmeis for reporting) Add priority strings to strings.xml to make it translatable (#192, thanks to @StoyanDimitrov ) Translations: English language improvements (thanks to @comradekingu ) Bulgarian (thanks to @StoyanDimitrov ) Chinese/Simplified (thanks to @poi and @PeterCxy ) Dutch ( incomplete , thanks to @diony ) French (thanks to @Kusoneko and @mlcsthor ) German (thanks to @cmeis ) Italian (thanks to @theTranslator ) Indonesian (thanks to @linerly ) Norwegian Bokm\u00e5l ( incomplete , thanks to @comradekingu ) Portuguese/Brazil (thanks to @LW ) Spanish (thanks to @rogeliodh ) Turkish (thanks to @ersen ) Thanks: Many thanks to @cmeis , @Fallenbagel , @Joeharrison94 , and @rogeliodh for input on the new attachment logic, and for testing the release","title":"ntfy Android app v1.11.0"},{"location":"releases/#ntfy-server-v1200","text":"Released Apr 6, 2022 Features: : Added message bar and publish dialog ( #196 ) Bug fixes: Added EXPOSE 80/tcp to Dockerfile to support auto-discovery in Traefik ( #195 , thanks to @s-h-a-r-d ) Documentation: Added docker-compose example to install instructions ( #194 , thanks to @s-h-a-r-d ) Integrations: Apprise has added integration into ntfy ( #99 , apprise#524 , thanks to @particledecay and @caronc for their fantastic work)","title":"ntfy server v1.20.0"},{"location":"releases/#ntfy-server-v1190","text":"Released Mar 30, 2022 Bug fixes: Do not pack binary with upx for armv7/arm64 due to illegal instruction errors ( #191 , thanks to @iexos ) Do not allow comma in topic name in publish via GET endpoint (no ticket) Add \"Access-Control-Allow-Origin: *\" for attachments (no ticket, thanks to @FrameXX) Make pruning run again in web app ( #186 ) Added missing params delay and email to publish as JSON body (no ticket) Documentation: Improved e-mail publishing documentation","title":"ntfy server v1.19.0"},{"location":"releases/#ntfy-server-v1181","text":"Released Mar 21, 2022 This release ships no features or bug fixes. It's merely a documentation update. Documentation: Overhaul of developer documentation PowerShell examples for publish documentation ( #138 , thanks to @Joeharrison94 ) Additional examples for NodeRED, Gatus, Sonarr, Radarr, ... (thanks to @nickexyz ) Fixes in developer instructions (thanks to @Fallenbagel for reporting)","title":"ntfy server v1.18.1"},{"location":"releases/#ntfy-android-app-v1100","text":"Released Mar 21, 2022 Features: Support for UnifiedPush 2.0 specification (bytes messages, #130 ) Export/import settings and subscriptions ( #115 , thanks @cmeis for reporting) Open \"Click\" link when tapping notification ( #110 , thanks @cmeis for reporting) JSON stream deprecation banner ( #164 ) Bug fixes: Display locale-specific times, with AM/PM or 24h format ( #140 , thanks @hl2guide for reporting)","title":"ntfy Android app v1.10.0"},{"location":"releases/#ntfy-server-v1180","text":"Released Mar 16, 2022 Features: Publish messages as JSON ( #133 , thanks @cmeis for reporting, thanks to @Joeharrison94 and @Fallenbagel for testing) Bug fixes: rpm: do not overwrite server.yaml on package upgrade ( #166 , thanks @waclaw66 for reporting) Typo in ntfy.sh/announcements topic ( #170 , thanks to @sandebert ) Readme image URL fixes ( #156 , thanks to @ChaseCares ) Deprecations: Removed the ability to run server as ntfy (as opposed to ntfy serve ) as per deprecation","title":"ntfy server v1.18.0"},{"location":"releases/#ntfy-server-v1171","text":"Released Mar 12, 2022 Bug fixes: Replace crypto.subtle with hashCode to errors with Brave/FF-Windows (#157, thanks for reporting @arminus)","title":"ntfy server v1.17.1"},{"location":"releases/#ntfy-server-v1170","text":"Released Mar 11, 2022 Features & bug fixes: Replace web app with a React/MUI-based web app from the 21st century (#111) Web UI broken with auth (#132, thanks for reporting @arminus) Send static web resources as Content-Encoding: gzip , i.e. docs and web app (no ticket) Add support for auth via ?auth=... query param, used by WebSocket in web app (no ticket)","title":"ntfy server v1.17.0"},{"location":"releases/#ntfy-server-v1160","text":"Released Feb 27, 2022 Features & Bug fixes: Add auth support for subscribing with CLI (#147/#148, thanks @lrabane) Add support for ?since= (#151, thanks for reporting @nachotp) Documentation: Add watchtower/shoutrr examples (#150, thanks @rogeliodh) Add release notes Technical notes: As of this release, message IDs will be 12 characters long (as opposed to 10 characters). This is to be able to distinguish them from Unix timestamps for #151.","title":"ntfy server v1.16.0"},{"location":"releases/#ntfy-android-app-v191","text":"Released Feb 16, 2022 Features: Share to topic feature (#131, thanks u/emptymatrix for reporting) Ability to pick a default server (#127, thanks to @poblabs for reporting and testing) Automatically delete notifications (#71, thanks @arjan-s for reporting) Dark theme: Improvements around style and contrast (#119, thanks @kzshantonu for reporting) Bug fixes: Do not attempt to download attachments if they are already expired (#135) Fixed crash in AddFragment as seen per stack trace in Play Console (no ticket) Other thanks: Thanks to @rogeliodh, @cmeis and @poblabs for testing","title":"ntfy Android app v1.9.1"},{"location":"releases/#ntfy-server-v1150","text":"Released Feb 14, 2022 Features & bug fixes: Compress binaries with upx (#137) Add visitor-request-limit-exempt-hosts to exempt friendly hosts from rate limits (#144) Double default requests per second limit from 1 per 10s to 1 per 5s (no ticket) Convert \\n to new line for X-Message header as prep for sharing feature (see #136) Reduce bcrypt cost to 10 to make auth timing more reasonable on slow servers (no ticket) Docs update to include public test topics (no ticket)","title":"ntfy server v1.15.0"},{"location":"releases/#ntfy-server-v1141","text":"Released Feb 9, 2022 Bug fixes: Fix ARMv8 Docker build (#113, thanks to @djmaze) No other significant changes","title":"ntfy server v1.14.1"},{"location":"releases/#ntfy-android-app-v181","text":"Released Feb 6, 2022 Features: Support auth / access control (#19, thanks to @cmeis, @drsprite/@poblabs, @gedw99, @karmanyaahm, @Mek101, @gc-ss, @julianfoad, @nmoseman, Jakob, PeterCxy, Techlosopher) Export/upload log now allows censored/uncensored logs (no ticket) Removed wake lock (except for notification dispatching, no ticket) Swipe to remove notifications (#117) Bug fixes: Fix download issues on SDK 29 \"Movement not allowed\" (#116, thanks Jakob) Fix for Android 12 crashes (#124, thanks @eskilop) Fix WebSocket retry logic bug with multiple servers (no ticket) Fix race in refresh logic leading to duplicate connections (no ticket) Fix scrolling issue in subscribe to topic dialog (#131, thanks @arminus) Fix base URL text field color in dark mode, and size with large fonts (no ticket) Fix action bar color in dark mode (make black, no ticket) Notes: Foundational work for per-subscription settings","title":"ntfy Android app v1.8.1"},{"location":"releases/#ntfy-server-v1140","text":"Released Feb 3, 2022 Features : Server-side for authentication & authorization (#19, thanks for testing @cmeis, and for input from @gedw99, @karmanyaahm, @Mek101, @gc-ss, @julianfoad, @nmoseman, Jakob, PeterCxy, Techlosopher) Support NTFY_TOPIC env variable in ntfy publish (#103) Bug fixes : Binary UnifiedPush messages should not be converted to attachments (part 1, #101) Docs : Clarification regarding attachments (#118, thanks @xnumad)","title":"ntfy server v1.14.0"},{"location":"releases/#ntfy-android-app-v171","text":"Released Jan 21, 2022 New features: Battery improvements: wakelock disabled by default (#76) Dark mode: Allow changing app appearance (#102) Report logs: Copy/export logs to help troubleshooting (#94) WebSockets (experimental): Use WebSockets to subscribe to topics (#96, #100, #97) Show battery optimization banner (#105) Bug fixes: (Partial) support for binary UnifiedPush messages (#101) Notes: The foreground wakelock is now disabled by default The service restarter is now scheduled every 3h instead of every 6h","title":"ntfy Android app v1.7.1"},{"location":"releases/#ntfy-server-v1130","text":"Released Jan 16, 2022 Features: Websockets endpoint Listen on Unix socket, see config option listen-unix","title":"ntfy server v1.13.0"},{"location":"releases/#ntfy-android-app-v160","text":"Released Jan 14, 2022 New features: Attachments: Send files to the phone (#25, #15) Click action: Add a click action URL to notifications (#85) Battery optimization: Allow disabling persistent wake-lock (#76, thanks @MatMaul) Recognize imported user CA certificate for self-hosted servers (#87, thanks @keith24) Remove mentions of \"instant delivery\" from F-Droid to make it less confusing (no ticket) Bug fixes: Subscription \"muted until\" was not always respected (#90) Fix two stack traces reported by Play console vitals (no ticket) Truncate FCM messages >4,000 bytes, prefer instant messages (#84)","title":"ntfy Android app v1.6.0"},{"location":"releases/#ntfy-server-v1121","text":"Released Jan 14, 2022 Bug fixes: Fix security issue with attachment peaking (#93)","title":"ntfy server v1.12.1"},{"location":"releases/#ntfy-server-v1120","text":"Released Jan 13, 2022 Features: Attachments (#25, #15) Click action (#85) Increase FCM priority for high/max priority messages (#70) Bug fixes: Make postinst script work properly for rpm-based systems (#83, thanks @cmeis) Truncate FCM messages longer than 4000 bytes (#84) Fix listen-https port (no ticket)","title":"ntfy server v1.12.0"},{"location":"releases/#ntfy-android-app-v152","text":"Released Jan 3, 2022 New features: Allow using ntfy as UnifiedPush distributor (#9) Support for longer message up to 4096 bytes (#77) Minimum priority: show notifications only if priority X or higher (#79) Allowing disabling broadcasts in global settings (#80) Bug fixes: Allow int/long extras for SEND_MESSAGE intent (#57) Various battery improvement fixes (#76)","title":"ntfy Android app v1.5.2"},{"location":"releases/#ntfy-server-v1112","text":"Released Jan 1, 2022 Features & bug fixes: Increase message limit to 4096 bytes (4k) #77 Docs for UnifiedPush #9 Increase keepalive interval to 55s #76 Increase Firebase keepalive to 3 hours #76","title":"ntfy server v1.11.2"},{"location":"releases/#ntfy-server-v1100","text":"Released Dec 28, 2021 Features & bug fixes: Publish messages via e-mail #66 Server-side work to support unifiedpush.org #64 Fixing the Santa bug #65","title":"ntfy server v1.10.0"},{"location":"releases/#older-releases","text":"For older releases, check out the GitHub releases pages for the ntfy server and the ntfy Android app .","title":"Older releases"},{"location":"subscribe/api/","text":"Subscribe via API \u00b6 You can create and subscribe to a topic in the web UI , via the phone app , via the ntfy CLI , or in your own app or script by subscribing the API. This page describes how to subscribe via API. You may also want to check out the page that describes how to publish messages . You can consume the subscription API as either a simple HTTP stream (JSON, SSE or raw) , or via WebSockets . Both are incredibly simple to use. HTTP stream \u00b6 The HTTP stream-based API relies on a simple GET request with a streaming HTTP response, i.e you open a GET request and the connection stays open forever , sending messages back as they come in. There are three different API endpoints, which only differ in the response format: JSON stream : <topic>/json returns a JSON stream, with one JSON message object per line SSE stream : <topic>/sse returns messages as Server-Sent Events (SSE) , which can be used with EventSource Raw stream : <topic>/raw returns messages as raw text, with one line per message Subscribe as JSON stream \u00b6 Here are a few examples of how to consume the JSON endpoint ( <topic>/json ). For almost all languages, this is the recommended way to subscribe to a topic . The notable exception is JavaScript, for which the SSE/EventSource stream is much easier to work with. Command line (curl) ntfy CLI HTTP Go Python PHP $ curl -s ntfy.sh/disk-alerts/json {\"id\":\"SLiKI64DOt\",\"time\":1635528757,\"event\":\"open\",\"topic\":\"mytopic\"} {\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"} {\"id\":\"DGUDShMCsc\",\"time\":1635528787,\"event\":\"keepalive\",\"topic\":\"mytopic\"} ... $ ntfy subcribe disk-alerts {\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"} ... GET /disk-alerts/json HTTP / 1.1 Host : ntfy.sh HTTP/1.1 200 OK Content-Type: application/x-ndjson; charset=utf-8 Transfer-Encoding: chunked {\"id\":\"SLiKI64DOt\",\"time\":1635528757,\"event\":\"open\",\"topic\":\"mytopic\"} {\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"} {\"id\":\"DGUDShMCsc\",\"time\":1635528787,\"event\":\"keepalive\",\"topic\":\"mytopic\"} ... resp , err := http . Get ( \"https://ntfy.sh/disk-alerts/json\" ) if err != nil { log . Fatal ( err ) } defer resp . Body . Close () scanner := bufio . NewScanner ( resp . Body ) for scanner . Scan () { println ( scanner . Text ()) } resp = requests . get ( \"https://ntfy.sh/disk-alerts/json\" , stream = True ) for line in resp . iter_lines (): if line : print ( line ) $fp = fopen ( 'https://ntfy.sh/disk-alerts/json' , 'r' ); if ( ! $fp ) die ( 'cannot open stream' ); while ( ! feof ( $fp )) { echo fgets ( $fp , 2048 ); flush (); } fclose ( $fp ); Subscribe as SSE stream \u00b6 Using EventSource in JavaScript, you can consume notifications via a Server-Sent Events (SSE) stream. It's incredibly easy to use. Here's what it looks like. You may also want to check out the full example on GitHub . Command line (curl) HTTP JavaScript $ curl -s ntfy.sh/mytopic/sse event: open data: {\"id\":\"weSj9RtNkj\",\"time\":1635528898,\"event\":\"open\",\"topic\":\"mytopic\"} data: {\"id\":\"p0M5y6gcCY\",\"time\":1635528909,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Hi!\"} event: keepalive data: {\"id\":\"VNxNIg5fpt\",\"time\":1635528928,\"event\":\"keepalive\",\"topic\":\"test\"} ... GET /mytopic/sse HTTP / 1.1 Host : ntfy.sh HTTP/1.1 200 OK Content-Type: text/event-stream; charset=utf-8 Transfer-Encoding: chunked event: open data: {\"id\":\"weSj9RtNkj\",\"time\":1635528898,\"event\":\"open\",\"topic\":\"mytopic\"} data: {\"id\":\"p0M5y6gcCY\",\"time\":1635528909,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Hi!\"} event: keepalive data: {\"id\":\"VNxNIg5fpt\",\"time\":1635528928,\"event\":\"keepalive\",\"topic\":\"test\"} ... const eventSource = new EventSource ( 'https://ntfy.sh/mytopic/sse' ); eventSource . onmessage = ( e ) => { console . log ( e . data ); }; Subscribe as raw stream \u00b6 The /raw endpoint will output one line per message, and will only include the message body . It's useful for extremely simple scripts, and doesn't include all the data. Additional fields such as priority , tags or message title are not included in this output format. Keepalive messages are sent as empty lines. Command line (curl) HTTP Go Python PHP $ curl -s ntfy.sh/disk-alerts/raw Disk full ... GET /disk-alerts/raw HTTP / 1.1 Host : ntfy.sh HTTP/1.1 200 OK Content-Type: text/plain; charset=utf-8 Transfer-Encoding: chunked Disk full ... resp , err := http . Get ( \"https://ntfy.sh/disk-alerts/raw\" ) if err != nil { log . Fatal ( err ) } defer resp . Body . Close () scanner := bufio . NewScanner ( resp . Body ) for scanner . Scan () { println ( scanner . Text ()) } resp = requests . get ( \"https://ntfy.sh/disk-alerts/raw\" , stream = True ) for line in resp . iter_lines (): if line : print ( line ) $fp = fopen ( 'https://ntfy.sh/disk-alerts/raw' , 'r' ); if ( ! $fp ) die ( 'cannot open stream' ); while ( ! feof ( $fp )) { echo fgets ( $fp , 2048 ); flush (); } fclose ( $fp ); WebSockets \u00b6 You may also subscribe to topics via WebSockets , which is also widely supported in many languages. Most notably, WebSockets are natively supported in JavaScript. On the command line, I recommend websocat , a fantastic tool similar to socat or curl , but specifically for WebSockets. The WebSockets endpoint is available at <topic>/ws and returns messages as JSON objects similar to the JSON stream endpoint . Command line (websocat) HTTP Go JavaScript $ websocat wss://ntfy.sh/mytopic/ws {\"id\":\"qRHUCCvjj8\",\"time\":1642307388,\"event\":\"open\",\"topic\":\"mytopic\"} {\"id\":\"eOWoUBJ14x\",\"time\":1642307754,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"hi there\"} GET /disk-alerts/ws HTTP / 1.1 Host : ntfy.sh Upgrade : websocket Connection : Upgrade HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade ... import \"github.com/gorilla/websocket\" ws , _ , _ := websocket . DefaultDialer . Dial ( \"wss://ntfy.sh/mytopic/ws\" , nil ) messageType , data , err := ws . ReadMessage () ... const socket = new WebSocket ( 'wss://ntfy.sh/mytopic/ws' ); socket . addEventListener ( 'message' , function ( event ) { console . log ( event . data ); }); Advanced features \u00b6 Poll for messages \u00b6 You can also just poll for messages if you don't like the long-standing connection using the poll=1 query parameter. The connection will end after all available messages have been read. This parameter can be combined with since= (defaults to since=all ). curl -s \"ntfy.sh/mytopic/json?poll=1\" Fetch cached messages \u00b6 Messages may be cached for a couple of hours (see message caching ) to account for network interruptions of subscribers. If the server has configured message caching, you can read back what you missed by using the since= query parameter. It takes a duration (e.g. 10m or 30s ), a Unix timestamp (e.g. 1635528757 ), a message ID (e.g. nFS3knfcQ1xe ), or all (all cached messages). curl -s \"ntfy.sh/mytopic/json?since=10m\" curl -s \"ntfy.sh/mytopic/json?since=1645970742\" curl -s \"ntfy.sh/mytopic/json?since=nFS3knfcQ1xe\" Fetch scheduled messages \u00b6 Messages that are scheduled to be delivered at a later date are not typically returned when subscribing via the API, which makes sense, because after all, the messages have technically not been delivered yet. To also return scheduled messages from the API, you can use the scheduled=1 (alias: sched=1 ) parameter (makes most sense with the poll=1 parameter): curl -s \"ntfy.sh/mytopic/json?poll=1&sched=1\" Filter messages \u00b6 You can filter which messages are returned based on the well-known message fields id , message , title , priority and tags . Here's an example that only returns messages of high or urgent priority that contains the both tags \"zfs-error\" and \"error\". Note that the priority filter is a logical OR and the tags filter is a logical AND. $ curl \"ntfy.sh/alerts/json?priority=high&tags=zfs-error\" {\"id\":\"0TIkJpBcxR\",\"time\":1640122627,\"event\":\"open\",\"topic\":\"alerts\"} {\"id\":\"X3Uzz9O1sM\",\"time\":1640122674,\"event\":\"message\",\"topic\":\"alerts\",\"priority\":4, \"tags\":[\"error\", \"zfs-error\"], \"message\":\"ZFS pool corruption detected\"} Available filters (all case-insensitive): Filter variable Alias Example Description id X-ID ntfy.sh/mytopic/json?poll=1&id=pbkiz8SD7ZxG Only return messages that match this exact message ID message X-Message , m ntfy.sh/mytopic/json?message=lalala Only return messages that match this exact message string title X-Title , t ntfy.sh/mytopic/json?title=some+title Only return messages that match this exact title string priority X-Priority , prio , p ntfy.sh/mytopic/json?p=high,urgent Only return messages that match any priority listed (comma-separated) tags X-Tags , tag , ta ntfy.sh/mytopic?/jsontags=error,alert Only return messages that match all listed tags (comma-separated) Subscribe to multiple topics \u00b6 It's possible to subscribe to multiple topics in one HTTP call by providing a comma-separated list of topics in the URL. This allows you to reduce the number of connections you have to maintain: $ curl -s ntfy.sh/mytopic1,mytopic2/json {\"id\":\"0OkXIryH3H\",\"time\":1637182619,\"event\":\"open\",\"topic\":\"mytopic1,mytopic2,mytopic3\"} {\"id\":\"dzJJm7BCWs\",\"time\":1637182634,\"event\":\"message\",\"topic\":\"mytopic1\",\"message\":\"for topic 1\"} {\"id\":\"Cm02DsxUHb\",\"time\":1637182643,\"event\":\"message\",\"topic\":\"mytopic2\",\"message\":\"for topic 2\"} Authentication \u00b6 Depending on whether the server is configured to support access control , some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can: Use basic auth , e.g. Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk or use the auth query parameter , e.g. ?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw Please refer to the publishing documentation for additional details. JSON message format \u00b6 Both the /json endpoint and the /sse endpoint return a JSON format of the message. It's very straight forward: Message : Field Required Type Example Description id \u2714\ufe0f string hwQ2YpKdmg Randomly chosen message identifier time \u2714\ufe0f number 1635528741 Message date time, as Unix time stamp event \u2714\ufe0f open , keepalive , message , or poll_request message Message type, typically you'd be only interested in message topic \u2714\ufe0f string topic1,topic2 Comma-separated list of topics the message is associated with; only one for all message events, but may be a list in open events message - string Some message Message body; always present in message events title - string Some title Message title ; if not set defaults to ntfy.sh/<topic> tags - string array [\"tag1\",\"tag2\"] List of tags that may or not map to emojis priority - 1, 2, 3, 4, or 5 4 Message priority with 1=min, 3=default and 5=max click - URL https://example.com Website opened when notification is clicked actions - JSON array see actions buttons Action buttons that can be displayed in the notification attachment - JSON object see below Details about an attachment (name, URL, size, ...) Attachment (part of the message, see attachments for details): Field Required Type Example Description name \u2714\ufe0f string attachment.jpg Name of the attachment, can be overridden with X-Filename , see attachments url \u2714\ufe0f URL https://example.com/file.jpg URL of the attachment type -\ufe0f mime type image/jpeg Mime type of the attachment, only defined if attachment was uploaded to ntfy server size -\ufe0f number 33848 Size of the attachment in bytes, only defined if attachment was uploaded to ntfy server expires -\ufe0f number 1635528741 Attachment expiry date as Unix time stamp, only defined if attachment was uploaded to ntfy server Here's an example for each message type: Notification message Notification message (minimal) Open message Keepalive message Poll request message { \"id\" : \"sPs71M8A2T\" , \"time\" : 1643935928 , \"event\" : \"message\" , \"topic\" : \"mytopic\" , \"priority\" : 5 , \"tags\" : [ \"warning\" , \"skull\" ], \"click\" : \"https://homecam.mynet.lan/incident/1234\" , \"attachment\" : { \"name\" : \"camera.jpg\" , \"type\" : \"image/png\" , \"size\" : 33848 , \"expires\" : 1643946728 , \"url\" : \"https://ntfy.sh/file/sPs71M8A2T.png\" }, \"title\" : \"Unauthorized access detected\" , \"message\" : \"Movement detected in the yard. You better go check\" } { \"id\" : \"wze9zgqK41\" , \"time\" : 1638542110 , \"event\" : \"message\" , \"topic\" : \"phil_alerts\" , \"message\" : \"Remote access to phils-laptop detected. Act right away.\" } { \"id\" : \"2pgIAaGrQ8\" , \"time\" : 1638542215 , \"event\" : \"open\" , \"topic\" : \"phil_alerts\" } { \"id\" : \"371sevb0pD\" , \"time\" : 1638542275 , \"event\" : \"keepalive\" , \"topic\" : \"phil_alerts\" } { \"id\" : \"371sevb0pD\" , \"time\" : 1638542275 , \"event\" : \"poll_request\" , \"topic\" : \"phil_alerts\" } List of all parameters \u00b6 The following is a list of all parameters that can be passed when subscribing to a message . Parameter names are case-insensitive , and can be passed as HTTP headers or query parameters in the URL . They are listed in the table in their canonical form. Parameter Aliases (case-insensitive) Description poll X-Poll , po Return cached messages and close connection since X-Since , si Return cached messages since timestamp, duration or message ID scheduled X-Scheduled , sched Include scheduled/delayed messages in message list id X-ID Filter: Only return messages that match this exact message ID message X-Message , m Filter: Only return messages that match this exact message string title X-Title , t Filter: Only return messages that match this exact title string priority X-Priority , prio , p Filter: Only return messages that match any priority listed (comma-separated) tags X-Tags , tag , ta Filter: Only return messages that match all listed tags (comma-separated)","title":"Using the API"},{"location":"subscribe/api/#subscribe-via-api","text":"You can create and subscribe to a topic in the web UI , via the phone app , via the ntfy CLI , or in your own app or script by subscribing the API. This page describes how to subscribe via API. You may also want to check out the page that describes how to publish messages . You can consume the subscription API as either a simple HTTP stream (JSON, SSE or raw) , or via WebSockets . Both are incredibly simple to use.","title":"Subscribe via API"},{"location":"subscribe/api/#http-stream","text":"The HTTP stream-based API relies on a simple GET request with a streaming HTTP response, i.e you open a GET request and the connection stays open forever , sending messages back as they come in. There are three different API endpoints, which only differ in the response format: JSON stream : <topic>/json returns a JSON stream, with one JSON message object per line SSE stream : <topic>/sse returns messages as Server-Sent Events (SSE) , which can be used with EventSource Raw stream : <topic>/raw returns messages as raw text, with one line per message","title":"HTTP stream"},{"location":"subscribe/api/#subscribe-as-json-stream","text":"Here are a few examples of how to consume the JSON endpoint ( <topic>/json ). For almost all languages, this is the recommended way to subscribe to a topic . The notable exception is JavaScript, for which the SSE/EventSource stream is much easier to work with. Command line (curl) ntfy CLI HTTP Go Python PHP $ curl -s ntfy.sh/disk-alerts/json {\"id\":\"SLiKI64DOt\",\"time\":1635528757,\"event\":\"open\",\"topic\":\"mytopic\"} {\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"} {\"id\":\"DGUDShMCsc\",\"time\":1635528787,\"event\":\"keepalive\",\"topic\":\"mytopic\"} ... $ ntfy subcribe disk-alerts {\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"} ... GET /disk-alerts/json HTTP / 1.1 Host : ntfy.sh HTTP/1.1 200 OK Content-Type: application/x-ndjson; charset=utf-8 Transfer-Encoding: chunked {\"id\":\"SLiKI64DOt\",\"time\":1635528757,\"event\":\"open\",\"topic\":\"mytopic\"} {\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"} {\"id\":\"DGUDShMCsc\",\"time\":1635528787,\"event\":\"keepalive\",\"topic\":\"mytopic\"} ... resp , err := http . Get ( \"https://ntfy.sh/disk-alerts/json\" ) if err != nil { log . Fatal ( err ) } defer resp . Body . Close () scanner := bufio . NewScanner ( resp . Body ) for scanner . Scan () { println ( scanner . Text ()) } resp = requests . get ( \"https://ntfy.sh/disk-alerts/json\" , stream = True ) for line in resp . iter_lines (): if line : print ( line ) $fp = fopen ( 'https://ntfy.sh/disk-alerts/json' , 'r' ); if ( ! $fp ) die ( 'cannot open stream' ); while ( ! feof ( $fp )) { echo fgets ( $fp , 2048 ); flush (); } fclose ( $fp );","title":"Subscribe as JSON stream"},{"location":"subscribe/api/#subscribe-as-sse-stream","text":"Using EventSource in JavaScript, you can consume notifications via a Server-Sent Events (SSE) stream. It's incredibly easy to use. Here's what it looks like. You may also want to check out the full example on GitHub . Command line (curl) HTTP JavaScript $ curl -s ntfy.sh/mytopic/sse event: open data: {\"id\":\"weSj9RtNkj\",\"time\":1635528898,\"event\":\"open\",\"topic\":\"mytopic\"} data: {\"id\":\"p0M5y6gcCY\",\"time\":1635528909,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Hi!\"} event: keepalive data: {\"id\":\"VNxNIg5fpt\",\"time\":1635528928,\"event\":\"keepalive\",\"topic\":\"test\"} ... GET /mytopic/sse HTTP / 1.1 Host : ntfy.sh HTTP/1.1 200 OK Content-Type: text/event-stream; charset=utf-8 Transfer-Encoding: chunked event: open data: {\"id\":\"weSj9RtNkj\",\"time\":1635528898,\"event\":\"open\",\"topic\":\"mytopic\"} data: {\"id\":\"p0M5y6gcCY\",\"time\":1635528909,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Hi!\"} event: keepalive data: {\"id\":\"VNxNIg5fpt\",\"time\":1635528928,\"event\":\"keepalive\",\"topic\":\"test\"} ... const eventSource = new EventSource ( 'https://ntfy.sh/mytopic/sse' ); eventSource . onmessage = ( e ) => { console . log ( e . data ); };","title":"Subscribe as SSE stream"},{"location":"subscribe/api/#subscribe-as-raw-stream","text":"The /raw endpoint will output one line per message, and will only include the message body . It's useful for extremely simple scripts, and doesn't include all the data. Additional fields such as priority , tags or message title are not included in this output format. Keepalive messages are sent as empty lines. Command line (curl) HTTP Go Python PHP $ curl -s ntfy.sh/disk-alerts/raw Disk full ... GET /disk-alerts/raw HTTP / 1.1 Host : ntfy.sh HTTP/1.1 200 OK Content-Type: text/plain; charset=utf-8 Transfer-Encoding: chunked Disk full ... resp , err := http . Get ( \"https://ntfy.sh/disk-alerts/raw\" ) if err != nil { log . Fatal ( err ) } defer resp . Body . Close () scanner := bufio . NewScanner ( resp . Body ) for scanner . Scan () { println ( scanner . Text ()) } resp = requests . get ( \"https://ntfy.sh/disk-alerts/raw\" , stream = True ) for line in resp . iter_lines (): if line : print ( line ) $fp = fopen ( 'https://ntfy.sh/disk-alerts/raw' , 'r' ); if ( ! $fp ) die ( 'cannot open stream' ); while ( ! feof ( $fp )) { echo fgets ( $fp , 2048 ); flush (); } fclose ( $fp );","title":"Subscribe as raw stream"},{"location":"subscribe/api/#websockets","text":"You may also subscribe to topics via WebSockets , which is also widely supported in many languages. Most notably, WebSockets are natively supported in JavaScript. On the command line, I recommend websocat , a fantastic tool similar to socat or curl , but specifically for WebSockets. The WebSockets endpoint is available at <topic>/ws and returns messages as JSON objects similar to the JSON stream endpoint . Command line (websocat) HTTP Go JavaScript $ websocat wss://ntfy.sh/mytopic/ws {\"id\":\"qRHUCCvjj8\",\"time\":1642307388,\"event\":\"open\",\"topic\":\"mytopic\"} {\"id\":\"eOWoUBJ14x\",\"time\":1642307754,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"hi there\"} GET /disk-alerts/ws HTTP / 1.1 Host : ntfy.sh Upgrade : websocket Connection : Upgrade HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade ... import \"github.com/gorilla/websocket\" ws , _ , _ := websocket . DefaultDialer . Dial ( \"wss://ntfy.sh/mytopic/ws\" , nil ) messageType , data , err := ws . ReadMessage () ... const socket = new WebSocket ( 'wss://ntfy.sh/mytopic/ws' ); socket . addEventListener ( 'message' , function ( event ) { console . log ( event . data ); });","title":"WebSockets"},{"location":"subscribe/api/#advanced-features","text":"","title":"Advanced features"},{"location":"subscribe/api/#poll-for-messages","text":"You can also just poll for messages if you don't like the long-standing connection using the poll=1 query parameter. The connection will end after all available messages have been read. This parameter can be combined with since= (defaults to since=all ). curl -s \"ntfy.sh/mytopic/json?poll=1\"","title":"Poll for messages"},{"location":"subscribe/api/#fetch-cached-messages","text":"Messages may be cached for a couple of hours (see message caching ) to account for network interruptions of subscribers. If the server has configured message caching, you can read back what you missed by using the since= query parameter. It takes a duration (e.g. 10m or 30s ), a Unix timestamp (e.g. 1635528757 ), a message ID (e.g. nFS3knfcQ1xe ), or all (all cached messages). curl -s \"ntfy.sh/mytopic/json?since=10m\" curl -s \"ntfy.sh/mytopic/json?since=1645970742\" curl -s \"ntfy.sh/mytopic/json?since=nFS3knfcQ1xe\"","title":"Fetch cached messages"},{"location":"subscribe/api/#fetch-scheduled-messages","text":"Messages that are scheduled to be delivered at a later date are not typically returned when subscribing via the API, which makes sense, because after all, the messages have technically not been delivered yet. To also return scheduled messages from the API, you can use the scheduled=1 (alias: sched=1 ) parameter (makes most sense with the poll=1 parameter): curl -s \"ntfy.sh/mytopic/json?poll=1&sched=1\"","title":"Fetch scheduled messages"},{"location":"subscribe/api/#filter-messages","text":"You can filter which messages are returned based on the well-known message fields id , message , title , priority and tags . Here's an example that only returns messages of high or urgent priority that contains the both tags \"zfs-error\" and \"error\". Note that the priority filter is a logical OR and the tags filter is a logical AND. $ curl \"ntfy.sh/alerts/json?priority=high&tags=zfs-error\" {\"id\":\"0TIkJpBcxR\",\"time\":1640122627,\"event\":\"open\",\"topic\":\"alerts\"} {\"id\":\"X3Uzz9O1sM\",\"time\":1640122674,\"event\":\"message\",\"topic\":\"alerts\",\"priority\":4, \"tags\":[\"error\", \"zfs-error\"], \"message\":\"ZFS pool corruption detected\"} Available filters (all case-insensitive): Filter variable Alias Example Description id X-ID ntfy.sh/mytopic/json?poll=1&id=pbkiz8SD7ZxG Only return messages that match this exact message ID message X-Message , m ntfy.sh/mytopic/json?message=lalala Only return messages that match this exact message string title X-Title , t ntfy.sh/mytopic/json?title=some+title Only return messages that match this exact title string priority X-Priority , prio , p ntfy.sh/mytopic/json?p=high,urgent Only return messages that match any priority listed (comma-separated) tags X-Tags , tag , ta ntfy.sh/mytopic?/jsontags=error,alert Only return messages that match all listed tags (comma-separated)","title":"Filter messages"},{"location":"subscribe/api/#subscribe-to-multiple-topics","text":"It's possible to subscribe to multiple topics in one HTTP call by providing a comma-separated list of topics in the URL. This allows you to reduce the number of connections you have to maintain: $ curl -s ntfy.sh/mytopic1,mytopic2/json {\"id\":\"0OkXIryH3H\",\"time\":1637182619,\"event\":\"open\",\"topic\":\"mytopic1,mytopic2,mytopic3\"} {\"id\":\"dzJJm7BCWs\",\"time\":1637182634,\"event\":\"message\",\"topic\":\"mytopic1\",\"message\":\"for topic 1\"} {\"id\":\"Cm02DsxUHb\",\"time\":1637182643,\"event\":\"message\",\"topic\":\"mytopic2\",\"message\":\"for topic 2\"}","title":"Subscribe to multiple topics"},{"location":"subscribe/api/#authentication","text":"Depending on whether the server is configured to support access control , some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can: Use basic auth , e.g. Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk or use the auth query parameter , e.g. ?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw Please refer to the publishing documentation for additional details.","title":"Authentication"},{"location":"subscribe/api/#json-message-format","text":"Both the /json endpoint and the /sse endpoint return a JSON format of the message. It's very straight forward: Message : Field Required Type Example Description id \u2714\ufe0f string hwQ2YpKdmg Randomly chosen message identifier time \u2714\ufe0f number 1635528741 Message date time, as Unix time stamp event \u2714\ufe0f open , keepalive , message , or poll_request message Message type, typically you'd be only interested in message topic \u2714\ufe0f string topic1,topic2 Comma-separated list of topics the message is associated with; only one for all message events, but may be a list in open events message - string Some message Message body; always present in message events title - string Some title Message title ; if not set defaults to ntfy.sh/<topic> tags - string array [\"tag1\",\"tag2\"] List of tags that may or not map to emojis priority - 1, 2, 3, 4, or 5 4 Message priority with 1=min, 3=default and 5=max click - URL https://example.com Website opened when notification is clicked actions - JSON array see actions buttons Action buttons that can be displayed in the notification attachment - JSON object see below Details about an attachment (name, URL, size, ...) Attachment (part of the message, see attachments for details): Field Required Type Example Description name \u2714\ufe0f string attachment.jpg Name of the attachment, can be overridden with X-Filename , see attachments url \u2714\ufe0f URL https://example.com/file.jpg URL of the attachment type -\ufe0f mime type image/jpeg Mime type of the attachment, only defined if attachment was uploaded to ntfy server size -\ufe0f number 33848 Size of the attachment in bytes, only defined if attachment was uploaded to ntfy server expires -\ufe0f number 1635528741 Attachment expiry date as Unix time stamp, only defined if attachment was uploaded to ntfy server Here's an example for each message type: Notification message Notification message (minimal) Open message Keepalive message Poll request message { \"id\" : \"sPs71M8A2T\" , \"time\" : 1643935928 , \"event\" : \"message\" , \"topic\" : \"mytopic\" , \"priority\" : 5 , \"tags\" : [ \"warning\" , \"skull\" ], \"click\" : \"https://homecam.mynet.lan/incident/1234\" , \"attachment\" : { \"name\" : \"camera.jpg\" , \"type\" : \"image/png\" , \"size\" : 33848 , \"expires\" : 1643946728 , \"url\" : \"https://ntfy.sh/file/sPs71M8A2T.png\" }, \"title\" : \"Unauthorized access detected\" , \"message\" : \"Movement detected in the yard. You better go check\" } { \"id\" : \"wze9zgqK41\" , \"time\" : 1638542110 , \"event\" : \"message\" , \"topic\" : \"phil_alerts\" , \"message\" : \"Remote access to phils-laptop detected. Act right away.\" } { \"id\" : \"2pgIAaGrQ8\" , \"time\" : 1638542215 , \"event\" : \"open\" , \"topic\" : \"phil_alerts\" } { \"id\" : \"371sevb0pD\" , \"time\" : 1638542275 , \"event\" : \"keepalive\" , \"topic\" : \"phil_alerts\" } { \"id\" : \"371sevb0pD\" , \"time\" : 1638542275 , \"event\" : \"poll_request\" , \"topic\" : \"phil_alerts\" }","title":"JSON message format"},{"location":"subscribe/api/#list-of-all-parameters","text":"The following is a list of all parameters that can be passed when subscribing to a message . Parameter names are case-insensitive , and can be passed as HTTP headers or query parameters in the URL . They are listed in the table in their canonical form. Parameter Aliases (case-insensitive) Description poll X-Poll , po Return cached messages and close connection since X-Since , si Return cached messages since timestamp, duration or message ID scheduled X-Scheduled , sched Include scheduled/delayed messages in message list id X-ID Filter: Only return messages that match this exact message ID message X-Message , m Filter: Only return messages that match this exact message string title X-Title , t Filter: Only return messages that match this exact title string priority X-Priority , prio , p Filter: Only return messages that match any priority listed (comma-separated) tags X-Tags , tag , ta Filter: Only return messages that match all listed tags (comma-separated)","title":"List of all parameters"},{"location":"subscribe/cli/","text":"Subscribe via ntfy CLI \u00b6 In addition to subscribing via the web UI , the phone app , or the API , you can subscribe to topics via the ntfy CLI. The CLI is included in the same ntfy binary that can be used to self-host a server . Info The ntfy CLI is not required to send or receive messages . You can instead send messages with curl , and even use it to subscribe to topics . It may be a little more convenient to use the ntfy CLI than writing your own script. It all depends on the use case. \ud83d\ude00 Install + configure \u00b6 To install the ntfy CLI, simply follow the steps outlined on the install page . The ntfy server and client are the same binary, so it's all very convenient. After installing, you can (optionally) configure the client by creating ~/.config/ntfy/client.yml (for the non-root user), or /etc/ntfy/client.yml (for the root user). You can find a skeleton config on GitHub. If you just want to use ntfy.sh , you don't have to change anything. If you self-host your own server , you may want to edit the default-host option: # Base URL used to expand short topic names in the \"ntfy publish\" and \"ntfy subscribe\" commands. # If you self-host a ntfy server, you'll likely want to change this. # default-host : https://ntfy.myhost.com Publish messages \u00b6 You can send messages with the ntfy CLI using the ntfy publish command (or any of its aliases pub , send or trigger ). There are a lot of examples on the page about publishing messages , but here are a few quick ones: Simple send Send with title, priority, and tags Send at 8:30am Triggering a webhook ntfy publish mytopic This is a message ntfy publish mytopic \"This is a message\" ntfy pub mytopic \"This is a message\" ntfy publish \\ --title=\"Thing sold on eBay\" \\ --priority=high \\ --tags=partying_face \\ mytopic \\ \"Somebody just bought the thing that you sell\" ntfy pub --at=8:30am delayed_topic Laterzz ntfy trigger mywebhook ntfy pub mywebhook Attaching a local file \u00b6 You can easily upload and attach a local file to a notification: $ ntfy pub --file README.md mytopic | jq . { \"id\": \"meIlClVLABJQ\", \"time\": 1655825460, \"event\": \"message\", \"topic\": \"mytopic\", \"message\": \"You received a file: README.md\", \"attachment\": { \"name\": \"README.md\", \"type\": \"text/plain; charset=utf-8\", \"size\": 2892, \"expires\": 1655836260, \"url\": \"https://ntfy.sh/file/meIlClVLABJQ.txt\" } } Wait for PID/command \u00b6 If you have a long-running command and want to publish a notification when the command completes , you may wrap it with ntfy publish --wait-cmd (aliases: --cmd , --done ). Or, if you forgot to wrap it, and the command is already running, you can wait for the process to complete with ntfy publish --wait-pid (alias: --pid ). Run a command and wait for it to complete (here: rsync ... ): $ ntfy pub --wait-cmd mytopic rsync -av ./ root@example.com:/backups/ | jq . { \"id\": \"Re0rWXZQM8WB\", \"time\": 1655825624, \"event\": \"message\", \"topic\": \"mytopic\", \"message\": \"Command succeeded after 56.553s: rsync -av ./ root@example.com:/backups/\" } Or, if you already started the long-running process and want to wait for it using its process ID (PID), you can do this: Using a PID directly Using a pidof $ ntfy pub --wait-pid 8458 mytopic | jq . { \"id\": \"orM6hJKNYkWb\", \"time\": 1655825827, \"event\": \"message\", \"topic\": \"mytopic\", \"message\": \"Process with PID 8458 exited after 2.003s\" } $ ntfy pub --wait-pid $(pidof rsync) mytopic | jq . { \"id\": \"orM6hJKNYkWb\", \"time\": 1655825827, \"event\": \"message\", \"topic\": \"mytopic\", \"message\": \"Process with PID 8458 exited after 2.003s\" } Subscribe to topics \u00b6 You can subscribe to topics using ntfy subscribe . Depending on how it is called, this command will either print or execute a command for every arriving message. There are a few different ways in which the command can be run: Stream messages as JSON \u00b6 ntfy subscribe TOPIC If you run the command like this, it prints the JSON representation of every incoming message. This is useful when you have a command that wants to stream-read incoming JSON messages. Unless --poll is passed, this command stays open forever. $ ntfy sub mytopic {\"id\":\"nZ8PjH5oox\",\"time\":1639971913,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"hi there\"} {\"id\":\"sekSLWTujn\",\"time\":1639972063,\"event\":\"message\",\"topic\":\"mytopic\",priority:5,\"message\":\"Oh no!\"} ... Subscribe in JSON mode Run command for every message \u00b6 ntfy subscribe TOPIC COMMAND If you run it like this, a COMMAND is executed for every incoming messages. Scroll down to see a list of available environment variables. Here are a few examples: ntfy sub mytopic 'notify-send \"$m\"' ntfy sub topic1 /my/script.sh ntfy sub topic1 'echo \"Message $m was received. Its title was $t and it had priority $p' Execute command on incoming messages The message fields are passed to the command as environment variables and can be used in scripts. Note that since these are environment variables, you typically don't have to worry about quoting too much, as long as you enclose them in double-quotes, you should be fine: Variable Aliases Description $NTFY_ID $id Unique message ID $NTFY_TIME $time Unix timestamp of the message delivery $NTFY_TOPIC $topic Topic name $NTFY_MESSAGE $message , $m Message body $NTFY_TITLE $title , $t Message title $NTFY_PRIORITY $priority , $prio , $p Message priority (1=min, 5=max) $NTFY_TAGS $tags , $tag , $ta Message tags (comma separated list) $NTFY_RAW $raw Raw JSON message Subscribe to multiple topics \u00b6 ntfy subscribe --from-config To subscribe to multiple topics at once, and run different commands for each one, you can use ntfy subscribe --from-config , which will read the subscribe config from the config file. Please also check out the ntfy-client systemd service . Here's an example config file that subscribes to three different topics, executing a different command for each of them: ~/.config/ntfy/client.yml (Linux) ~/Library/Application Support/ntfy/client.yml (macOS) %AppData%\\ntfy\\client.yml (Windows) subscribe : - topic : echo-this command : 'echo \"Message received: $message\"' - topic : alerts command : notify-send -i /usr/share/ntfy/logo.png \"Important\" \"$m\" if : priority : high,urgent - topic : calc command : 'gnome-calculator 2>/dev/null &' - topic : print-temp command : | echo \"You can easily run inline scripts, too.\" temp=\"$(sensors | awk '/Pack/ { print substr($4,2,2) }')\" if [ $temp -gt 80 ]; then echo \"Warning: CPU temperature is $temp. Too high.\" else echo \"CPU temperature is $temp. That's alright.\" fi subscribe : - topic : echo-this command : 'echo \"Message received: $message\"' - topic : alerts command : osascript -e \"display notification \\\"$message\\\"\" if : priority : high,urgent - topic : calc command : open -a Calculator subscribe : - topic : echo-this command : 'echo Message received: %message%' - topic : alerts command : | notifu /m \"%NTFY_MESSAGE%\" exit 0 if : priority : high,urgent - topic : calc command : calc In this example, when ntfy subscribe --from-config is executed: Messages to echo-this simply echos to standard out Messages to alerts display as desktop notification for high priority messages using notify-send (Linux), notifu (Windows) or osascript (macOS) Messages to calc open the calculator \ud83d\ude00 ( because, why not ) Messages to print-temp execute an inline script and print the CPU temperature (Linux version only) I hope this shows how powerful this command is. Here's a short video that demonstrates the above example: Execute all the things If most (or all) of your subscription usernames, passwords, and commands are the same, you can specify a default-user , default-password , and default-command at the top of the client.yml . If a subscription does not specify a username/password to use or does not have a command, the defaults will be used, otherwise, the subscription settings will override the defaults. Warning Because the default-user and default-password will be sent for each topic that does not have its own username/password (even if the topic does not require authentication), be sure that the servers/topics you subscribe to use HTTPS to prevent leaking the username and password. Using the systemd service \u00b6 You can use the ntfy-client systemd service (see ntfy-client.service ) to subscribe to multiple topics just like in the example above. The service is automatically installed (but not started) if you install the deb/rpm package. To configure it, simply edit /etc/ntfy/client.yml and run sudo systemctl restart ntfy-client . Info The ntfy-client.service runs as user ntfy , meaning that typical Linux permission restrictions apply. See below for how to fix this. If the service runs on your personal desktop machine, you may want to override the service user/group ( User= and Group= ), and adjust the DISPLAY and DBUS_SESSION_BUS_ADDRESS environment variables. This will allow you to run commands in your X session as the primary machine user. You can either manually override these systemd service entries with sudo systemctl edit ntfy-client , and add this (assuming your user is phil ). Don't forget to run sudo systemctl daemon-reload and sudo systemctl restart ntfy-client after editing the service file: /etc/systemd/system/ntfy-client.service.d/override.conf [Service] User=phil Group=phil Environment=\"DISPLAY=:0\" \"DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus\" Or you can run the following script that creates this override config for you: sudo sh -c 'cat > /etc/systemd/system/ntfy-client.service.d/override.conf' <<EOF [Service] User=$USER Group=$USER Environment=\"DISPLAY=:0\" \"DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus\" EOF sudo systemctl daemon-reload sudo systemctl restart ntfy-client Authentication \u00b6 Depending on whether the server is configured to support access control , some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can use Basic Auth with a valid username/password. For your self-hosted server, be sure to use HTTPS to avoid eavesdropping and exposing your password. You can either add your username and password to the configuration file: ~/.config/ntfy/client.yml - topic : secret command : 'notify-send \"$m\"' user : phill password : mypass Or with the ntfy subscibe command: ntfy subscribe \\ -u phil:mypass \\ ntfy.example.com/mysecrets","title":"From the CLI"},{"location":"subscribe/cli/#subscribe-via-ntfy-cli","text":"In addition to subscribing via the web UI , the phone app , or the API , you can subscribe to topics via the ntfy CLI. The CLI is included in the same ntfy binary that can be used to self-host a server . Info The ntfy CLI is not required to send or receive messages . You can instead send messages with curl , and even use it to subscribe to topics . It may be a little more convenient to use the ntfy CLI than writing your own script. It all depends on the use case. \ud83d\ude00","title":"Subscribe via ntfy CLI"},{"location":"subscribe/cli/#install-configure","text":"To install the ntfy CLI, simply follow the steps outlined on the install page . The ntfy server and client are the same binary, so it's all very convenient. After installing, you can (optionally) configure the client by creating ~/.config/ntfy/client.yml (for the non-root user), or /etc/ntfy/client.yml (for the root user). You can find a skeleton config on GitHub. If you just want to use ntfy.sh , you don't have to change anything. If you self-host your own server , you may want to edit the default-host option: # Base URL used to expand short topic names in the \"ntfy publish\" and \"ntfy subscribe\" commands. # If you self-host a ntfy server, you'll likely want to change this. # default-host : https://ntfy.myhost.com","title":"Install + configure"},{"location":"subscribe/cli/#publish-messages","text":"You can send messages with the ntfy CLI using the ntfy publish command (or any of its aliases pub , send or trigger ). There are a lot of examples on the page about publishing messages , but here are a few quick ones: Simple send Send with title, priority, and tags Send at 8:30am Triggering a webhook ntfy publish mytopic This is a message ntfy publish mytopic \"This is a message\" ntfy pub mytopic \"This is a message\" ntfy publish \\ --title=\"Thing sold on eBay\" \\ --priority=high \\ --tags=partying_face \\ mytopic \\ \"Somebody just bought the thing that you sell\" ntfy pub --at=8:30am delayed_topic Laterzz ntfy trigger mywebhook ntfy pub mywebhook","title":"Publish messages"},{"location":"subscribe/cli/#attaching-a-local-file","text":"You can easily upload and attach a local file to a notification: $ ntfy pub --file README.md mytopic | jq . { \"id\": \"meIlClVLABJQ\", \"time\": 1655825460, \"event\": \"message\", \"topic\": \"mytopic\", \"message\": \"You received a file: README.md\", \"attachment\": { \"name\": \"README.md\", \"type\": \"text/plain; charset=utf-8\", \"size\": 2892, \"expires\": 1655836260, \"url\": \"https://ntfy.sh/file/meIlClVLABJQ.txt\" } }","title":"Attaching a local file"},{"location":"subscribe/cli/#wait-for-pidcommand","text":"If you have a long-running command and want to publish a notification when the command completes , you may wrap it with ntfy publish --wait-cmd (aliases: --cmd , --done ). Or, if you forgot to wrap it, and the command is already running, you can wait for the process to complete with ntfy publish --wait-pid (alias: --pid ). Run a command and wait for it to complete (here: rsync ... ): $ ntfy pub --wait-cmd mytopic rsync -av ./ root@example.com:/backups/ | jq . { \"id\": \"Re0rWXZQM8WB\", \"time\": 1655825624, \"event\": \"message\", \"topic\": \"mytopic\", \"message\": \"Command succeeded after 56.553s: rsync -av ./ root@example.com:/backups/\" } Or, if you already started the long-running process and want to wait for it using its process ID (PID), you can do this: Using a PID directly Using a pidof $ ntfy pub --wait-pid 8458 mytopic | jq . { \"id\": \"orM6hJKNYkWb\", \"time\": 1655825827, \"event\": \"message\", \"topic\": \"mytopic\", \"message\": \"Process with PID 8458 exited after 2.003s\" } $ ntfy pub --wait-pid $(pidof rsync) mytopic | jq . { \"id\": \"orM6hJKNYkWb\", \"time\": 1655825827, \"event\": \"message\", \"topic\": \"mytopic\", \"message\": \"Process with PID 8458 exited after 2.003s\" }","title":"Wait for PID/command"},{"location":"subscribe/cli/#subscribe-to-topics","text":"You can subscribe to topics using ntfy subscribe . Depending on how it is called, this command will either print or execute a command for every arriving message. There are a few different ways in which the command can be run:","title":"Subscribe to topics"},{"location":"subscribe/cli/#stream-messages-as-json","text":"ntfy subscribe TOPIC If you run the command like this, it prints the JSON representation of every incoming message. This is useful when you have a command that wants to stream-read incoming JSON messages. Unless --poll is passed, this command stays open forever. $ ntfy sub mytopic {\"id\":\"nZ8PjH5oox\",\"time\":1639971913,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"hi there\"} {\"id\":\"sekSLWTujn\",\"time\":1639972063,\"event\":\"message\",\"topic\":\"mytopic\",priority:5,\"message\":\"Oh no!\"} ... Subscribe in JSON mode","title":"Stream messages as JSON"},{"location":"subscribe/cli/#run-command-for-every-message","text":"ntfy subscribe TOPIC COMMAND If you run it like this, a COMMAND is executed for every incoming messages. Scroll down to see a list of available environment variables. Here are a few examples: ntfy sub mytopic 'notify-send \"$m\"' ntfy sub topic1 /my/script.sh ntfy sub topic1 'echo \"Message $m was received. Its title was $t and it had priority $p' Execute command on incoming messages The message fields are passed to the command as environment variables and can be used in scripts. Note that since these are environment variables, you typically don't have to worry about quoting too much, as long as you enclose them in double-quotes, you should be fine: Variable Aliases Description $NTFY_ID $id Unique message ID $NTFY_TIME $time Unix timestamp of the message delivery $NTFY_TOPIC $topic Topic name $NTFY_MESSAGE $message , $m Message body $NTFY_TITLE $title , $t Message title $NTFY_PRIORITY $priority , $prio , $p Message priority (1=min, 5=max) $NTFY_TAGS $tags , $tag , $ta Message tags (comma separated list) $NTFY_RAW $raw Raw JSON message","title":"Run command for every message"},{"location":"subscribe/cli/#subscribe-to-multiple-topics","text":"ntfy subscribe --from-config To subscribe to multiple topics at once, and run different commands for each one, you can use ntfy subscribe --from-config , which will read the subscribe config from the config file. Please also check out the ntfy-client systemd service . Here's an example config file that subscribes to three different topics, executing a different command for each of them: ~/.config/ntfy/client.yml (Linux) ~/Library/Application Support/ntfy/client.yml (macOS) %AppData%\\ntfy\\client.yml (Windows) subscribe : - topic : echo-this command : 'echo \"Message received: $message\"' - topic : alerts command : notify-send -i /usr/share/ntfy/logo.png \"Important\" \"$m\" if : priority : high,urgent - topic : calc command : 'gnome-calculator 2>/dev/null &' - topic : print-temp command : | echo \"You can easily run inline scripts, too.\" temp=\"$(sensors | awk '/Pack/ { print substr($4,2,2) }')\" if [ $temp -gt 80 ]; then echo \"Warning: CPU temperature is $temp. Too high.\" else echo \"CPU temperature is $temp. That's alright.\" fi subscribe : - topic : echo-this command : 'echo \"Message received: $message\"' - topic : alerts command : osascript -e \"display notification \\\"$message\\\"\" if : priority : high,urgent - topic : calc command : open -a Calculator subscribe : - topic : echo-this command : 'echo Message received: %message%' - topic : alerts command : | notifu /m \"%NTFY_MESSAGE%\" exit 0 if : priority : high,urgent - topic : calc command : calc In this example, when ntfy subscribe --from-config is executed: Messages to echo-this simply echos to standard out Messages to alerts display as desktop notification for high priority messages using notify-send (Linux), notifu (Windows) or osascript (macOS) Messages to calc open the calculator \ud83d\ude00 ( because, why not ) Messages to print-temp execute an inline script and print the CPU temperature (Linux version only) I hope this shows how powerful this command is. Here's a short video that demonstrates the above example: Execute all the things If most (or all) of your subscription usernames, passwords, and commands are the same, you can specify a default-user , default-password , and default-command at the top of the client.yml . If a subscription does not specify a username/password to use or does not have a command, the defaults will be used, otherwise, the subscription settings will override the defaults. Warning Because the default-user and default-password will be sent for each topic that does not have its own username/password (even if the topic does not require authentication), be sure that the servers/topics you subscribe to use HTTPS to prevent leaking the username and password.","title":"Subscribe to multiple topics"},{"location":"subscribe/cli/#using-the-systemd-service","text":"You can use the ntfy-client systemd service (see ntfy-client.service ) to subscribe to multiple topics just like in the example above. The service is automatically installed (but not started) if you install the deb/rpm package. To configure it, simply edit /etc/ntfy/client.yml and run sudo systemctl restart ntfy-client . Info The ntfy-client.service runs as user ntfy , meaning that typical Linux permission restrictions apply. See below for how to fix this. If the service runs on your personal desktop machine, you may want to override the service user/group ( User= and Group= ), and adjust the DISPLAY and DBUS_SESSION_BUS_ADDRESS environment variables. This will allow you to run commands in your X session as the primary machine user. You can either manually override these systemd service entries with sudo systemctl edit ntfy-client , and add this (assuming your user is phil ). Don't forget to run sudo systemctl daemon-reload and sudo systemctl restart ntfy-client after editing the service file: /etc/systemd/system/ntfy-client.service.d/override.conf [Service] User=phil Group=phil Environment=\"DISPLAY=:0\" \"DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus\" Or you can run the following script that creates this override config for you: sudo sh -c 'cat > /etc/systemd/system/ntfy-client.service.d/override.conf' <<EOF [Service] User=$USER Group=$USER Environment=\"DISPLAY=:0\" \"DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus\" EOF sudo systemctl daemon-reload sudo systemctl restart ntfy-client","title":"Using the systemd service"},{"location":"subscribe/cli/#authentication","text":"Depending on whether the server is configured to support access control , some topics may be read/write protected so that only users with the correct credentials can subscribe or publish to them. To publish/subscribe to protected topics, you can use Basic Auth with a valid username/password. For your self-hosted server, be sure to use HTTPS to avoid eavesdropping and exposing your password. You can either add your username and password to the configuration file: ~/.config/ntfy/client.yml - topic : secret command : 'notify-send \"$m\"' user : phill password : mypass Or with the ntfy subscibe command: ntfy subscribe \\ -u phil:mypass \\ ntfy.example.com/mysecrets","title":"Authentication"},{"location":"subscribe/phone/","text":"Subscribe from your phone \u00b6 You can use the ntfy Android App or iOS app to receive notifications directly on your phone. Just like the server, this app is also open source, and the code is available on GitHub ( Android , iOS ). Feel free to contribute, or build your own . You can get the Android app from both Google Play and from F-Droid . Both are largely identical, with the one exception that the F-Droid flavor does not use Firebase. The iOS app can be downloaded from the App Store . Overview \u00b6 A picture is worth a thousand words. Here are a few screenshots showing what the app looks like. It's all pretty straight forward. You can add topics and as soon as you add them, you can publish messages to them. If those screenshots are still not enough, here's a video: Sending push notifications to your Android phone Message priority \u00b6 Supported on: When you publish messages to a topic, you can define a priority . This priority defines how urgently Android will notify you about the notification, and whether they make a sound and/or vibrate. By default, messages with default priority or higher (>= 3) will vibrate and make a sound. Messages with high or urgent priority (>= 4) will also show as pop-over, like so: High and urgent notifications show as pop-over You can change these settings in Android by long-pressing on the app, and tapping \"Notifications\", or from the \"Settings\" menu under \"Channel settings\". There is one notification channel for each priority: Per-priority channels Per notification channel, you can configure a channel-specific sound , whether to override the Do Not Disturb (DND) setting, and other settings such as popover or notification dot: Per-priority sound/vibration settings Instant delivery \u00b6 Supported on: Instant delivery allows you to receive messages on your phone instantly, even when your phone is in doze mode , i.e. when the screen turns off, and you leave it on the desk for a while. This is achieved with a foreground service, which you'll see as a permanent notification that looks like this: Instant delivery foreground notification Android does not allow you to dismiss this notification, unless you turn off the notification channel in the settings. To do so, long-press on the foreground notification (screenshot above) and navigate to the settings. Then toggle the \"Subscription Service\" off: Turning off the persistent instant delivery notification Limitations without instant delivery : Without instant delivery, messages may arrive with a significant delay (sometimes many minutes, or even hours later). If you've ever picked up your phone and suddenly had 10 messages that were sent long before you know what I'm talking about. The reason for this is Firebase Cloud Messaging (FCM) . FCM is the only Google approved way to send push messages to Android devices, and it's what pretty much all apps use to deliver push notifications. Firebase is overall pretty bad at delivering messages in time, but on Android, most apps are stuck with it. The ntfy Android app uses Firebase only for the main host ntfy.sh , and only in the Google Play flavor of the app. It won't use Firebase for any self-hosted servers, and not at all in the the F-Droid flavor. Share to topic \u00b6 Supported on: You can share files to a topic using Android's \"Share\" feature. This works in almost any app that supports sharing files or text, and it's useful for sending yourself links, files or other things. The feature remembers a few of the last topics you shared content to and lists them at the bottom. The feature is pretty self-explanatory, and one picture says more than a thousand words. So here are two pictures: ntfy:// links \u00b6 Supported on: The ntfy Android app supports deep linking directly to topics. This is useful when integrating with automation apps such as MacroDroid or Tasker , or to simply directly link to a topic from a mobile website. Info Android deep linking of http/https links is very brittle and limited, which is why something like https://<host>/<topic>/subscribe is not possible , and instead ntfy:// links have to be used. More details in issue #20 . Supported link formats: Link format Example Description ntfy://<host>/<topic> ntfy://ntfy.sh/mytopic Directly opens the Android app detail view for the given topic and server. Subscribes to the topic if not already subscribed. This is equivalent to the web view https://ntfy.sh/mytopic (HTTPS!) ntfy://<host>/<topic>?secure=false ntfy://example.com/mytopic?secure=false Same as above, except that this will use HTTP instead of HTTPS as topic URL. This is equivalent to the web view http://example.com/mytopic (HTTP!) Integrations \u00b6 UnifiedPush \u00b6 Supported on: UnifiedPush is a standard for receiving push notifications without using the Google-owned Firebase Cloud Messaging (FCM) service. It puts push notifications in the control of the user. ntfy can act as a UnifiedPush distributor , forwarding messages to apps that support it. To use ntfy as a distributor, simply select it in one of the supported apps . That's it. It's a one-step installation \ud83d\ude00. If desired, you can select your own selfhosted ntfy server to handle messages. Here's an example with FluffyChat : Automation apps \u00b6 Supported on: The ntfy Android app integrates nicely with automation apps such as MacroDroid or Tasker . Using Android intents, you can react to incoming messages , as well as send messages . React to incoming messages \u00b6 To react on incoming notifications, you have to register to intents with the io.heckel.ntfy.MESSAGE_RECEIVED action (see code for details ). Here's an example using MacroDroid and Tasker , but any app that can catch broadcasts is supported: For MacroDroid, be sure to type in the package name io.heckel.ntfy , otherwise intents may be silently swallowed. If you're using topics to drive automation, you'll likely want to mute the topic in the ntfy app. This will prevent notification popups: Muting notifications to prevent popups Here's a list of extras you can access. Most likely, you'll want to filter for topic and react on message : Extra name Type Example Description id String bP8dMjO8ig Randomly chosen message identifier (likely not very useful for task automation) base_url String https://ntfy.sh Root URL of the ntfy server this message came from topic \u2764\ufe0f String mytopic Topic name; you'll likely want to filter for a specific topic muted Boolean true Indicates whether the subscription was muted in the app muted_str String ( true or false ) true Same as muted , but as string true or false time Int 1635528741 Message date time, as Unix time stamp title String Some title Message title ; may be empty if not set message \u2764\ufe0f String Some message Message body; this is likely what you're interested in message_bytes ByteArray (binary data) Message body as binary data encoding \ufe0f String - Message encoding (empty or \"base64\") tags String tag1,tag2,.. Comma-separated list of tags tags_map String 0=tag1,1=tag2,.. Map of tags to make it easier to map first, second, ... tag priority Int (between 1-5) 4 Message priority with 1=min, 3=default and 5=max click String https://google.com Click action URL, or empty if not set attachment_name String attachment.jpg Filename of the attachment; may be empty if not set attachment_type String image/jpeg Mime type of the attachment; may be empty if not set attachment_size Long 9923111 Size in bytes of the attachment; may be zero if not set attachment_expires Long 1655514244 Expiry date as Unix timestamp of the attachment URL; may be zero if not set attachment_url String https://ntfy.sh/file/afUbjadfl7ErP.jpg URL of the attachment; may be empty if not set Send messages using intents \u00b6 To send messages from other apps (such as MacroDroid and Tasker ), you can broadcast an intent with the io.heckel.ntfy.SEND_MESSAGE action. The ntfy Android app will forward the intent as a HTTP POST request to publish a message . This is primarily useful for apps that do not support HTTP POST/PUT (like MacroDroid). In Tasker, you can simply use the \"HTTP Request\" action, which is a little easier and also works if ntfy is not installed. Here's what that looks like: The following intent extras are supported when for the intent with the io.heckel.ntfy.SEND_MESSAGE action: Extra name Required Type Example Description base_url - String https://ntfy.sh Root URL of the ntfy server this message came from, defaults to https://ntfy.sh topic \u2764\ufe0f \u2714 String mytopic Topic name; you must set this title - String Some title Message title ; may be empty if not set message \u2764\ufe0f \u2714 String Some message Message body; you must set this tags - String tag1,tag2,.. Comma-separated list of tags priority - String or Int (between 1-5) 4 Message priority with 1=min, 3=default and 5=max","title":"From your phone"},{"location":"subscribe/phone/#subscribe-from-your-phone","text":"You can use the ntfy Android App or iOS app to receive notifications directly on your phone. Just like the server, this app is also open source, and the code is available on GitHub ( Android , iOS ). Feel free to contribute, or build your own . You can get the Android app from both Google Play and from F-Droid . Both are largely identical, with the one exception that the F-Droid flavor does not use Firebase. The iOS app can be downloaded from the App Store .","title":"Subscribe from your phone"},{"location":"subscribe/phone/#overview","text":"A picture is worth a thousand words. Here are a few screenshots showing what the app looks like. It's all pretty straight forward. You can add topics and as soon as you add them, you can publish messages to them. If those screenshots are still not enough, here's a video: Sending push notifications to your Android phone","title":"Overview"},{"location":"subscribe/phone/#message-priority","text":"Supported on: When you publish messages to a topic, you can define a priority . This priority defines how urgently Android will notify you about the notification, and whether they make a sound and/or vibrate. By default, messages with default priority or higher (>= 3) will vibrate and make a sound. Messages with high or urgent priority (>= 4) will also show as pop-over, like so: High and urgent notifications show as pop-over You can change these settings in Android by long-pressing on the app, and tapping \"Notifications\", or from the \"Settings\" menu under \"Channel settings\". There is one notification channel for each priority: Per-priority channels Per notification channel, you can configure a channel-specific sound , whether to override the Do Not Disturb (DND) setting, and other settings such as popover or notification dot: Per-priority sound/vibration settings","title":"Message priority"},{"location":"subscribe/phone/#instant-delivery","text":"Supported on: Instant delivery allows you to receive messages on your phone instantly, even when your phone is in doze mode , i.e. when the screen turns off, and you leave it on the desk for a while. This is achieved with a foreground service, which you'll see as a permanent notification that looks like this: Instant delivery foreground notification Android does not allow you to dismiss this notification, unless you turn off the notification channel in the settings. To do so, long-press on the foreground notification (screenshot above) and navigate to the settings. Then toggle the \"Subscription Service\" off: Turning off the persistent instant delivery notification Limitations without instant delivery : Without instant delivery, messages may arrive with a significant delay (sometimes many minutes, or even hours later). If you've ever picked up your phone and suddenly had 10 messages that were sent long before you know what I'm talking about. The reason for this is Firebase Cloud Messaging (FCM) . FCM is the only Google approved way to send push messages to Android devices, and it's what pretty much all apps use to deliver push notifications. Firebase is overall pretty bad at delivering messages in time, but on Android, most apps are stuck with it. The ntfy Android app uses Firebase only for the main host ntfy.sh , and only in the Google Play flavor of the app. It won't use Firebase for any self-hosted servers, and not at all in the the F-Droid flavor.","title":"Instant delivery"},{"location":"subscribe/phone/#share-to-topic","text":"Supported on: You can share files to a topic using Android's \"Share\" feature. This works in almost any app that supports sharing files or text, and it's useful for sending yourself links, files or other things. The feature remembers a few of the last topics you shared content to and lists them at the bottom. The feature is pretty self-explanatory, and one picture says more than a thousand words. So here are two pictures:","title":"Share to topic"},{"location":"subscribe/phone/#ntfy-links","text":"Supported on: The ntfy Android app supports deep linking directly to topics. This is useful when integrating with automation apps such as MacroDroid or Tasker , or to simply directly link to a topic from a mobile website. Info Android deep linking of http/https links is very brittle and limited, which is why something like https://<host>/<topic>/subscribe is not possible , and instead ntfy:// links have to be used. More details in issue #20 . Supported link formats: Link format Example Description ntfy://<host>/<topic> ntfy://ntfy.sh/mytopic Directly opens the Android app detail view for the given topic and server. Subscribes to the topic if not already subscribed. This is equivalent to the web view https://ntfy.sh/mytopic (HTTPS!) ntfy://<host>/<topic>?secure=false ntfy://example.com/mytopic?secure=false Same as above, except that this will use HTTP instead of HTTPS as topic URL. This is equivalent to the web view http://example.com/mytopic (HTTP!)","title":"ntfy:// links"},{"location":"subscribe/phone/#integrations","text":"","title":"Integrations"},{"location":"subscribe/phone/#unifiedpush","text":"Supported on: UnifiedPush is a standard for receiving push notifications without using the Google-owned Firebase Cloud Messaging (FCM) service. It puts push notifications in the control of the user. ntfy can act as a UnifiedPush distributor , forwarding messages to apps that support it. To use ntfy as a distributor, simply select it in one of the supported apps . That's it. It's a one-step installation \ud83d\ude00. If desired, you can select your own selfhosted ntfy server to handle messages. Here's an example with FluffyChat :","title":"UnifiedPush"},{"location":"subscribe/phone/#automation-apps","text":"Supported on: The ntfy Android app integrates nicely with automation apps such as MacroDroid or Tasker . Using Android intents, you can react to incoming messages , as well as send messages .","title":"Automation apps"},{"location":"subscribe/phone/#react-to-incoming-messages","text":"To react on incoming notifications, you have to register to intents with the io.heckel.ntfy.MESSAGE_RECEIVED action (see code for details ). Here's an example using MacroDroid and Tasker , but any app that can catch broadcasts is supported: For MacroDroid, be sure to type in the package name io.heckel.ntfy , otherwise intents may be silently swallowed. If you're using topics to drive automation, you'll likely want to mute the topic in the ntfy app. This will prevent notification popups: Muting notifications to prevent popups Here's a list of extras you can access. Most likely, you'll want to filter for topic and react on message : Extra name Type Example Description id String bP8dMjO8ig Randomly chosen message identifier (likely not very useful for task automation) base_url String https://ntfy.sh Root URL of the ntfy server this message came from topic \u2764\ufe0f String mytopic Topic name; you'll likely want to filter for a specific topic muted Boolean true Indicates whether the subscription was muted in the app muted_str String ( true or false ) true Same as muted , but as string true or false time Int 1635528741 Message date time, as Unix time stamp title String Some title Message title ; may be empty if not set message \u2764\ufe0f String Some message Message body; this is likely what you're interested in message_bytes ByteArray (binary data) Message body as binary data encoding \ufe0f String - Message encoding (empty or \"base64\") tags String tag1,tag2,.. Comma-separated list of tags tags_map String 0=tag1,1=tag2,.. Map of tags to make it easier to map first, second, ... tag priority Int (between 1-5) 4 Message priority with 1=min, 3=default and 5=max click String https://google.com Click action URL, or empty if not set attachment_name String attachment.jpg Filename of the attachment; may be empty if not set attachment_type String image/jpeg Mime type of the attachment; may be empty if not set attachment_size Long 9923111 Size in bytes of the attachment; may be zero if not set attachment_expires Long 1655514244 Expiry date as Unix timestamp of the attachment URL; may be zero if not set attachment_url String https://ntfy.sh/file/afUbjadfl7ErP.jpg URL of the attachment; may be empty if not set","title":"React to incoming messages"},{"location":"subscribe/phone/#send-messages-using-intents","text":"To send messages from other apps (such as MacroDroid and Tasker ), you can broadcast an intent with the io.heckel.ntfy.SEND_MESSAGE action. The ntfy Android app will forward the intent as a HTTP POST request to publish a message . This is primarily useful for apps that do not support HTTP POST/PUT (like MacroDroid). In Tasker, you can simply use the \"HTTP Request\" action, which is a little easier and also works if ntfy is not installed. Here's what that looks like: The following intent extras are supported when for the intent with the io.heckel.ntfy.SEND_MESSAGE action: Extra name Required Type Example Description base_url - String https://ntfy.sh Root URL of the ntfy server this message came from, defaults to https://ntfy.sh topic \u2764\ufe0f \u2714 String mytopic Topic name; you must set this title - String Some title Message title ; may be empty if not set message \u2764\ufe0f \u2714 String Some message Message body; you must set this tags - String tag1,tag2,.. Comma-separated list of tags priority - String or Int (between 1-5) 4 Message priority with 1=min, 3=default and 5=max","title":"Send messages using intents"},{"location":"subscribe/web/","text":"Subscribe from the Web UI \u00b6 You can use the Web UI to subscribe to topics as well. If you do, and you keep the website open, notifications will pop up as desktop notifications . Simply type in the topic name and click the Subscribe button. The browser will keep a connection open and listen for incoming notifications. To learn how to send messages, check out the publishing page . To keep receiving desktop notifications from ntfy, you need to keep the website open. What I do, and what I highly recommend, is to pin the tab so that it's always open, but sort of out of the way: Pin web app to move it out of the way","title":"From the Web UI"},{"location":"subscribe/web/#subscribe-from-the-web-ui","text":"You can use the Web UI to subscribe to topics as well. If you do, and you keep the website open, notifications will pop up as desktop notifications . Simply type in the topic name and click the Subscribe button. The browser will keep a connection open and listen for incoming notifications. To learn how to send messages, check out the publishing page . To keep receiving desktop notifications from ntfy, you need to keep the website open. What I do, and what I highly recommend, is to pin the tab so that it's always open, but sort of out of the way: Pin web app to move it out of the way","title":"Subscribe from the Web UI"}]}